
stm32_cw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e78  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ec  08006144  08006144  00016144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006830  08006830  00016830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006838  08006838  00016838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800683c  0800683c  0001683c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000158  24000000  08006840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000158  08006998  00020158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240001b8  080069f8  000201b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  24000218  08006a58  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000460  08006a58  00020460  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   000163a8  00000000  00000000  00020246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027b7  00000000  00000000  000365ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  00038da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  00039c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032f4c  00000000  00000000  0003a9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135c4  00000000  00000000  0006d8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00146f2f  00000000  00000000  00080ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c7def  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003be8  00000000  00000000  001c7e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000218 	.word	0x24000218
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800612c 	.word	0x0800612c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400021c 	.word	0x2400021c
 8000308:	0800612c 	.word	0x0800612c

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b974 	b.w	800060c <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468e      	mov	lr, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d14d      	bne.n	80003e6 <__udivmoddi4+0xaa>
 800034a:	428a      	cmp	r2, r1
 800034c:	4694      	mov	ip, r2
 800034e:	d969      	bls.n	8000424 <__udivmoddi4+0xe8>
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	b152      	cbz	r2, 800036c <__udivmoddi4+0x30>
 8000356:	fa01 f302 	lsl.w	r3, r1, r2
 800035a:	f1c2 0120 	rsb	r1, r2, #32
 800035e:	fa20 f101 	lsr.w	r1, r0, r1
 8000362:	fa0c fc02 	lsl.w	ip, ip, r2
 8000366:	ea41 0e03 	orr.w	lr, r1, r3
 800036a:	4094      	lsls	r4, r2
 800036c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000370:	0c21      	lsrs	r1, r4, #16
 8000372:	fbbe f6f8 	udiv	r6, lr, r8
 8000376:	fa1f f78c 	uxth.w	r7, ip
 800037a:	fb08 e316 	mls	r3, r8, r6, lr
 800037e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000382:	fb06 f107 	mul.w	r1, r6, r7
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 811f 	bcs.w	80005d4 <__udivmoddi4+0x298>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 811c 	bls.w	80005d4 <__udivmoddi4+0x298>
 800039c:	3e02      	subs	r6, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 f707 	mul.w	r7, r0, r7
 80003b4:	42a7      	cmp	r7, r4
 80003b6:	d90a      	bls.n	80003ce <__udivmoddi4+0x92>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c0:	f080 810a 	bcs.w	80005d8 <__udivmoddi4+0x29c>
 80003c4:	42a7      	cmp	r7, r4
 80003c6:	f240 8107 	bls.w	80005d8 <__udivmoddi4+0x29c>
 80003ca:	4464      	add	r4, ip
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d2:	1be4      	subs	r4, r4, r7
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa4>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xc2>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80ef 	beq.w	80005ce <__udivmoddi4+0x292>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x160>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd4>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80f9 	bhi.w	8000602 <__udivmoddi4+0x2c6>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	469e      	mov	lr, r3
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa4>
 800041e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa4>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xec>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 8092 	bne.w	8000556 <__udivmoddi4+0x21a>
 8000432:	eba1 010c 	sub.w	r1, r1, ip
 8000436:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	2601      	movs	r6, #1
 8000440:	0c20      	lsrs	r0, r4, #16
 8000442:	fbb1 f3f7 	udiv	r3, r1, r7
 8000446:	fb07 1113 	mls	r1, r7, r3, r1
 800044a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800044e:	fb0e f003 	mul.w	r0, lr, r3
 8000452:	4288      	cmp	r0, r1
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x12c>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f103 38ff 	add.w	r8, r3, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x12a>
 8000460:	4288      	cmp	r0, r1
 8000462:	f200 80cb 	bhi.w	80005fc <__udivmoddi4+0x2c0>
 8000466:	4643      	mov	r3, r8
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1110 	mls	r1, r7, r0, r1
 8000474:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000478:	fb0e fe00 	mul.w	lr, lr, r0
 800047c:	45a6      	cmp	lr, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x156>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d202      	bcs.n	8000490 <__udivmoddi4+0x154>
 800048a:	45a6      	cmp	lr, r4
 800048c:	f200 80bb 	bhi.w	8000606 <__udivmoddi4+0x2ca>
 8000490:	4608      	mov	r0, r1
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049a:	e79c      	b.n	80003d6 <__udivmoddi4+0x9a>
 800049c:	f1c6 0720 	rsb	r7, r6, #32
 80004a0:	40b3      	lsls	r3, r6
 80004a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80004aa:	fa20 f407 	lsr.w	r4, r0, r7
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	431c      	orrs	r4, r3
 80004b4:	40f9      	lsrs	r1, r7
 80004b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ba:	fa00 f306 	lsl.w	r3, r0, r6
 80004be:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c2:	0c20      	lsrs	r0, r4, #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fb09 1118 	mls	r1, r9, r8, r1
 80004cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d0:	fb08 f00e 	mul.w	r0, r8, lr
 80004d4:	4288      	cmp	r0, r1
 80004d6:	fa02 f206 	lsl.w	r2, r2, r6
 80004da:	d90b      	bls.n	80004f4 <__udivmoddi4+0x1b8>
 80004dc:	eb1c 0101 	adds.w	r1, ip, r1
 80004e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e4:	f080 8088 	bcs.w	80005f8 <__udivmoddi4+0x2bc>
 80004e8:	4288      	cmp	r0, r1
 80004ea:	f240 8085 	bls.w	80005f8 <__udivmoddi4+0x2bc>
 80004ee:	f1a8 0802 	sub.w	r8, r8, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	1a09      	subs	r1, r1, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004fc:	fb09 1110 	mls	r1, r9, r0, r1
 8000500:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000504:	fb00 fe0e 	mul.w	lr, r0, lr
 8000508:	458e      	cmp	lr, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x1e2>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f100 34ff 	add.w	r4, r0, #4294967295
 8000514:	d26c      	bcs.n	80005f0 <__udivmoddi4+0x2b4>
 8000516:	458e      	cmp	lr, r1
 8000518:	d96a      	bls.n	80005f0 <__udivmoddi4+0x2b4>
 800051a:	3802      	subs	r0, #2
 800051c:	4461      	add	r1, ip
 800051e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000522:	fba0 9402 	umull	r9, r4, r0, r2
 8000526:	eba1 010e 	sub.w	r1, r1, lr
 800052a:	42a1      	cmp	r1, r4
 800052c:	46c8      	mov	r8, r9
 800052e:	46a6      	mov	lr, r4
 8000530:	d356      	bcc.n	80005e0 <__udivmoddi4+0x2a4>
 8000532:	d053      	beq.n	80005dc <__udivmoddi4+0x2a0>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x212>
 8000536:	ebb3 0208 	subs.w	r2, r3, r8
 800053a:	eb61 010e 	sbc.w	r1, r1, lr
 800053e:	fa01 f707 	lsl.w	r7, r1, r7
 8000542:	fa22 f306 	lsr.w	r3, r2, r6
 8000546:	40f1      	lsrs	r1, r6
 8000548:	431f      	orrs	r7, r3
 800054a:	e9c5 7100 	strd	r7, r1, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	40d8      	lsrs	r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa21 f303 	lsr.w	r3, r1, r3
 8000564:	4091      	lsls	r1, r2
 8000566:	4301      	orrs	r1, r0
 8000568:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800056c:	fa1f fe8c 	uxth.w	lr, ip
 8000570:	fbb3 f0f7 	udiv	r0, r3, r7
 8000574:	fb07 3610 	mls	r6, r7, r0, r3
 8000578:	0c0b      	lsrs	r3, r1, #16
 800057a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800057e:	fb00 f60e 	mul.w	r6, r0, lr
 8000582:	429e      	cmp	r6, r3
 8000584:	fa04 f402 	lsl.w	r4, r4, r2
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x260>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000592:	d22f      	bcs.n	80005f4 <__udivmoddi4+0x2b8>
 8000594:	429e      	cmp	r6, r3
 8000596:	d92d      	bls.n	80005f4 <__udivmoddi4+0x2b8>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1b9b      	subs	r3, r3, r6
 800059e:	b289      	uxth	r1, r1
 80005a0:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a4:	fb07 3316 	mls	r3, r7, r6, r3
 80005a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ac:	fb06 f30e 	mul.w	r3, r6, lr
 80005b0:	428b      	cmp	r3, r1
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x28a>
 80005b4:	eb1c 0101 	adds.w	r1, ip, r1
 80005b8:	f106 38ff 	add.w	r8, r6, #4294967295
 80005bc:	d216      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 80005be:	428b      	cmp	r3, r1
 80005c0:	d914      	bls.n	80005ec <__udivmoddi4+0x2b0>
 80005c2:	3e02      	subs	r6, #2
 80005c4:	4461      	add	r1, ip
 80005c6:	1ac9      	subs	r1, r1, r3
 80005c8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005cc:	e738      	b.n	8000440 <__udivmoddi4+0x104>
 80005ce:	462e      	mov	r6, r5
 80005d0:	4628      	mov	r0, r5
 80005d2:	e705      	b.n	80003e0 <__udivmoddi4+0xa4>
 80005d4:	4606      	mov	r6, r0
 80005d6:	e6e3      	b.n	80003a0 <__udivmoddi4+0x64>
 80005d8:	4618      	mov	r0, r3
 80005da:	e6f8      	b.n	80003ce <__udivmoddi4+0x92>
 80005dc:	454b      	cmp	r3, r9
 80005de:	d2a9      	bcs.n	8000534 <__udivmoddi4+0x1f8>
 80005e0:	ebb9 0802 	subs.w	r8, r9, r2
 80005e4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005e8:	3801      	subs	r0, #1
 80005ea:	e7a3      	b.n	8000534 <__udivmoddi4+0x1f8>
 80005ec:	4646      	mov	r6, r8
 80005ee:	e7ea      	b.n	80005c6 <__udivmoddi4+0x28a>
 80005f0:	4620      	mov	r0, r4
 80005f2:	e794      	b.n	800051e <__udivmoddi4+0x1e2>
 80005f4:	4640      	mov	r0, r8
 80005f6:	e7d1      	b.n	800059c <__udivmoddi4+0x260>
 80005f8:	46d0      	mov	r8, sl
 80005fa:	e77b      	b.n	80004f4 <__udivmoddi4+0x1b8>
 80005fc:	3b02      	subs	r3, #2
 80005fe:	4461      	add	r1, ip
 8000600:	e732      	b.n	8000468 <__udivmoddi4+0x12c>
 8000602:	4630      	mov	r0, r6
 8000604:	e709      	b.n	800041a <__udivmoddi4+0xde>
 8000606:	4464      	add	r4, ip
 8000608:	3802      	subs	r0, #2
 800060a:	e742      	b.n	8000492 <__udivmoddi4+0x156>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <HexCharToByte>:

static uint32_t start_addr;
uint8_t eof_reached = 0x00;

static uint8_t HexCharToByte(char c)
    {
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
        if(c>='0' && c<='9')
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b2f      	cmp	r3, #47	; 0x2f
 800061e:	d906      	bls.n	800062e <HexCharToByte+0x1e>
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	2b39      	cmp	r3, #57	; 0x39
 8000624:	d803      	bhi.n	800062e <HexCharToByte+0x1e>
            return c -'0';
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	3b30      	subs	r3, #48	; 0x30
 800062a:	b2db      	uxtb	r3, r3
 800062c:	e014      	b.n	8000658 <HexCharToByte+0x48>
        else if(c>='a' && c<='f')
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b60      	cmp	r3, #96	; 0x60
 8000632:	d906      	bls.n	8000642 <HexCharToByte+0x32>
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b66      	cmp	r3, #102	; 0x66
 8000638:	d803      	bhi.n	8000642 <HexCharToByte+0x32>
            return c-'a'+0x0a;
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	3b57      	subs	r3, #87	; 0x57
 800063e:	b2db      	uxtb	r3, r3
 8000640:	e00a      	b.n	8000658 <HexCharToByte+0x48>
        else if(c>='A' && c <='F')
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b40      	cmp	r3, #64	; 0x40
 8000646:	d906      	bls.n	8000656 <HexCharToByte+0x46>
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b46      	cmp	r3, #70	; 0x46
 800064c:	d803      	bhi.n	8000656 <HexCharToByte+0x46>
            return c-'A'+0x0a;
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	3b37      	subs	r3, #55	; 0x37
 8000652:	b2db      	uxtb	r3, r3
 8000654:	e000      	b.n	8000658 <HexCharToByte+0x48>

        return -1;
 8000656:	23ff      	movs	r3, #255	; 0xff
    }
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <getByte>:

int getByte (const char *str, int pos, uint8_t *output)
    {
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
        if (str[pos] != '\0' && str[pos+1] != '\0')
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	4413      	add	r3, r2
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d029      	beq.n	80006d0 <getByte+0x6c>
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	3301      	adds	r3, #1
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	4413      	add	r3, r2
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d022      	beq.n	80006d0 <getByte+0x6c>
        {
            *output = HexCharToByte(str[pos]);
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	68fa      	ldr	r2, [r7, #12]
 800068e:	4413      	add	r3, r2
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ffbc 	bl	8000610 <HexCharToByte>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	701a      	strb	r2, [r3, #0]
            *output <<=4;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	011b      	lsls	r3, r3, #4
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	701a      	strb	r2, [r3, #0]
            *output |= HexCharToByte(str[pos+1]);
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	3301      	adds	r3, #1
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ffaa 	bl	8000610 <HexCharToByte>
 80006bc:	4603      	mov	r3, r0
 80006be:	461a      	mov	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	701a      	strb	r2, [r3, #0]
            return 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	e001      	b.n	80006d4 <getByte+0x70>
        }
        return -1;
 80006d0:	f04f 33ff 	mov.w	r3, #4294967295
    }
 80006d4:	4618      	mov	r0, r3
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <datacopy>:

int datacopy (uint8_t *indata, uint32_t *outdata)
	{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
	memset(outdata, 0x00, 16);
 80006e6:	2210      	movs	r2, #16
 80006e8:	2100      	movs	r1, #0
 80006ea:	6838      	ldr	r0, [r7, #0]
 80006ec:	f005 fd16 	bl	800611c <memset>
	for (int i = 0; i<16; i++)
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	e029      	b.n	800074a <datacopy+0x6e>
		{
		outdata[i/4] <<= 8;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	da00      	bge.n	80006fe <datacopy+0x22>
 80006fc:	3303      	adds	r3, #3
 80006fe:	109b      	asrs	r3, r3, #2
 8000700:	4619      	mov	r1, r3
 8000702:	460b      	mov	r3, r1
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	683a      	ldr	r2, [r7, #0]
 8000708:	4413      	add	r3, r2
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	460b      	mov	r3, r1
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	6839      	ldr	r1, [r7, #0]
 8000712:	440b      	add	r3, r1
 8000714:	0212      	lsls	r2, r2, #8
 8000716:	601a      	str	r2, [r3, #0]
		outdata[i/4] |= indata[i];
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	2b00      	cmp	r3, #0
 800071c:	da00      	bge.n	8000720 <datacopy+0x44>
 800071e:	3303      	adds	r3, #3
 8000720:	109b      	asrs	r3, r3, #2
 8000722:	461c      	mov	r4, r3
 8000724:	4623      	mov	r3, r4
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	683a      	ldr	r2, [r7, #0]
 800072a:	4413      	add	r3, r2
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	6879      	ldr	r1, [r7, #4]
 8000732:	440b      	add	r3, r1
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	4623      	mov	r3, r4
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	6839      	ldr	r1, [r7, #0]
 800073e:	440b      	add	r3, r1
 8000740:	4302      	orrs	r2, r0
 8000742:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<16; i++)
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	3301      	adds	r3, #1
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	2b0f      	cmp	r3, #15
 800074e:	ddd2      	ble.n	80006f6 <datacopy+0x1a>

		}
	return 0;
 8000750:	2300      	movs	r3, #0
	}
 8000752:	4618      	mov	r0, r3
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	bd90      	pop	{r4, r7, pc}

0800075a <crcCheck>:

int crcCheck(const char *str, uint8_t len)
    {
 800075a:	b580      	push	{r7, lr}
 800075c:	b08c      	sub	sp, #48	; 0x30
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
 8000762:	460b      	mov	r3, r1
 8000764:	70fb      	strb	r3, [r7, #3]
        uint8_t checksum = 0x00;
 8000766:	2300      	movs	r3, #0
 8000768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        uint8_t res = 0x00;
 800076c:	2300      	movs	r3, #0
 800076e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        getByte(str, len-2, &checksum);
 8000772:	78fb      	ldrb	r3, [r7, #3]
 8000774:	3b02      	subs	r3, #2
 8000776:	f107 0223 	add.w	r2, r7, #35	; 0x23
 800077a:	4619      	mov	r1, r3
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff ff71 	bl	8000664 <getByte>
        uint8_t cc[20];
        memset(cc, 0x00, 20);
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2214      	movs	r2, #20
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f005 fcc6 	bl	800611c <memset>
        for (size_t i = 1; i < len-2; i+=2)
 8000790:	2301      	movs	r3, #1
 8000792:	62bb      	str	r3, [r7, #40]	; 0x28
 8000794:	e00c      	b.n	80007b0 <crcCheck+0x56>
        {
            getByte(str, i, &cc[i/2]);
 8000796:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800079a:	085b      	lsrs	r3, r3, #1
 800079c:	f107 020c 	add.w	r2, r7, #12
 80007a0:	4413      	add	r3, r2
 80007a2:	461a      	mov	r2, r3
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff5d 	bl	8000664 <getByte>
        for (size_t i = 1; i < len-2; i+=2)
 80007aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ac:	3302      	adds	r3, #2
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	3b02      	subs	r3, #2
 80007b4:	461a      	mov	r2, r3
 80007b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d3ec      	bcc.n	8000796 <crcCheck+0x3c>
        }
        for (size_t i = 0; i <20; i++)
 80007bc:	2300      	movs	r3, #0
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
 80007c0:	e00c      	b.n	80007dc <crcCheck+0x82>
        {
            res +=cc[i];
 80007c2:	f107 020c 	add.w	r2, r7, #12
 80007c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c8:	4413      	add	r3, r2
 80007ca:	781a      	ldrb	r2, [r3, #0]
 80007cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007d0:	4413      	add	r3, r2
 80007d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        for (size_t i = 0; i <20; i++)
 80007d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d8:	3301      	adds	r3, #1
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
 80007dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007de:	2b13      	cmp	r3, #19
 80007e0:	d9ef      	bls.n	80007c2 <crcCheck+0x68>
        }

        res = ~res;
 80007e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007e6:	43db      	mvns	r3, r3
 80007e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        res += 0x01;
 80007ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007f0:	3301      	adds	r3, #1
 80007f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if (res == checksum) return 1;
 80007f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80007fa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80007fe:	429a      	cmp	r2, r3
 8000800:	d101      	bne.n	8000806 <crcCheck+0xac>
 8000802:	2301      	movs	r3, #1
 8000804:	e000      	b.n	8000808 <crcCheck+0xae>
        else return 0;
 8000806:	2300      	movs	r3, #0

    }
 8000808:	4618      	mov	r0, r3
 800080a:	3730      	adds	r7, #48	; 0x30
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <getFromHex>:

int getFromHex (const char *str, hexconv *pOutput)
    {
 8000810:	b580      	push	{r7, lr}
 8000812:	b08e      	sub	sp, #56	; 0x38
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
        if (str[0] != ':')
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b3a      	cmp	r3, #58	; 0x3a
 8000820:	d002      	beq.n	8000828 <getFromHex+0x18>
            {
                return -1;
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	e0ce      	b.n	80009c6 <getFromHex+0x1b6>
            }
        uint8_t type, len;
        //uint16_t start_addr = 0x00;
        uint16_t end_addr = 0x00;
 8000828:	2300      	movs	r3, #0
 800082a:	86fb      	strh	r3, [r7, #54]	; 0x36
        uint8_t data[16] = {0x00};
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
        pOutput->addr = 0;
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	2200      	movs	r2, #0
 8000840:	605a      	str	r2, [r3, #4]
        pOutput->len = 0;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]

        if (getByte(str, 1, &len) != 0)
 8000848:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800084c:	461a      	mov	r2, r3
 800084e:	2101      	movs	r1, #1
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff ff07 	bl	8000664 <getByte>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d002      	beq.n	8000862 <getFromHex+0x52>
            {
                return -1;
 800085c:	f04f 33ff 	mov.w	r3, #4294967295
 8000860:	e0b1      	b.n	80009c6 <getFromHex+0x1b6>
            }

        if (!crcCheck(str, 11+len*2))  // compute crc
 8000862:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	b2db      	uxtb	r3, r3
 800086a:	330b      	adds	r3, #11
 800086c:	b2db      	uxtb	r3, r3
 800086e:	4619      	mov	r1, r3
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff ff72 	bl	800075a <crcCheck>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d102      	bne.n	8000882 <getFromHex+0x72>
                    {
                        return -1;
 800087c:	f04f 33ff 	mov.w	r3, #4294967295
 8000880:	e0a1      	b.n	80009c6 <getFromHex+0x1b6>
                    }

        if (getByte(str, 7, &type) != 0)
 8000882:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8000886:	461a      	mov	r2, r3
 8000888:	2107      	movs	r1, #7
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff feea 	bl	8000664 <getByte>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d002      	beq.n	800089c <getFromHex+0x8c>
            {
                return -1;
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	e094      	b.n	80009c6 <getFromHex+0x1b6>
            }
        switch (type)
 800089c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	d06a      	beq.n	800097a <getFromHex+0x16a>
 80008a4:	2b04      	cmp	r3, #4
 80008a6:	f300 808a 	bgt.w	80009be <getFromHex+0x1ae>
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d002      	beq.n	80008b4 <getFromHex+0xa4>
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d05f      	beq.n	8000972 <getFromHex+0x162>
 80008b2:	e084      	b.n	80009be <getFromHex+0x1ae>
        {
        case 0x00:
            for (size_t i = 3; i < 7; i+=2)
 80008b4:	2303      	movs	r3, #3
 80008b6:	633b      	str	r3, [r7, #48]	; 0x30
 80008b8:	e011      	b.n	80008de <getFromHex+0xce>
                {
                    uint8_t buf;
                    end_addr <<= 8;
 80008ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80008bc:	021b      	lsls	r3, r3, #8
 80008be:	86fb      	strh	r3, [r7, #54]	; 0x36
                    getByte(str, i, &buf);
 80008c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008c2:	f107 020f 	add.w	r2, r7, #15
 80008c6:	4619      	mov	r1, r3
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff fecb 	bl	8000664 <getByte>
                    end_addr |= buf;
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80008d4:	4313      	orrs	r3, r2
 80008d6:	86fb      	strh	r3, [r7, #54]	; 0x36
            for (size_t i = 3; i < 7; i+=2)
 80008d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008da:	3302      	adds	r3, #2
 80008dc:	633b      	str	r3, [r7, #48]	; 0x30
 80008de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008e0:	2b06      	cmp	r3, #6
 80008e2:	d9ea      	bls.n	80008ba <getFromHex+0xaa>

                }
            pOutput->addr |= start_addr;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685a      	ldr	r2, [r3, #4]
 80008e8:	4b39      	ldr	r3, [pc, #228]	; (80009d0 <getFromHex+0x1c0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	431a      	orrs	r2, r3
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	605a      	str	r2, [r3, #4]
            pOutput->addr <<= 16;
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	041a      	lsls	r2, r3, #16
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	605a      	str	r2, [r3, #4]
            pOutput->addr |=end_addr;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	685a      	ldr	r2, [r3, #4]
 8000900:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000902:	431a      	orrs	r2, r3
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	605a      	str	r2, [r3, #4]
            int j = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
            memset(data, 0x00, len);
 800090c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000910:	461a      	mov	r2, r3
 8000912:	f107 0310 	add.w	r3, r7, #16
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f005 fbff 	bl	800611c <memset>
            for (size_t i = 9; i < 9+2*len; i+=2, j++)
 800091e:	2309      	movs	r3, #9
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
 8000922:	e00e      	b.n	8000942 <getFromHex+0x132>
                {

                //uint8_t buf;
                //data[j/4] <<= 8;
                //getByte(str, i, &buf);
                getByte(str, i, &data[j]);
 8000924:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000926:	f107 0210 	add.w	r2, r7, #16
 800092a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800092c:	4413      	add	r3, r2
 800092e:	461a      	mov	r2, r3
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff fe97 	bl	8000664 <getByte>
            for (size_t i = 9; i < 9+2*len; i+=2, j++)
 8000936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000938:	3302      	adds	r3, #2
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
 800093c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800093e:	3301      	adds	r3, #1
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000942:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	3309      	adds	r3, #9
 800094a:	461a      	mov	r2, r3
 800094c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800094e:	4293      	cmp	r3, r2
 8000950:	d3e8      	bcc.n	8000924 <getFromHex+0x114>
                //data[j] = buf;
                }

            //pOutput->data = data;
            //memcpy(pOutput->data, &data, len);
            datacopy(data, pOutput->data);
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	f103 0208 	add.w	r2, r3, #8
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	4611      	mov	r1, r2
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff febc 	bl	80006dc <datacopy>
            pOutput->len = len/4;
 8000964:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000968:	089b      	lsrs	r3, r3, #2
 800096a:	b2da      	uxtb	r2, r3
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	701a      	strb	r2, [r3, #0]

            break;
 8000970:	e028      	b.n	80009c4 <getFromHex+0x1b4>

        case 0x01:
            eof_reached = 0x01;
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <getFromHex+0x1c4>)
 8000974:	2201      	movs	r2, #1
 8000976:	701a      	strb	r2, [r3, #0]
            break;
 8000978:	e024      	b.n	80009c4 <getFromHex+0x1b4>


        case 0x04:
            for (size_t i = 9; i < 9+2*len; i+=2)
 800097a:	2309      	movs	r3, #9
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
 800097e:	e015      	b.n	80009ac <getFromHex+0x19c>
            {
                uint8_t buf;
                start_addr <<= 8;
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <getFromHex+0x1c0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	021b      	lsls	r3, r3, #8
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <getFromHex+0x1c0>)
 8000988:	6013      	str	r3, [r2, #0]
                getByte(str, i, &buf);
 800098a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098c:	f107 020e 	add.w	r2, r7, #14
 8000990:	4619      	mov	r1, r3
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff fe66 	bl	8000664 <getByte>
                start_addr |= buf;
 8000998:	7bbb      	ldrb	r3, [r7, #14]
 800099a:	461a      	mov	r2, r3
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <getFromHex+0x1c0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <getFromHex+0x1c0>)
 80009a4:	6013      	str	r3, [r2, #0]
            for (size_t i = 9; i < 9+2*len; i+=2)
 80009a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a8:	3302      	adds	r3, #2
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
 80009ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	3309      	adds	r3, #9
 80009b4:	461a      	mov	r2, r3
 80009b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d3e1      	bcc.n	8000980 <getFromHex+0x170>
            }

            break;
 80009bc:	e002      	b.n	80009c4 <getFromHex+0x1b4>

        default:
        	return -1;
 80009be:	f04f 33ff 	mov.w	r3, #4294967295
 80009c2:	e000      	b.n	80009c6 <getFromHex+0x1b6>
            break;
        }
        //pOutput->addr = out;
        //uint8_t len
        return 0;
 80009c4:	2300      	movs	r3, #0
    }
 80009c6:	4618      	mov	r0, r3
 80009c8:	3738      	adds	r7, #56	; 0x38
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	24000234 	.word	0x24000234
 80009d4:	24000238 	.word	0x24000238

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009de:	f000 fd17 	bl	8001410 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e2:	f000 f8a5 	bl	8000b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e6:	f000 f9d5 	bl	8000d94 <MX_GPIO_Init>
  MX_ETH_Init();
 80009ea:	f000 f933 	bl	8000c54 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009ee:	f000 f97d 	bl	8000cec <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80009f2:	f000 f9c7 	bl	8000d84 <MX_USB_OTG_HS_USB_Init>
  MX_CRC_Init();
 80009f6:	f000 f90b 	bl	8000c10 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  // ----------------open flash to write----------------
  HAL_FLASH_Unlock();
 80009fa:	f001 fc33 	bl	8002264 <HAL_FLASH_Unlock>
  HAL_Delay(10);
 80009fe:	200a      	movs	r0, #10
 8000a00:	f000 fd98 	bl	8001534 <HAL_Delay>

  //----------------------------erase--------------------

  	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000a04:	4b41      	ldr	r3, [pc, #260]	; (8000b0c <main+0x134>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
      EraseInitStruct.Banks         = FLASH_BANK_1;
 8000a0a:	4b40      	ldr	r3, [pc, #256]	; (8000b0c <main+0x134>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	605a      	str	r2, [r3, #4]
      EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_4;
 8000a10:	4b3e      	ldr	r3, [pc, #248]	; (8000b0c <main+0x134>)
 8000a12:	2230      	movs	r2, #48	; 0x30
 8000a14:	611a      	str	r2, [r3, #16]
      EraseInitStruct.Sector        = FirstSector;
 8000a16:	4b3e      	ldr	r3, [pc, #248]	; (8000b10 <main+0x138>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a3c      	ldr	r2, [pc, #240]	; (8000b0c <main+0x134>)
 8000a1c:	6093      	str	r3, [r2, #8]
      EraseInitStruct.NbSectors     = NbOfSectors;
 8000a1e:	4b3d      	ldr	r3, [pc, #244]	; (8000b14 <main+0x13c>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a3a      	ldr	r2, [pc, #232]	; (8000b0c <main+0x134>)
 8000a24:	60d3      	str	r3, [r2, #12]

	  HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError);
 8000a26:	493c      	ldr	r1, [pc, #240]	; (8000b18 <main+0x140>)
 8000a28:	4838      	ldr	r0, [pc, #224]	; (8000b0c <main+0x134>)
 8000a2a:	f001 fcab 	bl	8002384 <HAL_FLASHEx_Erase>
	  HAL_Delay(10);
 8000a2e:	200a      	movs	r0, #10
 8000a30:	f000 fd80 	bl	8001534 <HAL_Delay>

  //----------------- считать первую строку для получения extended adress----------------
  getFromHex(hexdata[0], &testData);
 8000a34:	4b39      	ldr	r3, [pc, #228]	; (8000b1c <main+0x144>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4939      	ldr	r1, [pc, #228]	; (8000b20 <main+0x148>)
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fee8 	bl	8000810 <getFromHex>

  //-----------------------обработка  остальных строк------------------------
  int i = 1;
 8000a40:	2301      	movs	r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
  while (!eof_reached)
 8000a44:	e059      	b.n	8000afa <main+0x122>
  {
	//int i = 1;
	if (0== getFromHex(hexdata[i], &testData))
 8000a46:	4a35      	ldr	r2, [pc, #212]	; (8000b1c <main+0x144>)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4e:	4934      	ldr	r1, [pc, #208]	; (8000b20 <main+0x148>)
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fedd 	bl	8000810 <getFromHex>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d14b      	bne.n	8000af4 <main+0x11c>
	{
		//testData.data[4] = 0x00;
		memset(flashdata, 0x00, sizeof(flashdata));
 8000a5c:	2220      	movs	r2, #32
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4830      	ldr	r0, [pc, #192]	; (8000b24 <main+0x14c>)
 8000a62:	f005 fb5b 	bl	800611c <memset>
		memcpy(flashdata, testData.data, 16);
 8000a66:	2210      	movs	r2, #16
 8000a68:	492f      	ldr	r1, [pc, #188]	; (8000b28 <main+0x150>)
 8000a6a:	482e      	ldr	r0, [pc, #184]	; (8000b24 <main+0x14c>)
 8000a6c:	f005 fb48 	bl	8006100 <memcpy>

//-------------------------а вот это потому, что я купил Н7---------------------
		uint32_t flash_addr = testData.addr;
 8000a70:	4b2b      	ldr	r3, [pc, #172]	; (8000b20 <main+0x148>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	603b      	str	r3, [r7, #0]
		i++;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
		if(0== getFromHex(hexdata[i], &testData) && !eof_reached)
 8000a7c:	4a27      	ldr	r2, [pc, #156]	; (8000b1c <main+0x144>)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a84:	4926      	ldr	r1, [pc, #152]	; (8000b20 <main+0x148>)
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fec2 	bl	8000810 <getFromHex>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d117      	bne.n	8000ac2 <main+0xea>
 8000a92:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <main+0x154>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d113      	bne.n	8000ac2 <main+0xea>
		{
		for (int j = 4; j<8; j++)
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	e00c      	b.n	8000aba <main+0xe2>
		{
			flashdata[j] = testData.data[j-4];
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	3b04      	subs	r3, #4
 8000aa4:	4a1e      	ldr	r2, [pc, #120]	; (8000b20 <main+0x148>)
 8000aa6:	3302      	adds	r3, #2
 8000aa8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aac:	491d      	ldr	r1, [pc, #116]	; (8000b24 <main+0x14c>)
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int j = 4; j<8; j++)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	2b07      	cmp	r3, #7
 8000abe:	ddef      	ble.n	8000aa0 <main+0xc8>
 8000ac0:	e012      	b.n	8000ae8 <main+0x110>
		}
		}
		else if (eof_reached)
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <main+0x154>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d00e      	beq.n	8000ae8 <main+0x110>
		{
			for (int j = 4; j<8; j++)
 8000aca:	2304      	movs	r3, #4
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	e008      	b.n	8000ae2 <main+0x10a>
					{
						flashdata[j] = 0xffffffff;
 8000ad0:	4a14      	ldr	r2, [pc, #80]	; (8000b24 <main+0x14c>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int j = 4; j<8; j++)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b07      	cmp	r3, #7
 8000ae6:	ddf3      	ble.n	8000ad0 <main+0xf8>
					}

		}
//---------------------конец костыля для Н7--------------------------

		HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, flash_addr, (uint32_t)flashdata);
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <main+0x14c>)
 8000aea:	461a      	mov	r2, r3
 8000aec:	6839      	ldr	r1, [r7, #0]
 8000aee:	2001      	movs	r0, #1
 8000af0:	f001 fb4a 	bl	8002188 <HAL_FLASH_Program>
		//HAL_FLASH_Program(TypeProgram, FlashAddress, DataAddress);
	}
	i++;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	3301      	adds	r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
  while (!eof_reached)
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <main+0x154>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d0a1      	beq.n	8000a46 <main+0x6e>
  }

  HAL_FLASH_Lock();
 8000b02:	f001 fbd1 	bl	80022a8 <HAL_FLASH_Lock>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  __NOP();
 8000b06:	bf00      	nop
 8000b08:	e7fd      	b.n	8000b06 <main+0x12e>
 8000b0a:	bf00      	nop
 8000b0c:	24000404 	.word	0x24000404
 8000b10:	24000140 	.word	0x24000140
 8000b14:	24000144 	.word	0x24000144
 8000b18:	24000400 	.word	0x24000400
 8000b1c:	24000000 	.word	0x24000000
 8000b20:	240003d8 	.word	0x240003d8
 8000b24:	24000418 	.word	0x24000418
 8000b28:	240003e0 	.word	0x240003e0
 8000b2c:	24000238 	.word	0x24000238

08000b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b09c      	sub	sp, #112	; 0x70
 8000b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	224c      	movs	r2, #76	; 0x4c
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f005 faec 	bl	800611c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	2220      	movs	r2, #32
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f005 fae6 	bl	800611c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b50:	2002      	movs	r0, #2
 8000b52:	f001 fead 	bl	80028b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b56:	2300      	movs	r3, #0
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	4b2c      	ldr	r3, [pc, #176]	; (8000c0c <SystemClock_Config+0xdc>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	4a2b      	ldr	r2, [pc, #172]	; (8000c0c <SystemClock_Config+0xdc>)
 8000b60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b64:	6193      	str	r3, [r2, #24]
 8000b66:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <SystemClock_Config+0xdc>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b72:	bf00      	nop
 8000b74:	4b25      	ldr	r3, [pc, #148]	; (8000c0c <SystemClock_Config+0xdc>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b80:	d1f8      	bne.n	8000b74 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b82:	2321      	movs	r3, #33	; 0x21
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b86:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b90:	2302      	movs	r3, #2
 8000b92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b94:	2302      	movs	r3, #2
 8000b96:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000b9c:	f240 1313 	movw	r3, #275	; 0x113
 8000ba0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000baa:	2302      	movs	r3, #2
 8000bac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f001 feb0 	bl	8002924 <HAL_RCC_OscConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bca:	f000 f9df 	bl	8000f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bce:	233f      	movs	r3, #63	; 0x3f
 8000bd0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bda:	2308      	movs	r3, #8
 8000bdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bde:	2340      	movs	r3, #64	; 0x40
 8000be0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000be2:	2340      	movs	r3, #64	; 0x40
 8000be4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bec:	2340      	movs	r3, #64	; 0x40
 8000bee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2103      	movs	r1, #3
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f002 fa43 	bl	8003080 <HAL_RCC_ClockConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c00:	f000 f9c4 	bl	8000f8c <Error_Handler>
  }
}
 8000c04:	bf00      	nop
 8000c06:	3770      	adds	r7, #112	; 0x70
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	58024800 	.word	0x58024800

08000c10 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c14:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <MX_CRC_Init+0x3c>)
 8000c16:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <MX_CRC_Init+0x40>)
 8000c18:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_CRC_Init+0x3c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <MX_CRC_Init+0x3c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_CRC_Init+0x3c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <MX_CRC_Init+0x3c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_CRC_Init+0x3c>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_CRC_Init+0x3c>)
 8000c3a:	f000 fd97 	bl	800176c <HAL_CRC_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000c44:	f000 f9a2 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	24000274 	.word	0x24000274
 8000c50:	58024c00 	.word	0x58024c00

08000c54 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c58:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <MX_ETH_Init+0x80>)
 8000c5a:	4a1f      	ldr	r2, [pc, #124]	; (8000cd8 <MX_ETH_Init+0x84>)
 8000c5c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <MX_ETH_Init+0x88>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c64:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <MX_ETH_Init+0x88>)
 8000c66:	2280      	movs	r2, #128	; 0x80
 8000c68:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <MX_ETH_Init+0x88>)
 8000c6c:	22e1      	movs	r2, #225	; 0xe1
 8000c6e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <MX_ETH_Init+0x88>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <MX_ETH_Init+0x88>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <MX_ETH_Init+0x88>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <MX_ETH_Init+0x80>)
 8000c84:	4a15      	ldr	r2, [pc, #84]	; (8000cdc <MX_ETH_Init+0x88>)
 8000c86:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <MX_ETH_Init+0x80>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <MX_ETH_Init+0x80>)
 8000c90:	4a13      	ldr	r2, [pc, #76]	; (8000ce0 <MX_ETH_Init+0x8c>)
 8000c92:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <MX_ETH_Init+0x80>)
 8000c96:	4a13      	ldr	r2, [pc, #76]	; (8000ce4 <MX_ETH_Init+0x90>)
 8000c98:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <MX_ETH_Init+0x80>)
 8000c9c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ca0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ca2:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <MX_ETH_Init+0x80>)
 8000ca4:	f000 fe4c 	bl	8001940 <HAL_ETH_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000cae:	f000 f96d 	bl	8000f8c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000cb2:	2238      	movs	r2, #56	; 0x38
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <MX_ETH_Init+0x94>)
 8000cb8:	f005 fa30 	bl	800611c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <MX_ETH_Init+0x94>)
 8000cbe:	2221      	movs	r2, #33	; 0x21
 8000cc0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_ETH_Init+0x94>)
 8000cc4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000cc8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <MX_ETH_Init+0x94>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	24000298 	.word	0x24000298
 8000cd8:	40028000 	.word	0x40028000
 8000cdc:	24000438 	.word	0x24000438
 8000ce0:	240001b8 	.word	0x240001b8
 8000ce4:	24000158 	.word	0x24000158
 8000ce8:	2400023c 	.word	0x2400023c

08000cec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cf0:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000cf2:	4a23      	ldr	r2, [pc, #140]	; (8000d80 <MX_USART3_UART_Init+0x94>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cf6:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cfc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d04:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1c:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d22:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d2e:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d34:	4811      	ldr	r0, [pc, #68]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d36:	f004 f84b 	bl	8004dd0 <HAL_UART_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d40:	f000 f924 	bl	8000f8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d44:	2100      	movs	r1, #0
 8000d46:	480d      	ldr	r0, [pc, #52]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d48:	f005 f8ec 	bl	8005f24 <HAL_UARTEx_SetTxFifoThreshold>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d52:	f000 f91b 	bl	8000f8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d56:	2100      	movs	r1, #0
 8000d58:	4808      	ldr	r0, [pc, #32]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d5a:	f005 f921 	bl	8005fa0 <HAL_UARTEx_SetRxFifoThreshold>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d64:	f000 f912 	bl	8000f8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d68:	4804      	ldr	r0, [pc, #16]	; (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d6a:	f005 f8a2 	bl	8005eb2 <HAL_UARTEx_DisableFifoMode>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d74:	f000 f90a 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	24000348 	.word	0x24000348
 8000d80:	40004800 	.word	0x40004800

08000d84 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08c      	sub	sp, #48	; 0x30
 8000d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000daa:	4b71      	ldr	r3, [pc, #452]	; (8000f70 <MX_GPIO_Init+0x1dc>)
 8000dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db0:	4a6f      	ldr	r2, [pc, #444]	; (8000f70 <MX_GPIO_Init+0x1dc>)
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dba:	4b6d      	ldr	r3, [pc, #436]	; (8000f70 <MX_GPIO_Init+0x1dc>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	61bb      	str	r3, [r7, #24]
 8000dc6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc8:	4b69      	ldr	r3, [pc, #420]	; (8000f70 <MX_GPIO_Init+0x1dc>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dce:	4a68      	ldr	r2, [pc, #416]	; (8000f70 <MX_GPIO_Init+0x1dc>)
 8000dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd8:	4b65      	ldr	r3, [pc, #404]	; (8000f70 <MX_GPIO_Init+0x1dc>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	4b62      	ldr	r3, [pc, #392]	; (8000f70 <MX_GPIO_Init+0x1dc>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dec:	4a60      	ldr	r2, [pc, #384]	; (8000f70 <MX_GPIO_Init+0x1dc>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df6:	4b5e      	ldr	r3, [pc, #376]	; (8000f70 <MX_GPIO_Init+0x1dc>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e04:	4b5a      	ldr	r3, [pc, #360]	; (8000f70 <MX_GPIO_Init+0x1dc>)
 8000e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0a:	4a59      	ldr	r2, [pc, #356]	; (8000f70 <MX_GPIO_Init+0x1dc>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e14:	4b56      	ldr	r3, [pc, #344]	; (8000f70 <MX_GPIO_Init+0x1dc>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e22:	4b53      	ldr	r3, [pc, #332]	; (8000f70 <MX_GPIO_Init+0x1dc>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e28:	4a51      	ldr	r2, [pc, #324]	; (8000f70 <MX_GPIO_Init+0x1dc>)
 8000e2a:	f043 0308 	orr.w	r3, r3, #8
 8000e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e32:	4b4f      	ldr	r3, [pc, #316]	; (8000f70 <MX_GPIO_Init+0x1dc>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e38:	f003 0308 	and.w	r3, r3, #8
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e40:	4b4b      	ldr	r3, [pc, #300]	; (8000f70 <MX_GPIO_Init+0x1dc>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e46:	4a4a      	ldr	r2, [pc, #296]	; (8000f70 <MX_GPIO_Init+0x1dc>)
 8000e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e50:	4b47      	ldr	r3, [pc, #284]	; (8000f70 <MX_GPIO_Init+0x1dc>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e5e:	4b44      	ldr	r3, [pc, #272]	; (8000f70 <MX_GPIO_Init+0x1dc>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	4a42      	ldr	r2, [pc, #264]	; (8000f70 <MX_GPIO_Init+0x1dc>)
 8000e66:	f043 0310 	orr.w	r3, r3, #16
 8000e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6e:	4b40      	ldr	r3, [pc, #256]	; (8000f70 <MX_GPIO_Init+0x1dc>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	f003 0310 	and.w	r3, r3, #16
 8000e78:	603b      	str	r3, [r7, #0]
 8000e7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e82:	483c      	ldr	r0, [pc, #240]	; (8000f74 <MX_GPIO_Init+0x1e0>)
 8000e84:	f001 fcfa 	bl	800287c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e8e:	483a      	ldr	r0, [pc, #232]	; (8000f78 <MX_GPIO_Init+0x1e4>)
 8000e90:	f001 fcf4 	bl	800287c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2102      	movs	r1, #2
 8000e98:	4838      	ldr	r0, [pc, #224]	; (8000f7c <MX_GPIO_Init+0x1e8>)
 8000e9a:	f001 fcef 	bl	800287c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4833      	ldr	r0, [pc, #204]	; (8000f80 <MX_GPIO_Init+0x1ec>)
 8000eb4:	f001 fb3a 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000eb8:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4828      	ldr	r0, [pc, #160]	; (8000f74 <MX_GPIO_Init+0x1e0>)
 8000ed2:	f001 fb2b 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	4619      	mov	r1, r3
 8000eee:	4822      	ldr	r0, [pc, #136]	; (8000f78 <MX_GPIO_Init+0x1e4>)
 8000ef0:	f001 fb1c 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	4619      	mov	r1, r3
 8000f08:	481e      	ldr	r0, [pc, #120]	; (8000f84 <MX_GPIO_Init+0x1f0>)
 8000f0a:	f001 fb0f 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000f0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f14:	2300      	movs	r3, #0
 8000f16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	4619      	mov	r1, r3
 8000f22:	4819      	ldr	r0, [pc, #100]	; (8000f88 <MX_GPIO_Init+0x1f4>)
 8000f24:	f001 fb02 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000f3a:	230a      	movs	r3, #10
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	4619      	mov	r1, r3
 8000f44:	4810      	ldr	r0, [pc, #64]	; (8000f88 <MX_GPIO_Init+0x1f4>)
 8000f46:	f001 faf1 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4806      	ldr	r0, [pc, #24]	; (8000f7c <MX_GPIO_Init+0x1e8>)
 8000f62:	f001 fae3 	bl	800252c <HAL_GPIO_Init>

}
 8000f66:	bf00      	nop
 8000f68:	3730      	adds	r7, #48	; 0x30
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	58024400 	.word	0x58024400
 8000f74:	58020400 	.word	0x58020400
 8000f78:	58020c00 	.word	0x58020c00
 8000f7c:	58021000 	.word	0x58021000
 8000f80:	58020800 	.word	0x58020800
 8000f84:	58021800 	.word	0x58021800
 8000f88:	58020000 	.word	0x58020000

08000f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
}
 8000f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <Error_Handler+0x8>
	...

08000f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_MspInit+0x30>)
 8000fa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fa4:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <HAL_MspInit+0x30>)
 8000fa6:	f043 0302 	orr.w	r3, r3, #2
 8000faa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_MspInit+0x30>)
 8000fb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	58024400 	.word	0x58024400

08000fcc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <HAL_CRC_MspInit+0x3c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d10e      	bne.n	8000ffc <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <HAL_CRC_MspInit+0x40>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe4:	4a09      	ldr	r2, [pc, #36]	; (800100c <HAL_CRC_MspInit+0x40>)
 8000fe6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <HAL_CRC_MspInit+0x40>)
 8000ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	58024c00 	.word	0x58024c00
 800100c:	58024400 	.word	0x58024400

08001010 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08e      	sub	sp, #56	; 0x38
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a59      	ldr	r2, [pc, #356]	; (8001194 <HAL_ETH_MspInit+0x184>)
 800102e:	4293      	cmp	r3, r2
 8001030:	f040 80ab 	bne.w	800118a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001034:	4b58      	ldr	r3, [pc, #352]	; (8001198 <HAL_ETH_MspInit+0x188>)
 8001036:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800103a:	4a57      	ldr	r2, [pc, #348]	; (8001198 <HAL_ETH_MspInit+0x188>)
 800103c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001040:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001044:	4b54      	ldr	r3, [pc, #336]	; (8001198 <HAL_ETH_MspInit+0x188>)
 8001046:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800104a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800104e:	623b      	str	r3, [r7, #32]
 8001050:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001052:	4b51      	ldr	r3, [pc, #324]	; (8001198 <HAL_ETH_MspInit+0x188>)
 8001054:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001058:	4a4f      	ldr	r2, [pc, #316]	; (8001198 <HAL_ETH_MspInit+0x188>)
 800105a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800105e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001062:	4b4d      	ldr	r3, [pc, #308]	; (8001198 <HAL_ETH_MspInit+0x188>)
 8001064:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106c:	61fb      	str	r3, [r7, #28]
 800106e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001070:	4b49      	ldr	r3, [pc, #292]	; (8001198 <HAL_ETH_MspInit+0x188>)
 8001072:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001076:	4a48      	ldr	r2, [pc, #288]	; (8001198 <HAL_ETH_MspInit+0x188>)
 8001078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800107c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001080:	4b45      	ldr	r3, [pc, #276]	; (8001198 <HAL_ETH_MspInit+0x188>)
 8001082:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	61bb      	str	r3, [r7, #24]
 800108c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800108e:	4b42      	ldr	r3, [pc, #264]	; (8001198 <HAL_ETH_MspInit+0x188>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001094:	4a40      	ldr	r2, [pc, #256]	; (8001198 <HAL_ETH_MspInit+0x188>)
 8001096:	f043 0304 	orr.w	r3, r3, #4
 800109a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800109e:	4b3e      	ldr	r3, [pc, #248]	; (8001198 <HAL_ETH_MspInit+0x188>)
 80010a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ac:	4b3a      	ldr	r3, [pc, #232]	; (8001198 <HAL_ETH_MspInit+0x188>)
 80010ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b2:	4a39      	ldr	r2, [pc, #228]	; (8001198 <HAL_ETH_MspInit+0x188>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010bc:	4b36      	ldr	r3, [pc, #216]	; (8001198 <HAL_ETH_MspInit+0x188>)
 80010be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	4b33      	ldr	r3, [pc, #204]	; (8001198 <HAL_ETH_MspInit+0x188>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d0:	4a31      	ldr	r2, [pc, #196]	; (8001198 <HAL_ETH_MspInit+0x188>)
 80010d2:	f043 0302 	orr.w	r3, r3, #2
 80010d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010da:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <HAL_ETH_MspInit+0x188>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010e8:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <HAL_ETH_MspInit+0x188>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ee:	4a2a      	ldr	r2, [pc, #168]	; (8001198 <HAL_ETH_MspInit+0x188>)
 80010f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <HAL_ETH_MspInit+0x188>)
 80010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001106:	2332      	movs	r3, #50	; 0x32
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001116:	230b      	movs	r3, #11
 8001118:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111e:	4619      	mov	r1, r3
 8001120:	481e      	ldr	r0, [pc, #120]	; (800119c <HAL_ETH_MspInit+0x18c>)
 8001122:	f001 fa03 	bl	800252c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001126:	2386      	movs	r3, #134	; 0x86
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001136:	230b      	movs	r3, #11
 8001138:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113e:	4619      	mov	r1, r3
 8001140:	4817      	ldr	r0, [pc, #92]	; (80011a0 <HAL_ETH_MspInit+0x190>)
 8001142:	f001 f9f3 	bl	800252c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001146:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001158:	230b      	movs	r3, #11
 800115a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001160:	4619      	mov	r1, r3
 8001162:	4810      	ldr	r0, [pc, #64]	; (80011a4 <HAL_ETH_MspInit+0x194>)
 8001164:	f001 f9e2 	bl	800252c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001168:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800117a:	230b      	movs	r3, #11
 800117c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800117e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001182:	4619      	mov	r1, r3
 8001184:	4808      	ldr	r0, [pc, #32]	; (80011a8 <HAL_ETH_MspInit+0x198>)
 8001186:	f001 f9d1 	bl	800252c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800118a:	bf00      	nop
 800118c:	3738      	adds	r7, #56	; 0x38
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40028000 	.word	0x40028000
 8001198:	58024400 	.word	0x58024400
 800119c:	58020800 	.word	0x58020800
 80011a0:	58020000 	.word	0x58020000
 80011a4:	58020400 	.word	0x58020400
 80011a8:	58021800 	.word	0x58021800

080011ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b0b6      	sub	sp, #216	; 0xd8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	22b4      	movs	r2, #180	; 0xb4
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f004 ffa5 	bl	800611c <memset>
  if(huart->Instance==USART3)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a25      	ldr	r2, [pc, #148]	; (800126c <HAL_UART_MspInit+0xc0>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d142      	bne.n	8001262 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011dc:	2302      	movs	r3, #2
 80011de:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e6:	f107 0310 	add.w	r3, r7, #16
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 fad4 	bl	8003798 <HAL_RCCEx_PeriphCLKConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011f6:	f7ff fec9 	bl	8000f8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011fa:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <HAL_UART_MspInit+0xc4>)
 80011fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001200:	4a1b      	ldr	r2, [pc, #108]	; (8001270 <HAL_UART_MspInit+0xc4>)
 8001202:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001206:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <HAL_UART_MspInit+0xc4>)
 800120c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001210:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <HAL_UART_MspInit+0xc4>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121e:	4a14      	ldr	r2, [pc, #80]	; (8001270 <HAL_UART_MspInit+0xc4>)
 8001220:	f043 0308 	orr.w	r3, r3, #8
 8001224:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <HAL_UART_MspInit+0xc4>)
 800122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001236:	f44f 7340 	mov.w	r3, #768	; 0x300
 800123a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001250:	2307      	movs	r3, #7
 8001252:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001256:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800125a:	4619      	mov	r1, r3
 800125c:	4805      	ldr	r0, [pc, #20]	; (8001274 <HAL_UART_MspInit+0xc8>)
 800125e:	f001 f965 	bl	800252c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001262:	bf00      	nop
 8001264:	37d8      	adds	r7, #216	; 0xd8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40004800 	.word	0x40004800
 8001270:	58024400 	.word	0x58024400
 8001274:	58020c00 	.word	0x58020c00

08001278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800127c:	e7fe      	b.n	800127c <NMI_Handler+0x4>

0800127e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <HardFault_Handler+0x4>

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <MemManage_Handler+0x4>

0800128a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <BusFault_Handler+0x4>

08001290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <UsageFault_Handler+0x4>

08001296 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c4:	f000 f916 	bl	80014f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012d0:	4b32      	ldr	r3, [pc, #200]	; (800139c <SystemInit+0xd0>)
 80012d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012d6:	4a31      	ldr	r2, [pc, #196]	; (800139c <SystemInit+0xd0>)
 80012d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012e0:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <SystemInit+0xd4>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 030f 	and.w	r3, r3, #15
 80012e8:	2b06      	cmp	r3, #6
 80012ea:	d807      	bhi.n	80012fc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012ec:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <SystemInit+0xd4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f023 030f 	bic.w	r3, r3, #15
 80012f4:	4a2a      	ldr	r2, [pc, #168]	; (80013a0 <SystemInit+0xd4>)
 80012f6:	f043 0307 	orr.w	r3, r3, #7
 80012fa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012fc:	4b29      	ldr	r3, [pc, #164]	; (80013a4 <SystemInit+0xd8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a28      	ldr	r2, [pc, #160]	; (80013a4 <SystemInit+0xd8>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001308:	4b26      	ldr	r3, [pc, #152]	; (80013a4 <SystemInit+0xd8>)
 800130a:	2200      	movs	r2, #0
 800130c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800130e:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <SystemInit+0xd8>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4924      	ldr	r1, [pc, #144]	; (80013a4 <SystemInit+0xd8>)
 8001314:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <SystemInit+0xdc>)
 8001316:	4013      	ands	r3, r2
 8001318:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800131a:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <SystemInit+0xd4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	2b00      	cmp	r3, #0
 8001324:	d007      	beq.n	8001336 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001326:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <SystemInit+0xd4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 030f 	bic.w	r3, r3, #15
 800132e:	4a1c      	ldr	r2, [pc, #112]	; (80013a0 <SystemInit+0xd4>)
 8001330:	f043 0307 	orr.w	r3, r3, #7
 8001334:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001336:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <SystemInit+0xd8>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800133c:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <SystemInit+0xd8>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <SystemInit+0xd8>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001348:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <SystemInit+0xd8>)
 800134a:	4a18      	ldr	r2, [pc, #96]	; (80013ac <SystemInit+0xe0>)
 800134c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <SystemInit+0xd8>)
 8001350:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <SystemInit+0xe4>)
 8001352:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <SystemInit+0xd8>)
 8001356:	4a17      	ldr	r2, [pc, #92]	; (80013b4 <SystemInit+0xe8>)
 8001358:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <SystemInit+0xd8>)
 800135c:	2200      	movs	r2, #0
 800135e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <SystemInit+0xd8>)
 8001362:	4a14      	ldr	r2, [pc, #80]	; (80013b4 <SystemInit+0xe8>)
 8001364:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <SystemInit+0xd8>)
 8001368:	2200      	movs	r2, #0
 800136a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <SystemInit+0xd8>)
 800136e:	4a11      	ldr	r2, [pc, #68]	; (80013b4 <SystemInit+0xe8>)
 8001370:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <SystemInit+0xd8>)
 8001374:	2200      	movs	r2, #0
 8001376:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <SystemInit+0xd8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <SystemInit+0xd8>)
 800137e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001382:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <SystemInit+0xd8>)
 8001386:	2200      	movs	r2, #0
 8001388:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <SystemInit+0xec>)
 800138c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001390:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000ed00 	.word	0xe000ed00
 80013a0:	52002000 	.word	0x52002000
 80013a4:	58024400 	.word	0x58024400
 80013a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80013ac:	02020200 	.word	0x02020200
 80013b0:	01ff0000 	.word	0x01ff0000
 80013b4:	01010280 	.word	0x01010280
 80013b8:	52004000 	.word	0x52004000

080013bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013c0:	f7ff ff84 	bl	80012cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c4:	480c      	ldr	r0, [pc, #48]	; (80013f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013c6:	490d      	ldr	r1, [pc, #52]	; (80013fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013c8:	4a0d      	ldr	r2, [pc, #52]	; (8001400 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013cc:	e002      	b.n	80013d4 <LoopCopyDataInit>

080013ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d2:	3304      	adds	r3, #4

080013d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d8:	d3f9      	bcc.n	80013ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013dc:	4c0a      	ldr	r4, [pc, #40]	; (8001408 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e0:	e001      	b.n	80013e6 <LoopFillZerobss>

080013e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e4:	3204      	adds	r2, #4

080013e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e8:	d3fb      	bcc.n	80013e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ea:	f004 fe65 	bl	80060b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ee:	f7ff faf3 	bl	80009d8 <main>
  bx  lr
 80013f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013f4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80013f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013fc:	24000158 	.word	0x24000158
  ldr r2, =_sidata
 8001400:	08006840 	.word	0x08006840
  ldr r2, =_sbss
 8001404:	24000218 	.word	0x24000218
  ldr r4, =_ebss
 8001408:	24000460 	.word	0x24000460

0800140c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC3_IRQHandler>
	...

08001410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001416:	2003      	movs	r0, #3
 8001418:	f000 f976 	bl	8001708 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800141c:	f001 ffe6 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 8001420:	4602      	mov	r2, r0
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_Init+0x68>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	0a1b      	lsrs	r3, r3, #8
 8001428:	f003 030f 	and.w	r3, r3, #15
 800142c:	4913      	ldr	r1, [pc, #76]	; (800147c <HAL_Init+0x6c>)
 800142e:	5ccb      	ldrb	r3, [r1, r3]
 8001430:	f003 031f 	and.w	r3, r3, #31
 8001434:	fa22 f303 	lsr.w	r3, r2, r3
 8001438:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <HAL_Init+0x68>)
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	4a0e      	ldr	r2, [pc, #56]	; (800147c <HAL_Init+0x6c>)
 8001444:	5cd3      	ldrb	r3, [r2, r3]
 8001446:	f003 031f 	and.w	r3, r3, #31
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	fa22 f303 	lsr.w	r3, r2, r3
 8001450:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <HAL_Init+0x70>)
 8001452:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001454:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <HAL_Init+0x74>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800145a:	2000      	movs	r0, #0
 800145c:	f000 f814 	bl	8001488 <HAL_InitTick>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e002      	b.n	8001470 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800146a:	f7ff fd95 	bl	8000f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	58024400 	.word	0x58024400
 800147c:	080067f8 	.word	0x080067f8
 8001480:	2400014c 	.word	0x2400014c
 8001484:	24000148 	.word	0x24000148

08001488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_InitTick+0x60>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e021      	b.n	80014e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <HAL_InitTick+0x64>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <HAL_InitTick+0x60>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4619      	mov	r1, r3
 80014a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f94d 	bl	8001752 <HAL_SYSTICK_Config>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e00e      	b.n	80014e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b0f      	cmp	r3, #15
 80014c6:	d80a      	bhi.n	80014de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c8:	2200      	movs	r2, #0
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f000 f925 	bl	800171e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d4:	4a06      	ldr	r2, [pc, #24]	; (80014f0 <HAL_InitTick+0x68>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	e000      	b.n	80014e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	24000154 	.word	0x24000154
 80014ec:	24000148 	.word	0x24000148
 80014f0:	24000150 	.word	0x24000150

080014f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x20>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_IncTick+0x24>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <HAL_IncTick+0x24>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	24000154 	.word	0x24000154
 8001518:	24000440 	.word	0x24000440

0800151c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <HAL_GetTick+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	24000440 	.word	0x24000440

08001534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800153c:	f7ff ffee 	bl	800151c <HAL_GetTick>
 8001540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154c:	d005      	beq.n	800155a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_Delay+0x44>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800155a:	bf00      	nop
 800155c:	f7ff ffde 	bl	800151c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	429a      	cmp	r2, r3
 800156a:	d8f7      	bhi.n	800155c <HAL_Delay+0x28>
  {
  }
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	24000154 	.word	0x24000154

0800157c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800158c:	4904      	ldr	r1, [pc, #16]	; (80015a0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	58000400 	.word	0x58000400

080015a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <__NVIC_SetPriorityGrouping+0x40>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c0:	4013      	ands	r3, r2
 80015c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <__NVIC_SetPriorityGrouping+0x44>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d2:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <__NVIC_SetPriorityGrouping+0x40>)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	60d3      	str	r3, [r2, #12]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00
 80015e8:	05fa0000 	.word	0x05fa0000

080015ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <__NVIC_GetPriorityGrouping+0x18>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	0a1b      	lsrs	r3, r3, #8
 80015f6:	f003 0307 	and.w	r3, r3, #7
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	6039      	str	r1, [r7, #0]
 8001612:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001614:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001618:	2b00      	cmp	r3, #0
 800161a:	db0a      	blt.n	8001632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	b2da      	uxtb	r2, r3
 8001620:	490c      	ldr	r1, [pc, #48]	; (8001654 <__NVIC_SetPriority+0x4c>)
 8001622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001626:	0112      	lsls	r2, r2, #4
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	440b      	add	r3, r1
 800162c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001630:	e00a      	b.n	8001648 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4908      	ldr	r1, [pc, #32]	; (8001658 <__NVIC_SetPriority+0x50>)
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	3b04      	subs	r3, #4
 8001640:	0112      	lsls	r2, r2, #4
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	440b      	add	r3, r1
 8001646:	761a      	strb	r2, [r3, #24]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000e100 	.word	0xe000e100
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800165c:	b480      	push	{r7}
 800165e:	b089      	sub	sp, #36	; 0x24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f1c3 0307 	rsb	r3, r3, #7
 8001676:	2b04      	cmp	r3, #4
 8001678:	bf28      	it	cs
 800167a:	2304      	movcs	r3, #4
 800167c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3304      	adds	r3, #4
 8001682:	2b06      	cmp	r3, #6
 8001684:	d902      	bls.n	800168c <NVIC_EncodePriority+0x30>
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3b03      	subs	r3, #3
 800168a:	e000      	b.n	800168e <NVIC_EncodePriority+0x32>
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	f04f 32ff 	mov.w	r2, #4294967295
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43da      	mvns	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	401a      	ands	r2, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a4:	f04f 31ff 	mov.w	r1, #4294967295
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa01 f303 	lsl.w	r3, r1, r3
 80016ae:	43d9      	mvns	r1, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	4313      	orrs	r3, r2
         );
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3724      	adds	r7, #36	; 0x24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d4:	d301      	bcc.n	80016da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00f      	b.n	80016fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <SysTick_Config+0x40>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3b01      	subs	r3, #1
 80016e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e2:	210f      	movs	r1, #15
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f7ff ff8e 	bl	8001608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <SysTick_Config+0x40>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f2:	4b04      	ldr	r3, [pc, #16]	; (8001704 <SysTick_Config+0x40>)
 80016f4:	2207      	movs	r2, #7
 80016f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	e000e010 	.word	0xe000e010

08001708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ff47 	bl	80015a4 <__NVIC_SetPriorityGrouping>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b086      	sub	sp, #24
 8001722:	af00      	add	r7, sp, #0
 8001724:	4603      	mov	r3, r0
 8001726:	60b9      	str	r1, [r7, #8]
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800172c:	f7ff ff5e 	bl	80015ec <__NVIC_GetPriorityGrouping>
 8001730:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	68b9      	ldr	r1, [r7, #8]
 8001736:	6978      	ldr	r0, [r7, #20]
 8001738:	f7ff ff90 	bl	800165c <NVIC_EncodePriority>
 800173c:	4602      	mov	r2, r0
 800173e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff5f 	bl	8001608 <__NVIC_SetPriority>
}
 800174a:	bf00      	nop
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ffb2 	bl	80016c4 <SysTick_Config>
 8001760:	4603      	mov	r3, r0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e054      	b.n	8001828 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	7f5b      	ldrb	r3, [r3, #29]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d105      	bne.n	8001794 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fc1c 	bl	8000fcc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2202      	movs	r2, #2
 8001798:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	791b      	ldrb	r3, [r3, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10c      	bne.n	80017bc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a22      	ldr	r2, [pc, #136]	; (8001830 <HAL_CRC_Init+0xc4>)
 80017a8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0218 	bic.w	r2, r2, #24
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	e00c      	b.n	80017d6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6899      	ldr	r1, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	461a      	mov	r2, r3
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f834 	bl	8001834 <HAL_CRCEx_Polynomial_Set>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e028      	b.n	8001828 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	795b      	ldrb	r3, [r3, #5]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d105      	bne.n	80017ea <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f04f 32ff 	mov.w	r2, #4294967295
 80017e6:	611a      	str	r2, [r3, #16]
 80017e8:	e004      	b.n	80017f4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6912      	ldr	r2, [r2, #16]
 80017f2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695a      	ldr	r2, [r3, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	699a      	ldr	r2, [r3, #24]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	04c11db7 	.word	0x04c11db7

08001834 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001834:	b480      	push	{r7}
 8001836:	b087      	sub	sp, #28
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001844:	231f      	movs	r3, #31
 8001846:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001848:	bf00      	nop
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1e5a      	subs	r2, r3, #1
 800184e:	613a      	str	r2, [r7, #16]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d009      	beq.n	8001868 <HAL_CRCEx_Polynomial_Set+0x34>
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	f003 031f 	and.w	r3, r3, #31
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	fa22 f303 	lsr.w	r3, r2, r3
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b18      	cmp	r3, #24
 800186c:	d846      	bhi.n	80018fc <HAL_CRCEx_Polynomial_Set+0xc8>
 800186e:	a201      	add	r2, pc, #4	; (adr r2, 8001874 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001874:	08001903 	.word	0x08001903
 8001878:	080018fd 	.word	0x080018fd
 800187c:	080018fd 	.word	0x080018fd
 8001880:	080018fd 	.word	0x080018fd
 8001884:	080018fd 	.word	0x080018fd
 8001888:	080018fd 	.word	0x080018fd
 800188c:	080018fd 	.word	0x080018fd
 8001890:	080018fd 	.word	0x080018fd
 8001894:	080018f1 	.word	0x080018f1
 8001898:	080018fd 	.word	0x080018fd
 800189c:	080018fd 	.word	0x080018fd
 80018a0:	080018fd 	.word	0x080018fd
 80018a4:	080018fd 	.word	0x080018fd
 80018a8:	080018fd 	.word	0x080018fd
 80018ac:	080018fd 	.word	0x080018fd
 80018b0:	080018fd 	.word	0x080018fd
 80018b4:	080018e5 	.word	0x080018e5
 80018b8:	080018fd 	.word	0x080018fd
 80018bc:	080018fd 	.word	0x080018fd
 80018c0:	080018fd 	.word	0x080018fd
 80018c4:	080018fd 	.word	0x080018fd
 80018c8:	080018fd 	.word	0x080018fd
 80018cc:	080018fd 	.word	0x080018fd
 80018d0:	080018fd 	.word	0x080018fd
 80018d4:	080018d9 	.word	0x080018d9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d913      	bls.n	8001906 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80018e2:	e010      	b.n	8001906 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	2b07      	cmp	r3, #7
 80018e8:	d90f      	bls.n	800190a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80018ee:	e00c      	b.n	800190a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	2b0f      	cmp	r3, #15
 80018f4:	d90b      	bls.n	800190e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80018fa:	e008      	b.n	800190e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	75fb      	strb	r3, [r7, #23]
      break;
 8001900:	e006      	b.n	8001910 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001902:	bf00      	nop
 8001904:	e004      	b.n	8001910 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001906:	bf00      	nop
 8001908:	e002      	b.n	8001910 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800190a:	bf00      	nop
 800190c:	e000      	b.n	8001910 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800190e:	bf00      	nop
  }
  if (status == HAL_OK)
 8001910:	7dfb      	ldrb	r3, [r7, #23]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10d      	bne.n	8001932 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f023 0118 	bic.w	r1, r3, #24
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	430a      	orrs	r2, r1
 8001930:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001932:	7dfb      	ldrb	r3, [r7, #23]
}
 8001934:	4618      	mov	r0, r3
 8001936:	371c      	adds	r7, #28
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e0cf      	b.n	8001af2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001958:	2b00      	cmp	r3, #0
 800195a:	d106      	bne.n	800196a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2223      	movs	r2, #35	; 0x23
 8001960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff fb53 	bl	8001010 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196a:	4b64      	ldr	r3, [pc, #400]	; (8001afc <HAL_ETH_Init+0x1bc>)
 800196c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001970:	4a62      	ldr	r2, [pc, #392]	; (8001afc <HAL_ETH_Init+0x1bc>)
 8001972:	f043 0302 	orr.w	r3, r3, #2
 8001976:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800197a:	4b60      	ldr	r3, [pc, #384]	; (8001afc <HAL_ETH_Init+0x1bc>)
 800197c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	7a1b      	ldrb	r3, [r3, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d103      	bne.n	8001998 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001990:	2000      	movs	r0, #0
 8001992:	f7ff fdf3 	bl	800157c <HAL_SYSCFG_ETHInterfaceSelect>
 8001996:	e003      	b.n	80019a0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001998:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800199c:	f7ff fdee 	bl	800157c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80019a0:	4b57      	ldr	r3, [pc, #348]	; (8001b00 <HAL_ETH_Init+0x1c0>)
 80019a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6812      	ldr	r2, [r2, #0]
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019bc:	f7ff fdae 	bl	800151c <HAL_GetTick>
 80019c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80019c2:	e011      	b.n	80019e8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80019c4:	f7ff fdaa 	bl	800151c <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80019d2:	d909      	bls.n	80019e8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2204      	movs	r2, #4
 80019d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	22e0      	movs	r2, #224	; 0xe0
 80019e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e084      	b.n	8001af2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1e4      	bne.n	80019c4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f886 	bl	8001b0c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001a00:	f001 fe6e 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 8001a04:	4603      	mov	r3, r0
 8001a06:	4a3f      	ldr	r2, [pc, #252]	; (8001b04 <HAL_ETH_Init+0x1c4>)
 8001a08:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0c:	0c9a      	lsrs	r2, r3, #18
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	3a01      	subs	r2, #1
 8001a14:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 fa71 	bl	8001f00 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a26:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001a2a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a3a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d009      	beq.n	8001a5e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	22e0      	movs	r2, #224	; 0xe0
 8001a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e049      	b.n	8001af2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a66:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001a6a:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <HAL_ETH_Init+0x1c8>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6952      	ldr	r2, [r2, #20]
 8001a72:	0051      	lsls	r1, r2, #1
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a7e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 fad9 	bl	800203a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 fb1f 	bl	80020cc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	3305      	adds	r3, #5
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	021a      	lsls	r2, r3, #8
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	3303      	adds	r3, #3
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	061a      	lsls	r2, r3, #24
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	3302      	adds	r3, #2
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	041b      	lsls	r3, r3, #16
 8001ac0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001acc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001ada:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001adc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2210      	movs	r2, #16
 8001aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	58024400 	.word	0x58024400
 8001b00:	58000400 	.word	0x58000400
 8001b04:	431bde83 	.word	0x431bde83
 8001b08:	ffff8001 	.word	0xffff8001

08001b0c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b24:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001b26:	f001 fddb 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 8001b2a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ba8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d908      	bls.n	8001b46 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	4a1d      	ldr	r2, [pc, #116]	; (8001bac <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d804      	bhi.n	8001b46 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	e027      	b.n	8001b96 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	4a18      	ldr	r2, [pc, #96]	; (8001bac <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d908      	bls.n	8001b60 <HAL_ETH_SetMDIOClockRange+0x54>
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	4a17      	ldr	r2, [pc, #92]	; (8001bb0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d204      	bcs.n	8001b60 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	e01a      	b.n	8001b96 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	4a13      	ldr	r2, [pc, #76]	; (8001bb0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d303      	bcc.n	8001b70 <HAL_ETH_SetMDIOClockRange+0x64>
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d911      	bls.n	8001b94 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4a10      	ldr	r2, [pc, #64]	; (8001bb4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d908      	bls.n	8001b8a <HAL_ETH_SetMDIOClockRange+0x7e>
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	4a0f      	ldr	r2, [pc, #60]	; (8001bb8 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d804      	bhi.n	8001b8a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	e005      	b.n	8001b96 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	e000      	b.n	8001b96 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001b94:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001ba0:	bf00      	nop
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	01312cff 	.word	0x01312cff
 8001bac:	02160ebf 	.word	0x02160ebf
 8001bb0:	03938700 	.word	0x03938700
 8001bb4:	05f5e0ff 	.word	0x05f5e0ff
 8001bb8:	08f0d17f 	.word	0x08f0d17f

08001bbc <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001bce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	791b      	ldrb	r3, [r3, #4]
 8001bd4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001bd6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	7b1b      	ldrb	r3, [r3, #12]
 8001bdc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001bde:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	7b5b      	ldrb	r3, [r3, #13]
 8001be4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001be6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	7b9b      	ldrb	r3, [r3, #14]
 8001bec:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001bee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	7bdb      	ldrb	r3, [r3, #15]
 8001bf4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001bf6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	7c12      	ldrb	r2, [r2, #16]
 8001bfc:	2a00      	cmp	r2, #0
 8001bfe:	d102      	bne.n	8001c06 <ETH_SetMACConfig+0x4a>
 8001c00:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c04:	e000      	b.n	8001c08 <ETH_SetMACConfig+0x4c>
 8001c06:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001c08:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	7c52      	ldrb	r2, [r2, #17]
 8001c0e:	2a00      	cmp	r2, #0
 8001c10:	d102      	bne.n	8001c18 <ETH_SetMACConfig+0x5c>
 8001c12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c16:	e000      	b.n	8001c1a <ETH_SetMACConfig+0x5e>
 8001c18:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001c1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	7c9b      	ldrb	r3, [r3, #18]
 8001c20:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001c22:	431a      	orrs	r2, r3
               macconf->Speed |
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001c28:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001c2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	7f1b      	ldrb	r3, [r3, #28]
 8001c34:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001c36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	7f5b      	ldrb	r3, [r3, #29]
 8001c3c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001c3e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	7f92      	ldrb	r2, [r2, #30]
 8001c44:	2a00      	cmp	r2, #0
 8001c46:	d102      	bne.n	8001c4e <ETH_SetMACConfig+0x92>
 8001c48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c4c:	e000      	b.n	8001c50 <ETH_SetMACConfig+0x94>
 8001c4e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001c50:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	7fdb      	ldrb	r3, [r3, #31]
 8001c56:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001c58:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001c60:	2a00      	cmp	r2, #0
 8001c62:	d102      	bne.n	8001c6a <ETH_SetMACConfig+0xae>
 8001c64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c68:	e000      	b.n	8001c6c <ETH_SetMACConfig+0xb0>
 8001c6a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001c6c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001c72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c7a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001c7c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001c82:	4313      	orrs	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b56      	ldr	r3, [pc, #344]	; (8001de8 <ETH_SetMACConfig+0x22c>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	68f9      	ldr	r1, [r7, #12]
 8001c96:	430b      	orrs	r3, r1
 8001c98:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ca6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001ca8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cb0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001cb2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001cba:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001cbc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001cc4:	2a00      	cmp	r2, #0
 8001cc6:	d102      	bne.n	8001cce <ETH_SetMACConfig+0x112>
 8001cc8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ccc:	e000      	b.n	8001cd0 <ETH_SetMACConfig+0x114>
 8001cce:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001cd0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	4b42      	ldr	r3, [pc, #264]	; (8001dec <ETH_SetMACConfig+0x230>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	68f9      	ldr	r1, [r7, #12]
 8001cea:	430b      	orrs	r3, r1
 8001cec:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cf4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	4b3a      	ldr	r3, [pc, #232]	; (8001df0 <ETH_SetMACConfig+0x234>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	68f9      	ldr	r1, [r7, #12]
 8001d0e:	430b      	orrs	r3, r1
 8001d10:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d18:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d1e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001d26:	2a00      	cmp	r2, #0
 8001d28:	d101      	bne.n	8001d2e <ETH_SetMACConfig+0x172>
 8001d2a:	2280      	movs	r2, #128	; 0x80
 8001d2c:	e000      	b.n	8001d30 <ETH_SetMACConfig+0x174>
 8001d2e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001d30:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d36:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d42:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001d46:	4013      	ands	r3, r2
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	68f9      	ldr	r1, [r7, #12]
 8001d4e:	430b      	orrs	r3, r1
 8001d50:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001d58:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001d60:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6e:	f023 0103 	bic.w	r1, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001d86:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001da2:	2a00      	cmp	r2, #0
 8001da4:	d101      	bne.n	8001daa <ETH_SetMACConfig+0x1ee>
 8001da6:	2240      	movs	r2, #64	; 0x40
 8001da8:	e000      	b.n	8001dac <ETH_SetMACConfig+0x1f0>
 8001daa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001dac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001db4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001db6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001dbe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001dcc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	00048083 	.word	0x00048083
 8001dec:	c0f88000 	.word	0xc0f88000
 8001df0:	fffffef0 	.word	0xfffffef0

08001df4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b38      	ldr	r3, [pc, #224]	; (8001eec <ETH_SetDMAConfig+0xf8>)
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	6811      	ldr	r1, [r2, #0]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	430b      	orrs	r3, r1
 8001e16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e1a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	791b      	ldrb	r3, [r3, #4]
 8001e20:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e26:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	7b1b      	ldrb	r3, [r3, #12]
 8001e2c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <ETH_SetDMAConfig+0xfc>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	68f9      	ldr	r1, [r7, #12]
 8001e46:	430b      	orrs	r3, r1
 8001e48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e4c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	7b5b      	ldrb	r3, [r3, #13]
 8001e52:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e64:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001e68:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <ETH_SetDMAConfig+0x100>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	68f9      	ldr	r1, [r7, #12]
 8001e72:	430b      	orrs	r3, r1
 8001e74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e78:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	7d1b      	ldrb	r3, [r3, #20]
 8001e84:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e86:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	7f5b      	ldrb	r3, [r3, #29]
 8001e8c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e9a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001e9e:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <ETH_SetDMAConfig+0x104>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	68f9      	ldr	r1, [r7, #12]
 8001ea8:	430b      	orrs	r3, r1
 8001eaa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001eae:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	7f1b      	ldrb	r3, [r3, #28]
 8001eb6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ec8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <ETH_SetDMAConfig+0x108>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	68f9      	ldr	r1, [r7, #12]
 8001ed6:	430b      	orrs	r3, r1
 8001ed8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001edc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	ffff87fd 	.word	0xffff87fd
 8001ef0:	ffff2ffe 	.word	0xffff2ffe
 8001ef4:	fffec000 	.word	0xfffec000
 8001ef8:	ffc0efef 	.word	0xffc0efef
 8001efc:	7fc0ffff 	.word	0x7fc0ffff

08001f00 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b0a4      	sub	sp, #144	; 0x90
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001f24:	2301      	movs	r3, #1
 8001f26:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001f36:	2301      	movs	r3, #1
 8001f38:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f40:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001f58:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001f5c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001f64:	2300      	movs	r3, #0
 8001f66:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001f82:	2300      	movs	r3, #0
 8001f84:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f92:	2301      	movs	r3, #1
 8001f94:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001f98:	2320      	movs	r3, #32
 8001f9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001faa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001fb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fb4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001fe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fe8:	4619      	mov	r1, r3
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff fde6 	bl	8001bbc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002006:	2300      	movs	r3, #0
 8002008:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800200a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800200e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002010:	2300      	movs	r3, #0
 8002012:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002014:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002018:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002020:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002024:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002026:	f107 0308 	add.w	r3, r7, #8
 800202a:	4619      	mov	r1, r3
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff fee1 	bl	8001df4 <ETH_SetDMAConfig>
}
 8002032:	bf00      	nop
 8002034:	3790      	adds	r7, #144	; 0x90
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800203a:	b480      	push	{r7}
 800203c:	b085      	sub	sp, #20
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	e01d      	b.n	8002084 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68d9      	ldr	r1, [r3, #12]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4613      	mov	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4413      	add	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	440b      	add	r3, r1
 8002058:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2200      	movs	r2, #0
 8002064:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2200      	movs	r2, #0
 8002070:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	3206      	adds	r2, #6
 800207a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	3301      	adds	r3, #1
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b03      	cmp	r3, #3
 8002088:	d9de      	bls.n	8002048 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002098:	461a      	mov	r2, r3
 800209a:	2303      	movs	r3, #3
 800209c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ac:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020bc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	e023      	b.n	8002122 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6919      	ldr	r1, [r3, #16]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	4613      	mov	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	4413      	add	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	440b      	add	r3, r1
 80020ea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2200      	movs	r2, #0
 80020f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2200      	movs	r2, #0
 8002102:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2200      	movs	r2, #0
 8002108:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	2200      	movs	r2, #0
 800210e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	3212      	adds	r2, #18
 8002118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	3301      	adds	r3, #1
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2b03      	cmp	r3, #3
 8002126:	d9d8      	bls.n	80020da <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800214e:	461a      	mov	r2, r3
 8002150:	2303      	movs	r3, #3
 8002152:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691a      	ldr	r2, [r3, #16]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002162:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002176:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	; 0x28
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800219c:	2308      	movs	r3, #8
 800219e:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80021a0:	4b2e      	ldr	r3, [pc, #184]	; (800225c <HAL_FLASH_Program+0xd4>)
 80021a2:	7d1b      	ldrb	r3, [r3, #20]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_FLASH_Program+0x24>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e053      	b.n	8002254 <HAL_FLASH_Program+0xcc>
 80021ac:	4b2b      	ldr	r3, [pc, #172]	; (800225c <HAL_FLASH_Program+0xd4>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021b8:	d315      	bcc.n	80021e6 <HAL_FLASH_Program+0x5e>
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 80021c0:	d211      	bcs.n	80021e6 <HAL_FLASH_Program+0x5e>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 80021c2:	2301      	movs	r3, #1
 80021c4:	617b      	str	r3, [r7, #20]
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80021c6:	4b25      	ldr	r3, [pc, #148]	; (800225c <HAL_FLASH_Program+0xd4>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80021cc:	6979      	ldr	r1, [r7, #20]
 80021ce:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021d2:	f000 f881 	bl	80022d8 <FLASH_WaitForLastOperation>
 80021d6:	4603      	mov	r3, r0
 80021d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 80021dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d002      	beq.n	80021ea <HAL_FLASH_Program+0x62>
 80021e4:	e031      	b.n	800224a <HAL_FLASH_Program+0xc2>
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e034      	b.n	8002254 <HAL_FLASH_Program+0xcc>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 80021ea:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <HAL_FLASH_Program+0xd8>)
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	4a1c      	ldr	r2, [pc, #112]	; (8002260 <HAL_FLASH_Program+0xd8>)
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	60d3      	str	r3, [r2, #12]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80021f6:	f3bf 8f6f 	isb	sy
}
 80021fa:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80021fc:	f3bf 8f4f 	dsb	sy
}
 8002200:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	3304      	adds	r3, #4
 800220e:	623b      	str	r3, [r7, #32]
        src_addr++;
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	3304      	adds	r3, #4
 8002214:	61fb      	str	r3, [r7, #28]
        row_index--;
 8002216:	7efb      	ldrb	r3, [r7, #27]
 8002218:	3b01      	subs	r3, #1
 800221a:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 800221c:	7efb      	ldrb	r3, [r7, #27]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1ef      	bne.n	8002202 <HAL_FLASH_Program+0x7a>
  __ASM volatile ("isb 0xF":::"memory");
 8002222:	f3bf 8f6f 	isb	sy
}
 8002226:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8002228:	f3bf 8f4f 	dsb	sy
}
 800222c:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800222e:	6979      	ldr	r1, [r7, #20]
 8002230:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002234:	f000 f850 	bl	80022d8 <FLASH_WaitForLastOperation>
 8002238:	4603      	mov	r3, r0
 800223a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800223e:	4b08      	ldr	r3, [pc, #32]	; (8002260 <HAL_FLASH_Program+0xd8>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	4a07      	ldr	r2, [pc, #28]	; (8002260 <HAL_FLASH_Program+0xd8>)
 8002244:	f023 0302 	bic.w	r3, r3, #2
 8002248:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800224a:	4b04      	ldr	r3, [pc, #16]	; (800225c <HAL_FLASH_Program+0xd4>)
 800224c:	2200      	movs	r2, #0
 800224e:	751a      	strb	r2, [r3, #20]

  return status;
 8002250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002254:	4618      	mov	r0, r3
 8002256:	3728      	adds	r7, #40	; 0x28
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	24000444 	.word	0x24000444
 8002260:	52002000 	.word	0x52002000

08002264 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <HAL_FLASH_Unlock+0x38>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00d      	beq.n	8002290 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_FLASH_Unlock+0x38>)
 8002276:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <HAL_FLASH_Unlock+0x3c>)
 8002278:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <HAL_FLASH_Unlock+0x38>)
 800227c:	4a09      	ldr	r2, [pc, #36]	; (80022a4 <HAL_FLASH_Unlock+0x40>)
 800227e:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_FLASH_Unlock+0x38>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	52002000 	.word	0x52002000
 80022a0:	45670123 	.word	0x45670123
 80022a4:	cdef89ab 	.word	0xcdef89ab

080022a8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_FLASH_Lock+0x2c>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4a08      	ldr	r2, [pc, #32]	; (80022d4 <HAL_FLASH_Lock+0x2c>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_FLASH_Lock+0x2c>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	52002000 	.word	0x52002000

080022d8 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 80022e2:	2304      	movs	r3, #4
 80022e4:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022ea:	f7ff f917 	bl	800151c <HAL_GetTick>
 80022ee:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80022f0:	e010      	b.n	8002314 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f8:	d00c      	beq.n	8002314 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022fa:	f7ff f90f 	bl	800151c <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	429a      	cmp	r2, r3
 8002308:	d302      	bcc.n	8002310 <FLASH_WaitForLastOperation+0x38>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e02d      	b.n	8002370 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8002314:	4b18      	ldr	r3, [pc, #96]	; (8002378 <FLASH_WaitForLastOperation+0xa0>)
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	429a      	cmp	r2, r3
 8002320:	d0e7      	beq.n	80022f2 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d104      	bne.n	8002332 <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8002328:	4b13      	ldr	r3, [pc, #76]	; (8002378 <FLASH_WaitForLastOperation+0xa0>)
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	4b13      	ldr	r3, [pc, #76]	; (800237c <FLASH_WaitForLastOperation+0xa4>)
 800232e:	4013      	ands	r3, r2
 8002330:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00a      	beq.n	8002352 <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800233c:	4b10      	ldr	r3, [pc, #64]	; (8002380 <FLASH_WaitForLastOperation+0xa8>)
 800233e:	699a      	ldr	r2, [r3, #24]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	4313      	orrs	r3, r2
 8002344:	4a0e      	ldr	r2, [pc, #56]	; (8002380 <FLASH_WaitForLastOperation+0xa8>)
 8002346:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8002348:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <FLASH_WaitForLastOperation+0xa0>)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e00e      	b.n	8002370 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d10a      	bne.n	800236e <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8002358:	4b07      	ldr	r3, [pc, #28]	; (8002378 <FLASH_WaitForLastOperation+0xa0>)
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002364:	d103      	bne.n	800236e <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8002366:	4b04      	ldr	r3, [pc, #16]	; (8002378 <FLASH_WaitForLastOperation+0xa0>)
 8002368:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800236c:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	52002000 	.word	0x52002000
 800237c:	17ee0000 	.word	0x17ee0000
 8002380:	24000444 	.word	0x24000444

08002384 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002392:	4b3f      	ldr	r3, [pc, #252]	; (8002490 <HAL_FLASHEx_Erase+0x10c>)
 8002394:	7d1b      	ldrb	r3, [r3, #20]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_FLASHEx_Erase+0x1a>
 800239a:	2302      	movs	r3, #2
 800239c:	e074      	b.n	8002488 <HAL_FLASHEx_Erase+0x104>
 800239e:	4b3c      	ldr	r3, [pc, #240]	; (8002490 <HAL_FLASHEx_Erase+0x10c>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80023a4:	4b3a      	ldr	r3, [pc, #232]	; (8002490 <HAL_FLASHEx_Erase+0x10c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d009      	beq.n	80023ca <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80023b6:	2101      	movs	r1, #1
 80023b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023bc:	f7ff ff8c 	bl	80022d8 <FLASH_WaitForLastOperation>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d157      	bne.n	8002480 <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d11e      	bne.n	8002416 <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	4619      	mov	r1, r3
 80023e2:	4610      	mov	r0, r2
 80023e4:	f000 f85a 	bl	800249c <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d045      	beq.n	8002480 <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80023f4:	2101      	movs	r1, #1
 80023f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023fa:	f7ff ff6d 	bl	80022d8 <FLASH_WaitForLastOperation>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 8002408:	4b22      	ldr	r3, [pc, #136]	; (8002494 <HAL_FLASHEx_Erase+0x110>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4a21      	ldr	r2, [pc, #132]	; (8002494 <HAL_FLASHEx_Erase+0x110>)
 800240e:	f023 0308 	bic.w	r3, r3, #8
 8002412:	60d3      	str	r3, [r2, #12]
 8002414:	e034      	b.n	8002480 <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	f04f 32ff 	mov.w	r2, #4294967295
 800241c:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	e024      	b.n	8002470 <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6859      	ldr	r1, [r3, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	461a      	mov	r2, r3
 8002430:	68b8      	ldr	r0, [r7, #8]
 8002432:	f000 f857 	bl	80024e4 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00c      	beq.n	800245c <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 8002442:	2101      	movs	r1, #1
 8002444:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002448:	f7ff ff46 	bl	80022d8 <FLASH_WaitForLastOperation>
 800244c:	4603      	mov	r3, r0
 800244e:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8002450:	4b10      	ldr	r3, [pc, #64]	; (8002494 <HAL_FLASHEx_Erase+0x110>)
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	490f      	ldr	r1, [pc, #60]	; (8002494 <HAL_FLASHEx_Erase+0x110>)
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <HAL_FLASHEx_Erase+0x114>)
 8002458:	4013      	ands	r3, r2
 800245a:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	601a      	str	r2, [r3, #0]
          break;
 8002468:	e00a      	b.n	8002480 <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	3301      	adds	r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4413      	add	r3, r2
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	429a      	cmp	r2, r3
 800247e:	d3d2      	bcc.n	8002426 <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <HAL_FLASHEx_Erase+0x10c>)
 8002482:	2200      	movs	r2, #0
 8002484:	751a      	strb	r2, [r3, #20]

  return status;
 8002486:	7bfb      	ldrb	r3, [r7, #15]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	24000444 	.word	0x24000444
 8002494:	52002000 	.word	0x52002000
 8002498:	fffff8fb 	.word	0xfffff8fb

0800249c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d011      	beq.n	80024d4 <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <FLASH_MassErase+0x44>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <FLASH_MassErase+0x44>)
 80024b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80024ba:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 80024bc:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <FLASH_MassErase+0x44>)
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	4907      	ldr	r1, [pc, #28]	; (80024e0 <FLASH_MassErase+0x44>)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <FLASH_MassErase+0x44>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <FLASH_MassErase+0x44>)
 80024ce:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 80024d2:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	52002000 	.word	0x52002000

080024e4 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d010      	beq.n	800251c <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80024fa:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <FLASH_Erase_Sector+0x44>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <FLASH_Erase_Sector+0x44>)
 8002500:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 8002504:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8002506:	4b08      	ldr	r3, [pc, #32]	; (8002528 <FLASH_Erase_Sector+0x44>)
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	0219      	lsls	r1, r3, #8
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	430b      	orrs	r3, r1
 8002512:	4313      	orrs	r3, r2
 8002514:	4a04      	ldr	r2, [pc, #16]	; (8002528 <FLASH_Erase_Sector+0x44>)
 8002516:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800251a:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	52002000 	.word	0x52002000

0800252c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800252c:	b480      	push	{r7}
 800252e:	b089      	sub	sp, #36	; 0x24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800253a:	4b86      	ldr	r3, [pc, #536]	; (8002754 <HAL_GPIO_Init+0x228>)
 800253c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800253e:	e18c      	b.n	800285a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	2101      	movs	r1, #1
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	fa01 f303 	lsl.w	r3, r1, r3
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 817e 	beq.w	8002854 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	2b01      	cmp	r3, #1
 8002562:	d005      	beq.n	8002570 <HAL_GPIO_Init+0x44>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d130      	bne.n	80025d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	2203      	movs	r2, #3
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68da      	ldr	r2, [r3, #12]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025a6:	2201      	movs	r2, #1
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4013      	ands	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	091b      	lsrs	r3, r3, #4
 80025bc:	f003 0201 	and.w	r2, r3, #1
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	2b03      	cmp	r3, #3
 80025dc:	d017      	beq.n	800260e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	2203      	movs	r2, #3
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d123      	bne.n	8002662 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	08da      	lsrs	r2, r3, #3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3208      	adds	r2, #8
 8002622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	220f      	movs	r2, #15
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	691a      	ldr	r2, [r3, #16]
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	08da      	lsrs	r2, r3, #3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3208      	adds	r2, #8
 800265c:	69b9      	ldr	r1, [r7, #24]
 800265e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	2203      	movs	r2, #3
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 0203 	and.w	r2, r3, #3
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 80d8 	beq.w	8002854 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a4:	4b2c      	ldr	r3, [pc, #176]	; (8002758 <HAL_GPIO_Init+0x22c>)
 80026a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026aa:	4a2b      	ldr	r2, [pc, #172]	; (8002758 <HAL_GPIO_Init+0x22c>)
 80026ac:	f043 0302 	orr.w	r3, r3, #2
 80026b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80026b4:	4b28      	ldr	r3, [pc, #160]	; (8002758 <HAL_GPIO_Init+0x22c>)
 80026b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026c2:	4a26      	ldr	r2, [pc, #152]	; (800275c <HAL_GPIO_Init+0x230>)
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	089b      	lsrs	r3, r3, #2
 80026c8:	3302      	adds	r3, #2
 80026ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	220f      	movs	r2, #15
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a1d      	ldr	r2, [pc, #116]	; (8002760 <HAL_GPIO_Init+0x234>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d04a      	beq.n	8002784 <HAL_GPIO_Init+0x258>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a1c      	ldr	r2, [pc, #112]	; (8002764 <HAL_GPIO_Init+0x238>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d02b      	beq.n	800274e <HAL_GPIO_Init+0x222>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a1b      	ldr	r2, [pc, #108]	; (8002768 <HAL_GPIO_Init+0x23c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d025      	beq.n	800274a <HAL_GPIO_Init+0x21e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a1a      	ldr	r2, [pc, #104]	; (800276c <HAL_GPIO_Init+0x240>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d01f      	beq.n	8002746 <HAL_GPIO_Init+0x21a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a19      	ldr	r2, [pc, #100]	; (8002770 <HAL_GPIO_Init+0x244>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d019      	beq.n	8002742 <HAL_GPIO_Init+0x216>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a18      	ldr	r2, [pc, #96]	; (8002774 <HAL_GPIO_Init+0x248>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d013      	beq.n	800273e <HAL_GPIO_Init+0x212>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a17      	ldr	r2, [pc, #92]	; (8002778 <HAL_GPIO_Init+0x24c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d00d      	beq.n	800273a <HAL_GPIO_Init+0x20e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a16      	ldr	r2, [pc, #88]	; (800277c <HAL_GPIO_Init+0x250>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d007      	beq.n	8002736 <HAL_GPIO_Init+0x20a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a15      	ldr	r2, [pc, #84]	; (8002780 <HAL_GPIO_Init+0x254>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d101      	bne.n	8002732 <HAL_GPIO_Init+0x206>
 800272e:	2309      	movs	r3, #9
 8002730:	e029      	b.n	8002786 <HAL_GPIO_Init+0x25a>
 8002732:	230a      	movs	r3, #10
 8002734:	e027      	b.n	8002786 <HAL_GPIO_Init+0x25a>
 8002736:	2307      	movs	r3, #7
 8002738:	e025      	b.n	8002786 <HAL_GPIO_Init+0x25a>
 800273a:	2306      	movs	r3, #6
 800273c:	e023      	b.n	8002786 <HAL_GPIO_Init+0x25a>
 800273e:	2305      	movs	r3, #5
 8002740:	e021      	b.n	8002786 <HAL_GPIO_Init+0x25a>
 8002742:	2304      	movs	r3, #4
 8002744:	e01f      	b.n	8002786 <HAL_GPIO_Init+0x25a>
 8002746:	2303      	movs	r3, #3
 8002748:	e01d      	b.n	8002786 <HAL_GPIO_Init+0x25a>
 800274a:	2302      	movs	r3, #2
 800274c:	e01b      	b.n	8002786 <HAL_GPIO_Init+0x25a>
 800274e:	2301      	movs	r3, #1
 8002750:	e019      	b.n	8002786 <HAL_GPIO_Init+0x25a>
 8002752:	bf00      	nop
 8002754:	58000080 	.word	0x58000080
 8002758:	58024400 	.word	0x58024400
 800275c:	58000400 	.word	0x58000400
 8002760:	58020000 	.word	0x58020000
 8002764:	58020400 	.word	0x58020400
 8002768:	58020800 	.word	0x58020800
 800276c:	58020c00 	.word	0x58020c00
 8002770:	58021000 	.word	0x58021000
 8002774:	58021400 	.word	0x58021400
 8002778:	58021800 	.word	0x58021800
 800277c:	58021c00 	.word	0x58021c00
 8002780:	58022400 	.word	0x58022400
 8002784:	2300      	movs	r3, #0
 8002786:	69fa      	ldr	r2, [r7, #28]
 8002788:	f002 0203 	and.w	r2, r2, #3
 800278c:	0092      	lsls	r2, r2, #2
 800278e:	4093      	lsls	r3, r2
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002796:	4938      	ldr	r1, [pc, #224]	; (8002878 <HAL_GPIO_Init+0x34c>)
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	089b      	lsrs	r3, r3, #2
 800279c:	3302      	adds	r3, #2
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80027ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80027d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80027f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	3301      	adds	r3, #1
 8002858:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	fa22 f303 	lsr.w	r3, r2, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	f47f ae6b 	bne.w	8002540 <HAL_GPIO_Init+0x14>
  }
}
 800286a:	bf00      	nop
 800286c:	bf00      	nop
 800286e:	3724      	adds	r7, #36	; 0x24
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	58000400 	.word	0x58000400

0800287c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	807b      	strh	r3, [r7, #2]
 8002888:	4613      	mov	r3, r2
 800288a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800288c:	787b      	ldrb	r3, [r7, #1]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002892:	887a      	ldrh	r2, [r7, #2]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002898:	e003      	b.n	80028a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800289a:	887b      	ldrh	r3, [r7, #2]
 800289c:	041a      	lsls	r2, r3, #16
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	619a      	str	r2, [r3, #24]
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80028b8:	4b19      	ldr	r3, [pc, #100]	; (8002920 <HAL_PWREx_ConfigSupply+0x70>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d00a      	beq.n	80028da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028c4:	4b16      	ldr	r3, [pc, #88]	; (8002920 <HAL_PWREx_ConfigSupply+0x70>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d001      	beq.n	80028d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e01f      	b.n	8002916 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	e01d      	b.n	8002916 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <HAL_PWREx_ConfigSupply+0x70>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f023 0207 	bic.w	r2, r3, #7
 80028e2:	490f      	ldr	r1, [pc, #60]	; (8002920 <HAL_PWREx_ConfigSupply+0x70>)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80028ea:	f7fe fe17 	bl	800151c <HAL_GetTick>
 80028ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028f0:	e009      	b.n	8002906 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028f2:	f7fe fe13 	bl	800151c <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002900:	d901      	bls.n	8002906 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e007      	b.n	8002916 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002906:	4b06      	ldr	r3, [pc, #24]	; (8002920 <HAL_PWREx_ConfigSupply+0x70>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800290e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002912:	d1ee      	bne.n	80028f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	58024800 	.word	0x58024800

08002924 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08c      	sub	sp, #48	; 0x30
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e39d      	b.n	8003072 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 8087 	beq.w	8002a52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002944:	4b88      	ldr	r3, [pc, #544]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800294c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800294e:	4b86      	ldr	r3, [pc, #536]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002956:	2b10      	cmp	r3, #16
 8002958:	d007      	beq.n	800296a <HAL_RCC_OscConfig+0x46>
 800295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295c:	2b18      	cmp	r3, #24
 800295e:	d110      	bne.n	8002982 <HAL_RCC_OscConfig+0x5e>
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d10b      	bne.n	8002982 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296a:	4b7f      	ldr	r3, [pc, #508]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d06c      	beq.n	8002a50 <HAL_RCC_OscConfig+0x12c>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d168      	bne.n	8002a50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e377      	b.n	8003072 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298a:	d106      	bne.n	800299a <HAL_RCC_OscConfig+0x76>
 800298c:	4b76      	ldr	r3, [pc, #472]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a75      	ldr	r2, [pc, #468]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 8002992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	e02e      	b.n	80029f8 <HAL_RCC_OscConfig+0xd4>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10c      	bne.n	80029bc <HAL_RCC_OscConfig+0x98>
 80029a2:	4b71      	ldr	r3, [pc, #452]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a70      	ldr	r2, [pc, #448]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 80029a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	4b6e      	ldr	r3, [pc, #440]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a6d      	ldr	r2, [pc, #436]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 80029b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e01d      	b.n	80029f8 <HAL_RCC_OscConfig+0xd4>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCC_OscConfig+0xbc>
 80029c6:	4b68      	ldr	r3, [pc, #416]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a67      	ldr	r2, [pc, #412]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 80029cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	4b65      	ldr	r3, [pc, #404]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a64      	ldr	r2, [pc, #400]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 80029d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	e00b      	b.n	80029f8 <HAL_RCC_OscConfig+0xd4>
 80029e0:	4b61      	ldr	r3, [pc, #388]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a60      	ldr	r2, [pc, #384]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 80029e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	4b5e      	ldr	r3, [pc, #376]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a5d      	ldr	r2, [pc, #372]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 80029f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d013      	beq.n	8002a28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7fe fd8c 	bl	800151c <HAL_GetTick>
 8002a04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a08:	f7fe fd88 	bl	800151c <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b64      	cmp	r3, #100	; 0x64
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e32b      	b.n	8003072 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a1a:	4b53      	ldr	r3, [pc, #332]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0xe4>
 8002a26:	e014      	b.n	8002a52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a28:	f7fe fd78 	bl	800151c <HAL_GetTick>
 8002a2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a30:	f7fe fd74 	bl	800151c <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b64      	cmp	r3, #100	; 0x64
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e317      	b.n	8003072 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a42:	4b49      	ldr	r3, [pc, #292]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0x10c>
 8002a4e:	e000      	b.n	8002a52 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 808c 	beq.w	8002b78 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a60:	4b41      	ldr	r3, [pc, #260]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a68:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a6a:	4b3f      	ldr	r3, [pc, #252]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d007      	beq.n	8002a86 <HAL_RCC_OscConfig+0x162>
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	2b18      	cmp	r3, #24
 8002a7a:	d137      	bne.n	8002aec <HAL_RCC_OscConfig+0x1c8>
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d132      	bne.n	8002aec <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a86:	4b38      	ldr	r3, [pc, #224]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d005      	beq.n	8002a9e <HAL_RCC_OscConfig+0x17a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e2e9      	b.n	8003072 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a9e:	4b32      	ldr	r3, [pc, #200]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 0219 	bic.w	r2, r3, #25
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	492f      	ldr	r1, [pc, #188]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ab0:	f7fe fd34 	bl	800151c <HAL_GetTick>
 8002ab4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab8:	f7fe fd30 	bl	800151c <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e2d3      	b.n	8003072 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002aca:	4b27      	ldr	r3, [pc, #156]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad6:	4b24      	ldr	r3, [pc, #144]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	061b      	lsls	r3, r3, #24
 8002ae4:	4920      	ldr	r1, [pc, #128]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aea:	e045      	b.n	8002b78 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d026      	beq.n	8002b42 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002af4:	4b1c      	ldr	r3, [pc, #112]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f023 0219 	bic.w	r2, r3, #25
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	4919      	ldr	r1, [pc, #100]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7fe fd09 	bl	800151c <HAL_GetTick>
 8002b0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b0e:	f7fe fd05 	bl	800151c <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e2a8      	b.n	8003072 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b20:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0f0      	beq.n	8002b0e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	061b      	lsls	r3, r3, #24
 8002b3a:	490b      	ldr	r1, [pc, #44]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	604b      	str	r3, [r1, #4]
 8002b40:	e01a      	b.n	8002b78 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b42:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a08      	ldr	r2, [pc, #32]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 8002b48:	f023 0301 	bic.w	r3, r3, #1
 8002b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4e:	f7fe fce5 	bl	800151c <HAL_GetTick>
 8002b52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b54:	e00a      	b.n	8002b6c <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b56:	f7fe fce1 	bl	800151c <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d903      	bls.n	8002b6c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e284      	b.n	8003072 <HAL_RCC_OscConfig+0x74e>
 8002b68:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b6c:	4b96      	ldr	r3, [pc, #600]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1ee      	bne.n	8002b56 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d06a      	beq.n	8002c5a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b84:	4b90      	ldr	r3, [pc, #576]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b8c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b8e:	4b8e      	ldr	r3, [pc, #568]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b92:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d007      	beq.n	8002baa <HAL_RCC_OscConfig+0x286>
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	2b18      	cmp	r3, #24
 8002b9e:	d11b      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x2b4>
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d116      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002baa:	4b87      	ldr	r3, [pc, #540]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d005      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x29e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	2b80      	cmp	r3, #128	; 0x80
 8002bbc:	d001      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e257      	b.n	8003072 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bc2:	4b81      	ldr	r3, [pc, #516]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	061b      	lsls	r3, r3, #24
 8002bd0:	497d      	ldr	r1, [pc, #500]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bd6:	e040      	b.n	8002c5a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d023      	beq.n	8002c28 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002be0:	4b79      	ldr	r3, [pc, #484]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a78      	ldr	r2, [pc, #480]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7fe fc96 	bl	800151c <HAL_GetTick>
 8002bf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002bf4:	f7fe fc92 	bl	800151c <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e235      	b.n	8003072 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c06:	4b70      	ldr	r3, [pc, #448]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c12:	4b6d      	ldr	r3, [pc, #436]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	061b      	lsls	r3, r3, #24
 8002c20:	4969      	ldr	r1, [pc, #420]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60cb      	str	r3, [r1, #12]
 8002c26:	e018      	b.n	8002c5a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c28:	4b67      	ldr	r3, [pc, #412]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a66      	ldr	r2, [pc, #408]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002c2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7fe fc72 	bl	800151c <HAL_GetTick>
 8002c38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c3c:	f7fe fc6e 	bl	800151c <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e211      	b.n	8003072 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c4e:	4b5e      	ldr	r3, [pc, #376]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d036      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d019      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c6e:	4b56      	ldr	r3, [pc, #344]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c72:	4a55      	ldr	r2, [pc, #340]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7a:	f7fe fc4f 	bl	800151c <HAL_GetTick>
 8002c7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c82:	f7fe fc4b 	bl	800151c <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e1ee      	b.n	8003072 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c94:	4b4c      	ldr	r3, [pc, #304]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0x35e>
 8002ca0:	e018      	b.n	8002cd4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca2:	4b49      	ldr	r3, [pc, #292]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca6:	4a48      	ldr	r2, [pc, #288]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002ca8:	f023 0301 	bic.w	r3, r3, #1
 8002cac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cae:	f7fe fc35 	bl	800151c <HAL_GetTick>
 8002cb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cb6:	f7fe fc31 	bl	800151c <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e1d4      	b.n	8003072 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cc8:	4b3f      	ldr	r3, [pc, #252]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1f0      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d036      	beq.n	8002d4e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d019      	beq.n	8002d1c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ce8:	4b37      	ldr	r3, [pc, #220]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a36      	ldr	r2, [pc, #216]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002cee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cf2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cf4:	f7fe fc12 	bl	800151c <HAL_GetTick>
 8002cf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002cfc:	f7fe fc0e 	bl	800151c <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e1b1      	b.n	8003072 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d0e:	4b2e      	ldr	r3, [pc, #184]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0x3d8>
 8002d1a:	e018      	b.n	8002d4e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d1c:	4b2a      	ldr	r3, [pc, #168]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a29      	ldr	r2, [pc, #164]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002d22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d28:	f7fe fbf8 	bl	800151c <HAL_GetTick>
 8002d2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d30:	f7fe fbf4 	bl	800151c <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e197      	b.n	8003072 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d42:	4b21      	ldr	r3, [pc, #132]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 8086 	beq.w	8002e68 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d5c:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <HAL_RCC_OscConfig+0x4a8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a1a      	ldr	r2, [pc, #104]	; (8002dcc <HAL_RCC_OscConfig+0x4a8>)
 8002d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d68:	f7fe fbd8 	bl	800151c <HAL_GetTick>
 8002d6c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d70:	f7fe fbd4 	bl	800151c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	; 0x64
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e177      	b.n	8003072 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d82:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_RCC_OscConfig+0x4a8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d106      	bne.n	8002da4 <HAL_RCC_OscConfig+0x480>
 8002d96:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9a:	4a0b      	ldr	r2, [pc, #44]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	6713      	str	r3, [r2, #112]	; 0x70
 8002da2:	e032      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e6>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d111      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x4ac>
 8002dac:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db0:	4a05      	ldr	r2, [pc, #20]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002db2:	f023 0301 	bic.w	r3, r3, #1
 8002db6:	6713      	str	r3, [r2, #112]	; 0x70
 8002db8:	4b03      	ldr	r3, [pc, #12]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbc:	4a02      	ldr	r2, [pc, #8]	; (8002dc8 <HAL_RCC_OscConfig+0x4a4>)
 8002dbe:	f023 0304 	bic.w	r3, r3, #4
 8002dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc4:	e021      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e6>
 8002dc6:	bf00      	nop
 8002dc8:	58024400 	.word	0x58024400
 8002dcc:	58024800 	.word	0x58024800
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	2b05      	cmp	r3, #5
 8002dd6:	d10c      	bne.n	8002df2 <HAL_RCC_OscConfig+0x4ce>
 8002dd8:	4b83      	ldr	r3, [pc, #524]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ddc:	4a82      	ldr	r2, [pc, #520]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002dde:	f043 0304 	orr.w	r3, r3, #4
 8002de2:	6713      	str	r3, [r2, #112]	; 0x70
 8002de4:	4b80      	ldr	r3, [pc, #512]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de8:	4a7f      	ldr	r2, [pc, #508]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	6713      	str	r3, [r2, #112]	; 0x70
 8002df0:	e00b      	b.n	8002e0a <HAL_RCC_OscConfig+0x4e6>
 8002df2:	4b7d      	ldr	r3, [pc, #500]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	4a7c      	ldr	r2, [pc, #496]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002df8:	f023 0301 	bic.w	r3, r3, #1
 8002dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfe:	4b7a      	ldr	r3, [pc, #488]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e02:	4a79      	ldr	r2, [pc, #484]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002e04:	f023 0304 	bic.w	r3, r3, #4
 8002e08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d015      	beq.n	8002e3e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e12:	f7fe fb83 	bl	800151c <HAL_GetTick>
 8002e16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e18:	e00a      	b.n	8002e30 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e1a:	f7fe fb7f 	bl	800151c <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e120      	b.n	8003072 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e30:	4b6d      	ldr	r3, [pc, #436]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0ee      	beq.n	8002e1a <HAL_RCC_OscConfig+0x4f6>
 8002e3c:	e014      	b.n	8002e68 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3e:	f7fe fb6d 	bl	800151c <HAL_GetTick>
 8002e42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e44:	e00a      	b.n	8002e5c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e46:	f7fe fb69 	bl	800151c <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e10a      	b.n	8003072 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e5c:	4b62      	ldr	r3, [pc, #392]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1ee      	bne.n	8002e46 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 80ff 	beq.w	8003070 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e72:	4b5d      	ldr	r3, [pc, #372]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e7a:	2b18      	cmp	r3, #24
 8002e7c:	f000 80ba 	beq.w	8002ff4 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	f040 8095 	bne.w	8002fb4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8a:	4b57      	ldr	r3, [pc, #348]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a56      	ldr	r2, [pc, #344]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002e90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e96:	f7fe fb41 	bl	800151c <HAL_GetTick>
 8002e9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9e:	f7fe fb3d 	bl	800151c <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e0e0      	b.n	8003072 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eb0:	4b4d      	ldr	r3, [pc, #308]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1f0      	bne.n	8002e9e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ebc:	4b4a      	ldr	r3, [pc, #296]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002ebe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ec0:	4b4a      	ldr	r3, [pc, #296]	; (8002fec <HAL_RCC_OscConfig+0x6c8>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ecc:	0112      	lsls	r2, r2, #4
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	4945      	ldr	r1, [pc, #276]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	628b      	str	r3, [r1, #40]	; 0x28
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	3b01      	subs	r3, #1
 8002edc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	025b      	lsls	r3, r3, #9
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	041b      	lsls	r3, r3, #16
 8002ef4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efe:	3b01      	subs	r3, #1
 8002f00:	061b      	lsls	r3, r3, #24
 8002f02:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f06:	4938      	ldr	r1, [pc, #224]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002f0c:	4b36      	ldr	r3, [pc, #216]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	4a35      	ldr	r2, [pc, #212]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f18:	4b33      	ldr	r3, [pc, #204]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002f1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f1c:	4b34      	ldr	r3, [pc, #208]	; (8002ff0 <HAL_RCC_OscConfig+0x6cc>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f24:	00d2      	lsls	r2, r2, #3
 8002f26:	4930      	ldr	r1, [pc, #192]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002f2c:	4b2e      	ldr	r3, [pc, #184]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	f023 020c 	bic.w	r2, r3, #12
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	492b      	ldr	r1, [pc, #172]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002f3e:	4b2a      	ldr	r3, [pc, #168]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	f023 0202 	bic.w	r2, r3, #2
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4a:	4927      	ldr	r1, [pc, #156]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f50:	4b25      	ldr	r3, [pc, #148]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	4a24      	ldr	r2, [pc, #144]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f5c:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	4a21      	ldr	r2, [pc, #132]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f68:	4b1f      	ldr	r3, [pc, #124]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	4a1e      	ldr	r2, [pc, #120]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002f6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002f74:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	4a1b      	ldr	r2, [pc, #108]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f80:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a18      	ldr	r2, [pc, #96]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8c:	f7fe fac6 	bl	800151c <HAL_GetTick>
 8002f90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f94:	f7fe fac2 	bl	800151c <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e065      	b.n	8003072 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0f0      	beq.n	8002f94 <HAL_RCC_OscConfig+0x670>
 8002fb2:	e05d      	b.n	8003070 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb4:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a0b      	ldr	r2, [pc, #44]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc0:	f7fe faac 	bl	800151c <HAL_GetTick>
 8002fc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc8:	f7fe faa8 	bl	800151c <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e04b      	b.n	8003072 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fda:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <HAL_RCC_OscConfig+0x6c4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x6a4>
 8002fe6:	e043      	b.n	8003070 <HAL_RCC_OscConfig+0x74c>
 8002fe8:	58024400 	.word	0x58024400
 8002fec:	fffffc0c 	.word	0xfffffc0c
 8002ff0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ff4:	4b21      	ldr	r3, [pc, #132]	; (800307c <HAL_RCC_OscConfig+0x758>)
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ffa:	4b20      	ldr	r3, [pc, #128]	; (800307c <HAL_RCC_OscConfig+0x758>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	2b01      	cmp	r3, #1
 8003006:	d031      	beq.n	800306c <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f003 0203 	and.w	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d12a      	bne.n	800306c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003022:	429a      	cmp	r2, r3
 8003024:	d122      	bne.n	800306c <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003030:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003032:	429a      	cmp	r2, r3
 8003034:	d11a      	bne.n	800306c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	0a5b      	lsrs	r3, r3, #9
 800303a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003042:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003044:	429a      	cmp	r2, r3
 8003046:	d111      	bne.n	800306c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	0c1b      	lsrs	r3, r3, #16
 800304c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003054:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003056:	429a      	cmp	r2, r3
 8003058:	d108      	bne.n	800306c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	0e1b      	lsrs	r3, r3, #24
 800305e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003066:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003068:	429a      	cmp	r2, r3
 800306a:	d001      	beq.n	8003070 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e000      	b.n	8003072 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3730      	adds	r7, #48	; 0x30
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	58024400 	.word	0x58024400

08003080 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e19c      	b.n	80033ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003094:	4b8a      	ldr	r3, [pc, #552]	; (80032c0 <HAL_RCC_ClockConfig+0x240>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d910      	bls.n	80030c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b87      	ldr	r3, [pc, #540]	; (80032c0 <HAL_RCC_ClockConfig+0x240>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 020f 	bic.w	r2, r3, #15
 80030aa:	4985      	ldr	r1, [pc, #532]	; (80032c0 <HAL_RCC_ClockConfig+0x240>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b83      	ldr	r3, [pc, #524]	; (80032c0 <HAL_RCC_ClockConfig+0x240>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e184      	b.n	80033ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d010      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	4b7b      	ldr	r3, [pc, #492]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030dc:	429a      	cmp	r2, r3
 80030de:	d908      	bls.n	80030f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030e0:	4b78      	ldr	r3, [pc, #480]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	4975      	ldr	r1, [pc, #468]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d010      	beq.n	8003120 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695a      	ldr	r2, [r3, #20]
 8003102:	4b70      	ldr	r3, [pc, #448]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800310a:	429a      	cmp	r2, r3
 800310c:	d908      	bls.n	8003120 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800310e:	4b6d      	ldr	r3, [pc, #436]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	496a      	ldr	r1, [pc, #424]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 800311c:	4313      	orrs	r3, r2
 800311e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	2b00      	cmp	r3, #0
 800312a:	d010      	beq.n	800314e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	699a      	ldr	r2, [r3, #24]
 8003130:	4b64      	ldr	r3, [pc, #400]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003138:	429a      	cmp	r2, r3
 800313a:	d908      	bls.n	800314e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800313c:	4b61      	ldr	r3, [pc, #388]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	495e      	ldr	r1, [pc, #376]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 800314a:	4313      	orrs	r3, r2
 800314c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b00      	cmp	r3, #0
 8003158:	d010      	beq.n	800317c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69da      	ldr	r2, [r3, #28]
 800315e:	4b59      	ldr	r3, [pc, #356]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003166:	429a      	cmp	r2, r3
 8003168:	d908      	bls.n	800317c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800316a:	4b56      	ldr	r3, [pc, #344]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	4953      	ldr	r1, [pc, #332]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003178:	4313      	orrs	r3, r2
 800317a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d010      	beq.n	80031aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	4b4d      	ldr	r3, [pc, #308]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	429a      	cmp	r2, r3
 8003196:	d908      	bls.n	80031aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003198:	4b4a      	ldr	r3, [pc, #296]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f023 020f 	bic.w	r2, r3, #15
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4947      	ldr	r1, [pc, #284]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d055      	beq.n	8003262 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80031b6:	4b43      	ldr	r3, [pc, #268]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	4940      	ldr	r1, [pc, #256]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d107      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031d0:	4b3c      	ldr	r3, [pc, #240]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d121      	bne.n	8003220 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0f6      	b.n	80033ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d107      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031e8:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d115      	bne.n	8003220 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0ea      	b.n	80033ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d107      	bne.n	8003210 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003200:	4b30      	ldr	r3, [pc, #192]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003208:	2b00      	cmp	r3, #0
 800320a:	d109      	bne.n	8003220 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0de      	b.n	80033ce <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003210:	4b2c      	ldr	r3, [pc, #176]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0d6      	b.n	80033ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003220:	4b28      	ldr	r3, [pc, #160]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	f023 0207 	bic.w	r2, r3, #7
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	4925      	ldr	r1, [pc, #148]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 800322e:	4313      	orrs	r3, r2
 8003230:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003232:	f7fe f973 	bl	800151c <HAL_GetTick>
 8003236:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003238:	e00a      	b.n	8003250 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800323a:	f7fe f96f 	bl	800151c <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	f241 3288 	movw	r2, #5000	; 0x1388
 8003248:	4293      	cmp	r3, r2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e0be      	b.n	80033ce <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003250:	4b1c      	ldr	r3, [pc, #112]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	429a      	cmp	r2, r3
 8003260:	d1eb      	bne.n	800323a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d010      	beq.n	8003290 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	429a      	cmp	r2, r3
 800327c:	d208      	bcs.n	8003290 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800327e:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	f023 020f 	bic.w	r2, r3, #15
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	490e      	ldr	r1, [pc, #56]	; (80032c4 <HAL_RCC_ClockConfig+0x244>)
 800328c:	4313      	orrs	r3, r2
 800328e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCC_ClockConfig+0x240>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 030f 	and.w	r3, r3, #15
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d214      	bcs.n	80032c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <HAL_RCC_ClockConfig+0x240>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 020f 	bic.w	r2, r3, #15
 80032a6:	4906      	ldr	r1, [pc, #24]	; (80032c0 <HAL_RCC_ClockConfig+0x240>)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ae:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <HAL_RCC_ClockConfig+0x240>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e086      	b.n	80033ce <HAL_RCC_ClockConfig+0x34e>
 80032c0:	52002000 	.word	0x52002000
 80032c4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d010      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	4b3f      	ldr	r3, [pc, #252]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d208      	bcs.n	80032f6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032e4:	4b3c      	ldr	r3, [pc, #240]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	4939      	ldr	r1, [pc, #228]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d010      	beq.n	8003324 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	4b34      	ldr	r3, [pc, #208]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800330e:	429a      	cmp	r2, r3
 8003310:	d208      	bcs.n	8003324 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003312:	4b31      	ldr	r3, [pc, #196]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	492e      	ldr	r1, [pc, #184]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 8003320:	4313      	orrs	r3, r2
 8003322:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0310 	and.w	r3, r3, #16
 800332c:	2b00      	cmp	r3, #0
 800332e:	d010      	beq.n	8003352 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699a      	ldr	r2, [r3, #24]
 8003334:	4b28      	ldr	r3, [pc, #160]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800333c:	429a      	cmp	r2, r3
 800333e:	d208      	bcs.n	8003352 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003340:	4b25      	ldr	r3, [pc, #148]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	4922      	ldr	r1, [pc, #136]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 800334e:	4313      	orrs	r3, r2
 8003350:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b00      	cmp	r3, #0
 800335c:	d010      	beq.n	8003380 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69da      	ldr	r2, [r3, #28]
 8003362:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800336a:	429a      	cmp	r2, r3
 800336c:	d208      	bcs.n	8003380 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800336e:	4b1a      	ldr	r3, [pc, #104]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	4917      	ldr	r1, [pc, #92]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 800337c:	4313      	orrs	r3, r2
 800337e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003380:	f000 f834 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 8003384:	4602      	mov	r2, r0
 8003386:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	0a1b      	lsrs	r3, r3, #8
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	4912      	ldr	r1, [pc, #72]	; (80033dc <HAL_RCC_ClockConfig+0x35c>)
 8003392:	5ccb      	ldrb	r3, [r1, r3]
 8003394:	f003 031f 	and.w	r3, r3, #31
 8003398:	fa22 f303 	lsr.w	r3, r2, r3
 800339c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800339e:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <HAL_RCC_ClockConfig+0x358>)
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	4a0d      	ldr	r2, [pc, #52]	; (80033dc <HAL_RCC_ClockConfig+0x35c>)
 80033a8:	5cd3      	ldrb	r3, [r2, r3]
 80033aa:	f003 031f 	and.w	r3, r3, #31
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	fa22 f303 	lsr.w	r3, r2, r3
 80033b4:	4a0a      	ldr	r2, [pc, #40]	; (80033e0 <HAL_RCC_ClockConfig+0x360>)
 80033b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033b8:	4a0a      	ldr	r2, [pc, #40]	; (80033e4 <HAL_RCC_ClockConfig+0x364>)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80033be:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <HAL_RCC_ClockConfig+0x368>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe f860 	bl	8001488 <HAL_InitTick>
 80033c8:	4603      	mov	r3, r0
 80033ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	58024400 	.word	0x58024400
 80033dc:	080067f8 	.word	0x080067f8
 80033e0:	2400014c 	.word	0x2400014c
 80033e4:	24000148 	.word	0x24000148
 80033e8:	24000150 	.word	0x24000150

080033ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b089      	sub	sp, #36	; 0x24
 80033f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033f2:	4bb3      	ldr	r3, [pc, #716]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033fa:	2b18      	cmp	r3, #24
 80033fc:	f200 8155 	bhi.w	80036aa <HAL_RCC_GetSysClockFreq+0x2be>
 8003400:	a201      	add	r2, pc, #4	; (adr r2, 8003408 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003406:	bf00      	nop
 8003408:	0800346d 	.word	0x0800346d
 800340c:	080036ab 	.word	0x080036ab
 8003410:	080036ab 	.word	0x080036ab
 8003414:	080036ab 	.word	0x080036ab
 8003418:	080036ab 	.word	0x080036ab
 800341c:	080036ab 	.word	0x080036ab
 8003420:	080036ab 	.word	0x080036ab
 8003424:	080036ab 	.word	0x080036ab
 8003428:	08003493 	.word	0x08003493
 800342c:	080036ab 	.word	0x080036ab
 8003430:	080036ab 	.word	0x080036ab
 8003434:	080036ab 	.word	0x080036ab
 8003438:	080036ab 	.word	0x080036ab
 800343c:	080036ab 	.word	0x080036ab
 8003440:	080036ab 	.word	0x080036ab
 8003444:	080036ab 	.word	0x080036ab
 8003448:	08003499 	.word	0x08003499
 800344c:	080036ab 	.word	0x080036ab
 8003450:	080036ab 	.word	0x080036ab
 8003454:	080036ab 	.word	0x080036ab
 8003458:	080036ab 	.word	0x080036ab
 800345c:	080036ab 	.word	0x080036ab
 8003460:	080036ab 	.word	0x080036ab
 8003464:	080036ab 	.word	0x080036ab
 8003468:	0800349f 	.word	0x0800349f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800346c:	4b94      	ldr	r3, [pc, #592]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d009      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003478:	4b91      	ldr	r3, [pc, #580]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	08db      	lsrs	r3, r3, #3
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	4a90      	ldr	r2, [pc, #576]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
 8003488:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800348a:	e111      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800348c:	4b8d      	ldr	r3, [pc, #564]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800348e:	61bb      	str	r3, [r7, #24]
    break;
 8003490:	e10e      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003492:	4b8d      	ldr	r3, [pc, #564]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003494:	61bb      	str	r3, [r7, #24]
    break;
 8003496:	e10b      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003498:	4b8c      	ldr	r3, [pc, #560]	; (80036cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800349a:	61bb      	str	r3, [r7, #24]
    break;
 800349c:	e108      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800349e:	4b88      	ldr	r3, [pc, #544]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80034a8:	4b85      	ldr	r3, [pc, #532]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	091b      	lsrs	r3, r3, #4
 80034ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034b2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80034b4:	4b82      	ldr	r3, [pc, #520]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80034be:	4b80      	ldr	r3, [pc, #512]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c2:	08db      	lsrs	r3, r3, #3
 80034c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	fb02 f303 	mul.w	r3, r2, r3
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80e1 	beq.w	80036a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	f000 8083 	beq.w	80035f0 <HAL_RCC_GetSysClockFreq+0x204>
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	f200 80a1 	bhi.w	8003634 <HAL_RCC_GetSysClockFreq+0x248>
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0x114>
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d056      	beq.n	80035ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80034fe:	e099      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003500:	4b6f      	ldr	r3, [pc, #444]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0320 	and.w	r3, r3, #32
 8003508:	2b00      	cmp	r3, #0
 800350a:	d02d      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800350c:	4b6c      	ldr	r3, [pc, #432]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	08db      	lsrs	r3, r3, #3
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	4a6b      	ldr	r2, [pc, #428]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003518:	fa22 f303 	lsr.w	r3, r2, r3
 800351c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	ee07 3a90 	vmov	s15, r3
 8003524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	ee07 3a90 	vmov	s15, r3
 800352e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003536:	4b62      	ldr	r3, [pc, #392]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003546:	ed97 6a02 	vldr	s12, [r7, #8]
 800354a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80036d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800354e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800355a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800355e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003562:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003566:	e087      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	ee07 3a90 	vmov	s15, r3
 800356e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003572:	eddf 6a58 	vldr	s13, [pc, #352]	; 80036d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800357a:	4b51      	ldr	r3, [pc, #324]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003582:	ee07 3a90 	vmov	s15, r3
 8003586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800358a:	ed97 6a02 	vldr	s12, [r7, #8]
 800358e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80036d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800359a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800359e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035aa:	e065      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	ee07 3a90 	vmov	s15, r3
 80035b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80036d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80035ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035be:	4b40      	ldr	r3, [pc, #256]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c6:	ee07 3a90 	vmov	s15, r3
 80035ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80035d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80036d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035ee:	e043      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	ee07 3a90 	vmov	s15, r3
 80035f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 80036dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80035fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003602:	4b2f      	ldr	r3, [pc, #188]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800360a:	ee07 3a90 	vmov	s15, r3
 800360e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003612:	ed97 6a02 	vldr	s12, [r7, #8]
 8003616:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80036d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800361a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800361e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800362a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800362e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003632:	e021      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	ee07 3a90 	vmov	s15, r3
 800363a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800363e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80036d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003646:	4b1e      	ldr	r3, [pc, #120]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800364e:	ee07 3a90 	vmov	s15, r3
 8003652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003656:	ed97 6a02 	vldr	s12, [r7, #8]
 800365a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80036d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800365e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800366a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800366e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003676:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	0a5b      	lsrs	r3, r3, #9
 800367e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003682:	3301      	adds	r3, #1
 8003684:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	ee07 3a90 	vmov	s15, r3
 800368c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003690:	edd7 6a07 	vldr	s13, [r7, #28]
 8003694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800369c:	ee17 3a90 	vmov	r3, s15
 80036a0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80036a2:	e005      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61bb      	str	r3, [r7, #24]
    break;
 80036a8:	e002      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80036aa:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036ac:	61bb      	str	r3, [r7, #24]
    break;
 80036ae:	bf00      	nop
  }

  return sysclockfreq;
 80036b0:	69bb      	ldr	r3, [r7, #24]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3724      	adds	r7, #36	; 0x24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	58024400 	.word	0x58024400
 80036c4:	03d09000 	.word	0x03d09000
 80036c8:	003d0900 	.word	0x003d0900
 80036cc:	007a1200 	.word	0x007a1200
 80036d0:	46000000 	.word	0x46000000
 80036d4:	4c742400 	.word	0x4c742400
 80036d8:	4a742400 	.word	0x4a742400
 80036dc:	4af42400 	.word	0x4af42400

080036e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80036e6:	f7ff fe81 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 80036ea:	4602      	mov	r2, r0
 80036ec:	4b10      	ldr	r3, [pc, #64]	; (8003730 <HAL_RCC_GetHCLKFreq+0x50>)
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	0a1b      	lsrs	r3, r3, #8
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	490f      	ldr	r1, [pc, #60]	; (8003734 <HAL_RCC_GetHCLKFreq+0x54>)
 80036f8:	5ccb      	ldrb	r3, [r1, r3]
 80036fa:	f003 031f 	and.w	r3, r3, #31
 80036fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003702:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003704:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <HAL_RCC_GetHCLKFreq+0x50>)
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	f003 030f 	and.w	r3, r3, #15
 800370c:	4a09      	ldr	r2, [pc, #36]	; (8003734 <HAL_RCC_GetHCLKFreq+0x54>)
 800370e:	5cd3      	ldrb	r3, [r2, r3]
 8003710:	f003 031f 	and.w	r3, r3, #31
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	fa22 f303 	lsr.w	r3, r2, r3
 800371a:	4a07      	ldr	r2, [pc, #28]	; (8003738 <HAL_RCC_GetHCLKFreq+0x58>)
 800371c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800371e:	4a07      	ldr	r2, [pc, #28]	; (800373c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003724:	4b04      	ldr	r3, [pc, #16]	; (8003738 <HAL_RCC_GetHCLKFreq+0x58>)
 8003726:	681b      	ldr	r3, [r3, #0]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	58024400 	.word	0x58024400
 8003734:	080067f8 	.word	0x080067f8
 8003738:	2400014c 	.word	0x2400014c
 800373c:	24000148 	.word	0x24000148

08003740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003744:	f7ff ffcc 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 8003748:	4602      	mov	r2, r0
 800374a:	4b06      	ldr	r3, [pc, #24]	; (8003764 <HAL_RCC_GetPCLK1Freq+0x24>)
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	091b      	lsrs	r3, r3, #4
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	4904      	ldr	r1, [pc, #16]	; (8003768 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003756:	5ccb      	ldrb	r3, [r1, r3]
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003760:	4618      	mov	r0, r3
 8003762:	bd80      	pop	{r7, pc}
 8003764:	58024400 	.word	0x58024400
 8003768:	080067f8 	.word	0x080067f8

0800376c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003770:	f7ff ffb6 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 8003774:	4602      	mov	r2, r0
 8003776:	4b06      	ldr	r3, [pc, #24]	; (8003790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	0a1b      	lsrs	r3, r3, #8
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	4904      	ldr	r1, [pc, #16]	; (8003794 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003782:	5ccb      	ldrb	r3, [r1, r3]
 8003784:	f003 031f 	and.w	r3, r3, #31
 8003788:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800378c:	4618      	mov	r0, r3
 800378e:	bd80      	pop	{r7, pc}
 8003790:	58024400 	.word	0x58024400
 8003794:	080067f8 	.word	0x080067f8

08003798 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037a0:	2300      	movs	r3, #0
 80037a2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037a4:	2300      	movs	r3, #0
 80037a6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d03f      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037bc:	d02a      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80037be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037c2:	d824      	bhi.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037c8:	d018      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037ce:	d81e      	bhi.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037d8:	d007      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80037da:	e018      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037dc:	4ba4      	ldr	r3, [pc, #656]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	4aa3      	ldr	r2, [pc, #652]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80037e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80037e8:	e015      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3304      	adds	r3, #4
 80037ee:	2102      	movs	r1, #2
 80037f0:	4618      	mov	r0, r3
 80037f2:	f001 f989 	bl	8004b08 <RCCEx_PLL2_Config>
 80037f6:	4603      	mov	r3, r0
 80037f8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80037fa:	e00c      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3324      	adds	r3, #36	; 0x24
 8003800:	2102      	movs	r1, #2
 8003802:	4618      	mov	r0, r3
 8003804:	f001 fa32 	bl	8004c6c <RCCEx_PLL3_Config>
 8003808:	4603      	mov	r3, r0
 800380a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800380c:	e003      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	75fb      	strb	r3, [r7, #23]
      break;
 8003812:	e000      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003814:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003816:	7dfb      	ldrb	r3, [r7, #23]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d109      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800381c:	4b94      	ldr	r3, [pc, #592]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800381e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003820:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003828:	4991      	ldr	r1, [pc, #580]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800382a:	4313      	orrs	r3, r2
 800382c:	650b      	str	r3, [r1, #80]	; 0x50
 800382e:	e001      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003830:	7dfb      	ldrb	r3, [r7, #23]
 8003832:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d03d      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003844:	2b04      	cmp	r3, #4
 8003846:	d826      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003848:	a201      	add	r2, pc, #4	; (adr r2, 8003850 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800384a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384e:	bf00      	nop
 8003850:	08003865 	.word	0x08003865
 8003854:	08003873 	.word	0x08003873
 8003858:	08003885 	.word	0x08003885
 800385c:	0800389d 	.word	0x0800389d
 8003860:	0800389d 	.word	0x0800389d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003864:	4b82      	ldr	r3, [pc, #520]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	4a81      	ldr	r2, [pc, #516]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800386a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800386e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003870:	e015      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3304      	adds	r3, #4
 8003876:	2100      	movs	r1, #0
 8003878:	4618      	mov	r0, r3
 800387a:	f001 f945 	bl	8004b08 <RCCEx_PLL2_Config>
 800387e:	4603      	mov	r3, r0
 8003880:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003882:	e00c      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3324      	adds	r3, #36	; 0x24
 8003888:	2100      	movs	r1, #0
 800388a:	4618      	mov	r0, r3
 800388c:	f001 f9ee 	bl	8004c6c <RCCEx_PLL3_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003894:	e003      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	75fb      	strb	r3, [r7, #23]
      break;
 800389a:	e000      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800389c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800389e:	7dfb      	ldrb	r3, [r7, #23]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d109      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038a4:	4b72      	ldr	r3, [pc, #456]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80038a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a8:	f023 0207 	bic.w	r2, r3, #7
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b0:	496f      	ldr	r1, [pc, #444]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	650b      	str	r3, [r1, #80]	; 0x50
 80038b6:	e001      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b8:	7dfb      	ldrb	r3, [r7, #23]
 80038ba:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d051      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038ce:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80038d2:	d036      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80038d4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80038d8:	d830      	bhi.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80038da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038de:	d032      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80038e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038e4:	d82a      	bhi.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80038e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80038ea:	d02e      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80038ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80038f0:	d824      	bhi.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80038f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038f6:	d018      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80038f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038fc:	d81e      	bhi.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003902:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003906:	d007      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003908:	e018      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800390a:	4b59      	ldr	r3, [pc, #356]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	4a58      	ldr	r2, [pc, #352]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003914:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003916:	e019      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3304      	adds	r3, #4
 800391c:	2100      	movs	r1, #0
 800391e:	4618      	mov	r0, r3
 8003920:	f001 f8f2 	bl	8004b08 <RCCEx_PLL2_Config>
 8003924:	4603      	mov	r3, r0
 8003926:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003928:	e010      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3324      	adds	r3, #36	; 0x24
 800392e:	2100      	movs	r1, #0
 8003930:	4618      	mov	r0, r3
 8003932:	f001 f99b 	bl	8004c6c <RCCEx_PLL3_Config>
 8003936:	4603      	mov	r3, r0
 8003938:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800393a:	e007      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	75fb      	strb	r3, [r7, #23]
      break;
 8003940:	e004      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003942:	bf00      	nop
 8003944:	e002      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003946:	bf00      	nop
 8003948:	e000      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800394a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10a      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003952:	4b47      	ldr	r3, [pc, #284]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003956:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003960:	4943      	ldr	r1, [pc, #268]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003962:	4313      	orrs	r3, r2
 8003964:	658b      	str	r3, [r1, #88]	; 0x58
 8003966:	e001      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003968:	7dfb      	ldrb	r3, [r7, #23]
 800396a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003974:	2b00      	cmp	r3, #0
 8003976:	d051      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800397e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003982:	d036      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8003984:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003988:	d830      	bhi.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x254>
 800398a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800398e:	d032      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003990:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003994:	d82a      	bhi.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003996:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800399a:	d02e      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x262>
 800399c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039a0:	d824      	bhi.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x254>
 80039a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039a6:	d018      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x242>
 80039a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039ac:	d81e      	bhi.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x254>
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x222>
 80039b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039b6:	d007      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80039b8:	e018      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ba:	4b2d      	ldr	r3, [pc, #180]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80039bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039be:	4a2c      	ldr	r2, [pc, #176]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80039c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039c6:	e019      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3304      	adds	r3, #4
 80039cc:	2100      	movs	r1, #0
 80039ce:	4618      	mov	r0, r3
 80039d0:	f001 f89a 	bl	8004b08 <RCCEx_PLL2_Config>
 80039d4:	4603      	mov	r3, r0
 80039d6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80039d8:	e010      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3324      	adds	r3, #36	; 0x24
 80039de:	2100      	movs	r1, #0
 80039e0:	4618      	mov	r0, r3
 80039e2:	f001 f943 	bl	8004c6c <RCCEx_PLL3_Config>
 80039e6:	4603      	mov	r3, r0
 80039e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039ea:	e007      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	75fb      	strb	r3, [r7, #23]
      break;
 80039f0:	e004      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80039f2:	bf00      	nop
 80039f4:	e002      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80039f6:	bf00      	nop
 80039f8:	e000      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80039fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10a      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003a02:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a06:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a10:	4917      	ldr	r1, [pc, #92]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	658b      	str	r3, [r1, #88]	; 0x58
 8003a16:	e001      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a18:	7dfb      	ldrb	r3, [r7, #23]
 8003a1a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d035      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2c:	2b30      	cmp	r3, #48	; 0x30
 8003a2e:	d01c      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003a30:	2b30      	cmp	r3, #48	; 0x30
 8003a32:	d817      	bhi.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d00c      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d813      	bhi.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d019      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8003a40:	2b10      	cmp	r3, #16
 8003a42:	d10f      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a44:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	4a09      	ldr	r2, [pc, #36]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003a50:	e011      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3304      	adds	r3, #4
 8003a56:	2102      	movs	r1, #2
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f001 f855 	bl	8004b08 <RCCEx_PLL2_Config>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003a62:	e008      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	75fb      	strb	r3, [r7, #23]
      break;
 8003a68:	e005      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8003a6a:	bf00      	nop
 8003a6c:	e003      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003a6e:	bf00      	nop
 8003a70:	58024400 	.word	0x58024400
      break;
 8003a74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a76:	7dfb      	ldrb	r3, [r7, #23]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d109      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003a7c:	4ba3      	ldr	r3, [pc, #652]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a88:	49a0      	ldr	r1, [pc, #640]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a8e:	e001      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
 8003a92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d047      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aa8:	d030      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8003aaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aae:	d82a      	bhi.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003ab0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ab4:	d02c      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003ab6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003aba:	d824      	bhi.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac0:	d018      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac6:	d81e      	bhi.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad0:	d007      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003ad2:	e018      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad4:	4b8d      	ldr	r3, [pc, #564]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	4a8c      	ldr	r2, [pc, #560]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ade:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ae0:	e017      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f001 f80d 	bl	8004b08 <RCCEx_PLL2_Config>
 8003aee:	4603      	mov	r3, r0
 8003af0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003af2:	e00e      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3324      	adds	r3, #36	; 0x24
 8003af8:	2100      	movs	r1, #0
 8003afa:	4618      	mov	r0, r3
 8003afc:	f001 f8b6 	bl	8004c6c <RCCEx_PLL3_Config>
 8003b00:	4603      	mov	r3, r0
 8003b02:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b04:	e005      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	75fb      	strb	r3, [r7, #23]
      break;
 8003b0a:	e002      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003b0c:	bf00      	nop
 8003b0e:	e000      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003b10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b12:	7dfb      	ldrb	r3, [r7, #23]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d109      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b18:	4b7c      	ldr	r3, [pc, #496]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b1c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b24:	4979      	ldr	r1, [pc, #484]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	650b      	str	r3, [r1, #80]	; 0x50
 8003b2a:	e001      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
 8003b2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d049      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b44:	d02e      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003b46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b4a:	d828      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003b4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b50:	d02a      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003b52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b56:	d822      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003b58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b5c:	d026      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003b5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b62:	d81c      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003b64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b68:	d010      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003b6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b6e:	d816      	bhi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d01d      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b78:	d111      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	2101      	movs	r1, #1
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 ffc1 	bl	8004b08 <RCCEx_PLL2_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b8a:	e012      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3324      	adds	r3, #36	; 0x24
 8003b90:	2101      	movs	r1, #1
 8003b92:	4618      	mov	r0, r3
 8003b94:	f001 f86a 	bl	8004c6c <RCCEx_PLL3_Config>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b9c:	e009      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba2:	e006      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003ba4:	bf00      	nop
 8003ba6:	e004      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003ba8:	bf00      	nop
 8003baa:	e002      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003bac:	bf00      	nop
 8003bae:	e000      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003bb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d109      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003bb8:	4b54      	ldr	r3, [pc, #336]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bbc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc4:	4951      	ldr	r1, [pc, #324]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	650b      	str	r3, [r1, #80]	; 0x50
 8003bca:	e001      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bcc:	7dfb      	ldrb	r3, [r7, #23]
 8003bce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d04b      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003be6:	d02e      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bec:	d828      	bhi.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf2:	d02a      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf8:	d822      	bhi.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003bfa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bfe:	d026      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003c00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c04:	d81c      	bhi.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003c06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c0a:	d010      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c10:	d816      	bhi.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d01d      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003c16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c1a:	d111      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3304      	adds	r3, #4
 8003c20:	2101      	movs	r1, #1
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 ff70 	bl	8004b08 <RCCEx_PLL2_Config>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c2c:	e012      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3324      	adds	r3, #36	; 0x24
 8003c32:	2101      	movs	r1, #1
 8003c34:	4618      	mov	r0, r3
 8003c36:	f001 f819 	bl	8004c6c <RCCEx_PLL3_Config>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c3e:	e009      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	75fb      	strb	r3, [r7, #23]
      break;
 8003c44:	e006      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003c46:	bf00      	nop
 8003c48:	e004      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003c4a:	bf00      	nop
 8003c4c:	e002      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003c4e:	bf00      	nop
 8003c50:	e000      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003c52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c54:	7dfb      	ldrb	r3, [r7, #23]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10a      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c5a:	4b2c      	ldr	r3, [pc, #176]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c68:	4928      	ldr	r1, [pc, #160]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	658b      	str	r3, [r1, #88]	; 0x58
 8003c6e:	e001      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c70:	7dfb      	ldrb	r3, [r7, #23]
 8003c72:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d02f      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c88:	d00e      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003c8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c8e:	d814      	bhi.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d015      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003c94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c98:	d10f      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c9a:	4b1c      	ldr	r3, [pc, #112]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9e:	4a1b      	ldr	r2, [pc, #108]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003ca6:	e00c      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3304      	adds	r3, #4
 8003cac:	2101      	movs	r1, #1
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 ff2a 	bl	8004b08 <RCCEx_PLL2_Config>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003cb8:	e003      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	75fb      	strb	r3, [r7, #23]
      break;
 8003cbe:	e000      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8003cc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d109      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cc8:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ccc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cd4:	490d      	ldr	r1, [pc, #52]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	650b      	str	r3, [r1, #80]	; 0x50
 8003cda:	e001      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
 8003cde:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d034      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d81d      	bhi.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003cf4:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfa:	bf00      	nop
 8003cfc:	08003d37 	.word	0x08003d37
 8003d00:	08003d11 	.word	0x08003d11
 8003d04:	08003d1f 	.word	0x08003d1f
 8003d08:	08003d37 	.word	0x08003d37
 8003d0c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d10:	4bb1      	ldr	r3, [pc, #708]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	4ab0      	ldr	r2, [pc, #704]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003d1c:	e00c      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3304      	adds	r3, #4
 8003d22:	2102      	movs	r1, #2
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 feef 	bl	8004b08 <RCCEx_PLL2_Config>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003d2e:	e003      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	75fb      	strb	r3, [r7, #23]
      break;
 8003d34:	e000      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8003d36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d38:	7dfb      	ldrb	r3, [r7, #23]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d3e:	4ba6      	ldr	r3, [pc, #664]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d42:	f023 0203 	bic.w	r2, r3, #3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	49a3      	ldr	r1, [pc, #652]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003d50:	e001      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d52:	7dfb      	ldrb	r3, [r7, #23]
 8003d54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 8086 	beq.w	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d64:	4b9d      	ldr	r3, [pc, #628]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a9c      	ldr	r2, [pc, #624]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d70:	f7fd fbd4 	bl	800151c <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d76:	e009      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d78:	f7fd fbd0 	bl	800151c <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b64      	cmp	r3, #100	; 0x64
 8003d84:	d902      	bls.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	75fb      	strb	r3, [r7, #23]
        break;
 8003d8a:	e005      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d8c:	4b93      	ldr	r3, [pc, #588]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0ef      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8003d98:	7dfb      	ldrb	r3, [r7, #23]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d166      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d9e:	4b8e      	ldr	r3, [pc, #568]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003da0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003da8:	4053      	eors	r3, r2
 8003daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d013      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003db2:	4b89      	ldr	r3, [pc, #548]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dbc:	4b86      	ldr	r3, [pc, #536]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc0:	4a85      	ldr	r2, [pc, #532]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dc8:	4b83      	ldr	r3, [pc, #524]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dcc:	4a82      	ldr	r2, [pc, #520]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003dd4:	4a80      	ldr	r2, [pc, #512]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de4:	d115      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de6:	f7fd fb99 	bl	800151c <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dec:	e00b      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dee:	f7fd fb95 	bl	800151c <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d902      	bls.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	75fb      	strb	r3, [r7, #23]
            break;
 8003e04:	e005      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e06:	4b74      	ldr	r3, [pc, #464]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0ed      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8003e12:	7dfb      	ldrb	r3, [r7, #23]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d126      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e26:	d10d      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003e28:	4b6b      	ldr	r3, [pc, #428]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e36:	0919      	lsrs	r1, r3, #4
 8003e38:	4b69      	ldr	r3, [pc, #420]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003e3a:	400b      	ands	r3, r1
 8003e3c:	4966      	ldr	r1, [pc, #408]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	610b      	str	r3, [r1, #16]
 8003e42:	e005      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8003e44:	4b64      	ldr	r3, [pc, #400]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	4a63      	ldr	r2, [pc, #396]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003e4a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e4e:	6113      	str	r3, [r2, #16]
 8003e50:	4b61      	ldr	r3, [pc, #388]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003e52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e5e:	495e      	ldr	r1, [pc, #376]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	670b      	str	r3, [r1, #112]	; 0x70
 8003e64:	e004      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e66:	7dfb      	ldrb	r3, [r7, #23]
 8003e68:	75bb      	strb	r3, [r7, #22]
 8003e6a:	e001      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e6c:	7dfb      	ldrb	r3, [r7, #23]
 8003e6e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d07e      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e80:	2b28      	cmp	r3, #40	; 0x28
 8003e82:	d867      	bhi.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003e84:	a201      	add	r2, pc, #4	; (adr r2, 8003e8c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8003e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8a:	bf00      	nop
 8003e8c:	08003f5b 	.word	0x08003f5b
 8003e90:	08003f55 	.word	0x08003f55
 8003e94:	08003f55 	.word	0x08003f55
 8003e98:	08003f55 	.word	0x08003f55
 8003e9c:	08003f55 	.word	0x08003f55
 8003ea0:	08003f55 	.word	0x08003f55
 8003ea4:	08003f55 	.word	0x08003f55
 8003ea8:	08003f55 	.word	0x08003f55
 8003eac:	08003f31 	.word	0x08003f31
 8003eb0:	08003f55 	.word	0x08003f55
 8003eb4:	08003f55 	.word	0x08003f55
 8003eb8:	08003f55 	.word	0x08003f55
 8003ebc:	08003f55 	.word	0x08003f55
 8003ec0:	08003f55 	.word	0x08003f55
 8003ec4:	08003f55 	.word	0x08003f55
 8003ec8:	08003f55 	.word	0x08003f55
 8003ecc:	08003f43 	.word	0x08003f43
 8003ed0:	08003f55 	.word	0x08003f55
 8003ed4:	08003f55 	.word	0x08003f55
 8003ed8:	08003f55 	.word	0x08003f55
 8003edc:	08003f55 	.word	0x08003f55
 8003ee0:	08003f55 	.word	0x08003f55
 8003ee4:	08003f55 	.word	0x08003f55
 8003ee8:	08003f55 	.word	0x08003f55
 8003eec:	08003f5b 	.word	0x08003f5b
 8003ef0:	08003f55 	.word	0x08003f55
 8003ef4:	08003f55 	.word	0x08003f55
 8003ef8:	08003f55 	.word	0x08003f55
 8003efc:	08003f55 	.word	0x08003f55
 8003f00:	08003f55 	.word	0x08003f55
 8003f04:	08003f55 	.word	0x08003f55
 8003f08:	08003f55 	.word	0x08003f55
 8003f0c:	08003f5b 	.word	0x08003f5b
 8003f10:	08003f55 	.word	0x08003f55
 8003f14:	08003f55 	.word	0x08003f55
 8003f18:	08003f55 	.word	0x08003f55
 8003f1c:	08003f55 	.word	0x08003f55
 8003f20:	08003f55 	.word	0x08003f55
 8003f24:	08003f55 	.word	0x08003f55
 8003f28:	08003f55 	.word	0x08003f55
 8003f2c:	08003f5b 	.word	0x08003f5b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3304      	adds	r3, #4
 8003f34:	2101      	movs	r1, #1
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fde6 	bl	8004b08 <RCCEx_PLL2_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003f40:	e00c      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3324      	adds	r3, #36	; 0x24
 8003f46:	2101      	movs	r1, #1
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fe8f 	bl	8004c6c <RCCEx_PLL3_Config>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003f52:	e003      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	75fb      	strb	r3, [r7, #23]
      break;
 8003f58:	e000      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003f5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f5c:	7dfb      	ldrb	r3, [r7, #23]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f62:	4b1d      	ldr	r3, [pc, #116]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f66:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f6e:	491a      	ldr	r1, [pc, #104]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	654b      	str	r3, [r1, #84]	; 0x54
 8003f74:	e001      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f76:	7dfb      	ldrb	r3, [r7, #23]
 8003f78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d03e      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8a:	2b05      	cmp	r3, #5
 8003f8c:	d820      	bhi.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8003f8e:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8003f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f94:	08003fe5 	.word	0x08003fe5
 8003f98:	08003fad 	.word	0x08003fad
 8003f9c:	08003fbf 	.word	0x08003fbf
 8003fa0:	08003fe5 	.word	0x08003fe5
 8003fa4:	08003fe5 	.word	0x08003fe5
 8003fa8:	08003fe5 	.word	0x08003fe5
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fda8 	bl	8004b08 <RCCEx_PLL2_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003fbc:	e013      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3324      	adds	r3, #36	; 0x24
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 fe51 	bl	8004c6c <RCCEx_PLL3_Config>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003fce:	e00a      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fd4:	e007      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8003fd6:	bf00      	nop
 8003fd8:	58024400 	.word	0x58024400
 8003fdc:	58024800 	.word	0x58024800
 8003fe0:	00ffffcf 	.word	0x00ffffcf
      break;
 8003fe4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fe6:	7dfb      	ldrb	r3, [r7, #23]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d109      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003fec:	4b9f      	ldr	r3, [pc, #636]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff0:	f023 0207 	bic.w	r2, r3, #7
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	499c      	ldr	r1, [pc, #624]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	654b      	str	r3, [r1, #84]	; 0x54
 8003ffe:	e001      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004000:	7dfb      	ldrb	r3, [r7, #23]
 8004002:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d039      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004016:	2b05      	cmp	r3, #5
 8004018:	d820      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	08004063 	.word	0x08004063
 8004024:	08004039 	.word	0x08004039
 8004028:	0800404b 	.word	0x0800404b
 800402c:	08004063 	.word	0x08004063
 8004030:	08004063 	.word	0x08004063
 8004034:	08004063 	.word	0x08004063
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3304      	adds	r3, #4
 800403c:	2101      	movs	r1, #1
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fd62 	bl	8004b08 <RCCEx_PLL2_Config>
 8004044:	4603      	mov	r3, r0
 8004046:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004048:	e00c      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3324      	adds	r3, #36	; 0x24
 800404e:	2101      	movs	r1, #1
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fe0b 	bl	8004c6c <RCCEx_PLL3_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800405a:	e003      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	75fb      	strb	r3, [r7, #23]
      break;
 8004060:	e000      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8004062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004064:	7dfb      	ldrb	r3, [r7, #23]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10a      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800406a:	4b80      	ldr	r3, [pc, #512]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800406c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406e:	f023 0207 	bic.w	r2, r3, #7
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004078:	497c      	ldr	r1, [pc, #496]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800407a:	4313      	orrs	r3, r2
 800407c:	658b      	str	r3, [r1, #88]	; 0x58
 800407e:	e001      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004080:	7dfb      	ldrb	r3, [r7, #23]
 8004082:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0320 	and.w	r3, r3, #32
 800408c:	2b00      	cmp	r3, #0
 800408e:	d04b      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004096:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800409a:	d02e      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x962>
 800409c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040a0:	d828      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80040a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a6:	d02a      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x966>
 80040a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ac:	d822      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80040ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040b2:	d026      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80040b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040b8:	d81c      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80040ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040be:	d010      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80040c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040c4:	d816      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d01d      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80040ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040ce:	d111      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3304      	adds	r3, #4
 80040d4:	2100      	movs	r1, #0
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 fd16 	bl	8004b08 <RCCEx_PLL2_Config>
 80040dc:	4603      	mov	r3, r0
 80040de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80040e0:	e012      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3324      	adds	r3, #36	; 0x24
 80040e6:	2102      	movs	r1, #2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fdbf 	bl	8004c6c <RCCEx_PLL3_Config>
 80040ee:	4603      	mov	r3, r0
 80040f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80040f2:	e009      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	75fb      	strb	r3, [r7, #23]
      break;
 80040f8:	e006      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80040fa:	bf00      	nop
 80040fc:	e004      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80040fe:	bf00      	nop
 8004100:	e002      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004102:	bf00      	nop
 8004104:	e000      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004106:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004108:	7dfb      	ldrb	r3, [r7, #23]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10a      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800410e:	4b57      	ldr	r3, [pc, #348]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004112:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411c:	4953      	ldr	r1, [pc, #332]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800411e:	4313      	orrs	r3, r2
 8004120:	654b      	str	r3, [r1, #84]	; 0x54
 8004122:	e001      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004124:	7dfb      	ldrb	r3, [r7, #23]
 8004126:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	d04b      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800413a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800413e:	d02e      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8004140:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004144:	d828      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800414a:	d02a      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800414c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004150:	d822      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004152:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004156:	d026      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004158:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800415c:	d81c      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800415e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004162:	d010      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8004164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004168:	d816      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800416a:	2b00      	cmp	r3, #0
 800416c:	d01d      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800416e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004172:	d111      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3304      	adds	r3, #4
 8004178:	2100      	movs	r1, #0
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fcc4 	bl	8004b08 <RCCEx_PLL2_Config>
 8004180:	4603      	mov	r3, r0
 8004182:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004184:	e012      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3324      	adds	r3, #36	; 0x24
 800418a:	2102      	movs	r1, #2
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fd6d 	bl	8004c6c <RCCEx_PLL3_Config>
 8004192:	4603      	mov	r3, r0
 8004194:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004196:	e009      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	75fb      	strb	r3, [r7, #23]
      break;
 800419c:	e006      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800419e:	bf00      	nop
 80041a0:	e004      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80041a2:	bf00      	nop
 80041a4:	e002      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80041a6:	bf00      	nop
 80041a8:	e000      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80041aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ac:	7dfb      	ldrb	r3, [r7, #23]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10a      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041b2:	4b2e      	ldr	r3, [pc, #184]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80041b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c0:	492a      	ldr	r1, [pc, #168]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	658b      	str	r3, [r1, #88]	; 0x58
 80041c6:	e001      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c8:	7dfb      	ldrb	r3, [r7, #23]
 80041ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d04d      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80041e2:	d02e      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80041e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80041e8:	d828      	bhi.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80041ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ee:	d02a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80041f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041f4:	d822      	bhi.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80041f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80041fa:	d026      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80041fc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004200:	d81c      	bhi.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004202:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004206:	d010      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8004208:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800420c:	d816      	bhi.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800420e:	2b00      	cmp	r3, #0
 8004210:	d01d      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004216:	d111      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3304      	adds	r3, #4
 800421c:	2100      	movs	r1, #0
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fc72 	bl	8004b08 <RCCEx_PLL2_Config>
 8004224:	4603      	mov	r3, r0
 8004226:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004228:	e012      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3324      	adds	r3, #36	; 0x24
 800422e:	2102      	movs	r1, #2
 8004230:	4618      	mov	r0, r3
 8004232:	f000 fd1b 	bl	8004c6c <RCCEx_PLL3_Config>
 8004236:	4603      	mov	r3, r0
 8004238:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800423a:	e009      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	75fb      	strb	r3, [r7, #23]
      break;
 8004240:	e006      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004242:	bf00      	nop
 8004244:	e004      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004246:	bf00      	nop
 8004248:	e002      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800424a:	bf00      	nop
 800424c:	e000      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800424e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004250:	7dfb      	ldrb	r3, [r7, #23]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10c      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004256:	4b05      	ldr	r3, [pc, #20]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004264:	4901      	ldr	r1, [pc, #4]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004266:	4313      	orrs	r3, r2
 8004268:	658b      	str	r3, [r1, #88]	; 0x58
 800426a:	e003      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800426c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004270:	7dfb      	ldrb	r3, [r7, #23]
 8004272:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d018      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004288:	d10a      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3324      	adds	r3, #36	; 0x24
 800428e:	2102      	movs	r1, #2
 8004290:	4618      	mov	r0, r3
 8004292:	f000 fceb 	bl	8004c6c <RCCEx_PLL3_Config>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80042a0:	4b8a      	ldr	r3, [pc, #552]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80042a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ac:	4987      	ldr	r1, [pc, #540]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0310 	and.w	r3, r3, #16
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01a      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c8:	d10a      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3324      	adds	r3, #36	; 0x24
 80042ce:	2102      	movs	r1, #2
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fccb 	bl	8004c6c <RCCEx_PLL3_Config>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042e0:	4b7a      	ldr	r3, [pc, #488]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80042e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ee:	4977      	ldr	r1, [pc, #476]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d034      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004306:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800430a:	d01d      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800430c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004310:	d817      	bhi.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800431a:	d009      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800431c:	e011      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3304      	adds	r3, #4
 8004322:	2100      	movs	r1, #0
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fbef 	bl	8004b08 <RCCEx_PLL2_Config>
 800432a:	4603      	mov	r3, r0
 800432c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800432e:	e00c      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3324      	adds	r3, #36	; 0x24
 8004334:	2102      	movs	r1, #2
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fc98 	bl	8004c6c <RCCEx_PLL3_Config>
 800433c:	4603      	mov	r3, r0
 800433e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004340:	e003      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	75fb      	strb	r3, [r7, #23]
      break;
 8004346:	e000      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8004348:	bf00      	nop
    }

    if(ret == HAL_OK)
 800434a:	7dfb      	ldrb	r3, [r7, #23]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10a      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004350:	4b5e      	ldr	r3, [pc, #376]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004354:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800435e:	495b      	ldr	r1, [pc, #364]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004360:	4313      	orrs	r3, r2
 8004362:	658b      	str	r3, [r1, #88]	; 0x58
 8004364:	e001      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004366:	7dfb      	ldrb	r3, [r7, #23]
 8004368:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d033      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800437c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004380:	d01c      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004382:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004386:	d816      	bhi.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004388:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800438c:	d003      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800438e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004392:	d007      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004394:	e00f      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004396:	4b4d      	ldr	r3, [pc, #308]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	4a4c      	ldr	r2, [pc, #304]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800439c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80043a2:	e00c      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3324      	adds	r3, #36	; 0x24
 80043a8:	2101      	movs	r1, #1
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fc5e 	bl	8004c6c <RCCEx_PLL3_Config>
 80043b0:	4603      	mov	r3, r0
 80043b2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80043b4:	e003      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	75fb      	strb	r3, [r7, #23]
      break;
 80043ba:	e000      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80043bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043be:	7dfb      	ldrb	r3, [r7, #23]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10a      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043c4:	4b41      	ldr	r3, [pc, #260]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80043c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043d2:	493e      	ldr	r1, [pc, #248]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	654b      	str	r3, [r1, #84]	; 0x54
 80043d8:	e001      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043da:	7dfb      	ldrb	r3, [r7, #23]
 80043dc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d029      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80043f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f6:	d007      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80043f8:	e00f      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043fa:	4b34      	ldr	r3, [pc, #208]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80043fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fe:	4a33      	ldr	r2, [pc, #204]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004404:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004406:	e00b      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3304      	adds	r3, #4
 800440c:	2102      	movs	r1, #2
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fb7a 	bl	8004b08 <RCCEx_PLL2_Config>
 8004414:	4603      	mov	r3, r0
 8004416:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004418:	e002      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	75fb      	strb	r3, [r7, #23]
      break;
 800441e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004420:	7dfb      	ldrb	r3, [r7, #23]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d109      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004426:	4b29      	ldr	r3, [pc, #164]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800442a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004432:	4926      	ldr	r1, [pc, #152]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004434:	4313      	orrs	r3, r2
 8004436:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004438:	e001      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443a:	7dfb      	ldrb	r3, [r7, #23]
 800443c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	3324      	adds	r3, #36	; 0x24
 800444e:	2102      	movs	r1, #2
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fc0b 	bl	8004c6c <RCCEx_PLL3_Config>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d033      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004470:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004474:	d017      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004476:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800447a:	d811      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800447c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004480:	d013      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8004482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004486:	d80b      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004488:	2b00      	cmp	r3, #0
 800448a:	d010      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800448c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004490:	d106      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004492:	4b0e      	ldr	r3, [pc, #56]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	4a0d      	ldr	r2, [pc, #52]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800449c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800449e:	e007      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	75fb      	strb	r3, [r7, #23]
      break;
 80044a4:	e004      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80044a6:	bf00      	nop
 80044a8:	e002      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80044aa:	bf00      	nop
 80044ac:	e000      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80044ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044b0:	7dfb      	ldrb	r3, [r7, #23]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10c      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044b6:	4b05      	ldr	r3, [pc, #20]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80044b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044c2:	4902      	ldr	r1, [pc, #8]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	654b      	str	r3, [r1, #84]	; 0x54
 80044c8:	e004      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80044ca:	bf00      	nop
 80044cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d0:	7dfb      	ldrb	r3, [r7, #23]
 80044d2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d008      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044e0:	4b29      	ldr	r3, [pc, #164]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80044e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ec:	4926      	ldr	r1, [pc, #152]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d008      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044fe:	4b22      	ldr	r3, [pc, #136]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004502:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800450a:	491f      	ldr	r1, [pc, #124]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800450c:	4313      	orrs	r3, r2
 800450e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00d      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800451c:	4b1a      	ldr	r3, [pc, #104]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	4a19      	ldr	r2, [pc, #100]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004522:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004526:	6113      	str	r3, [r2, #16]
 8004528:	4b17      	ldr	r3, [pc, #92]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004532:	4915      	ldr	r1, [pc, #84]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004534:	4313      	orrs	r3, r2
 8004536:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	da08      	bge.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004540:	4b11      	ldr	r3, [pc, #68]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004544:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454c:	490e      	ldr	r1, [pc, #56]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800454e:	4313      	orrs	r3, r2
 8004550:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d009      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800455e:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004562:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800456c:	4906      	ldr	r1, [pc, #24]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800456e:	4313      	orrs	r3, r2
 8004570:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004572:	7dbb      	ldrb	r3, [r7, #22]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004578:	2300      	movs	r3, #0
 800457a:	e000      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
}
 800457e:	4618      	mov	r0, r3
 8004580:	3718      	adds	r7, #24
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	58024400 	.word	0x58024400

0800458c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004590:	f7ff f8a6 	bl	80036e0 <HAL_RCC_GetHCLKFreq>
 8004594:	4602      	mov	r2, r0
 8004596:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	091b      	lsrs	r3, r3, #4
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	4904      	ldr	r1, [pc, #16]	; (80045b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80045a2:	5ccb      	ldrb	r3, [r1, r3]
 80045a4:	f003 031f 	and.w	r3, r3, #31
 80045a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	58024400 	.word	0x58024400
 80045b4:	080067f8 	.word	0x080067f8

080045b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b089      	sub	sp, #36	; 0x24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045c0:	4ba1      	ldr	r3, [pc, #644]	; (8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c4:	f003 0303 	and.w	r3, r3, #3
 80045c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80045ca:	4b9f      	ldr	r3, [pc, #636]	; (8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ce:	0b1b      	lsrs	r3, r3, #12
 80045d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80045d6:	4b9c      	ldr	r3, [pc, #624]	; (8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045da:	091b      	lsrs	r3, r3, #4
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80045e2:	4b99      	ldr	r3, [pc, #612]	; (8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e6:	08db      	lsrs	r3, r3, #3
 80045e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	fb02 f303 	mul.w	r3, r2, r3
 80045f2:	ee07 3a90 	vmov	s15, r3
 80045f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 8111 	beq.w	8004828 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	2b02      	cmp	r3, #2
 800460a:	f000 8083 	beq.w	8004714 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	2b02      	cmp	r3, #2
 8004612:	f200 80a1 	bhi.w	8004758 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d056      	beq.n	80046d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004622:	e099      	b.n	8004758 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004624:	4b88      	ldr	r3, [pc, #544]	; (8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d02d      	beq.n	800468c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004630:	4b85      	ldr	r3, [pc, #532]	; (8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	08db      	lsrs	r3, r3, #3
 8004636:	f003 0303 	and.w	r3, r3, #3
 800463a:	4a84      	ldr	r2, [pc, #528]	; (800484c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800463c:	fa22 f303 	lsr.w	r3, r2, r3
 8004640:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	ee07 3a90 	vmov	s15, r3
 8004648:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800465a:	4b7b      	ldr	r3, [pc, #492]	; (8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004662:	ee07 3a90 	vmov	s15, r3
 8004666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800466a:	ed97 6a03 	vldr	s12, [r7, #12]
 800466e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004850 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800467a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800467e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004686:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800468a:	e087      	b.n	800479c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	ee07 3a90 	vmov	s15, r3
 8004692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004696:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004854 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800469a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800469e:	4b6a      	ldr	r3, [pc, #424]	; (8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a6:	ee07 3a90 	vmov	s15, r3
 80046aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80046b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004850 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046ce:	e065      	b.n	800479c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	ee07 3a90 	vmov	s15, r3
 80046d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004858 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80046de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046e2:	4b59      	ldr	r3, [pc, #356]	; (8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ea:	ee07 3a90 	vmov	s15, r3
 80046ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004850 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800470a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800470e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004712:	e043      	b.n	800479c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	ee07 3a90 	vmov	s15, r3
 800471a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800485c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004726:	4b48      	ldr	r3, [pc, #288]	; (8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800472e:	ee07 3a90 	vmov	s15, r3
 8004732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004736:	ed97 6a03 	vldr	s12, [r7, #12]
 800473a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004850 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800473e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800474a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800474e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004752:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004756:	e021      	b.n	800479c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	ee07 3a90 	vmov	s15, r3
 800475e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004762:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004858 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800476a:	4b37      	ldr	r3, [pc, #220]	; (8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800476c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004772:	ee07 3a90 	vmov	s15, r3
 8004776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800477a:	ed97 6a03 	vldr	s12, [r7, #12]
 800477e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004850 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800478a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800478e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004796:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800479a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800479c:	4b2a      	ldr	r3, [pc, #168]	; (8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800479e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a0:	0a5b      	lsrs	r3, r3, #9
 80047a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047a6:	ee07 3a90 	vmov	s15, r3
 80047aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80047ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047c2:	ee17 2a90 	vmov	r2, s15
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80047ca:	4b1f      	ldr	r3, [pc, #124]	; (8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ce:	0c1b      	lsrs	r3, r3, #16
 80047d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047d4:	ee07 3a90 	vmov	s15, r3
 80047d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80047e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047f0:	ee17 2a90 	vmov	r2, s15
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80047f8:	4b13      	ldr	r3, [pc, #76]	; (8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fc:	0e1b      	lsrs	r3, r3, #24
 80047fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800480e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004812:	edd7 6a07 	vldr	s13, [r7, #28]
 8004816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800481a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800481e:	ee17 2a90 	vmov	r2, s15
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004826:	e008      	b.n	800483a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	609a      	str	r2, [r3, #8]
}
 800483a:	bf00      	nop
 800483c:	3724      	adds	r7, #36	; 0x24
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	58024400 	.word	0x58024400
 800484c:	03d09000 	.word	0x03d09000
 8004850:	46000000 	.word	0x46000000
 8004854:	4c742400 	.word	0x4c742400
 8004858:	4a742400 	.word	0x4a742400
 800485c:	4af42400 	.word	0x4af42400

08004860 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004860:	b480      	push	{r7}
 8004862:	b089      	sub	sp, #36	; 0x24
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004868:	4ba1      	ldr	r3, [pc, #644]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800486a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486c:	f003 0303 	and.w	r3, r3, #3
 8004870:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004872:	4b9f      	ldr	r3, [pc, #636]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004876:	0d1b      	lsrs	r3, r3, #20
 8004878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800487c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800487e:	4b9c      	ldr	r3, [pc, #624]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004882:	0a1b      	lsrs	r3, r3, #8
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800488a:	4b99      	ldr	r3, [pc, #612]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800488c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488e:	08db      	lsrs	r3, r3, #3
 8004890:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	ee07 3a90 	vmov	s15, r3
 800489e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 8111 	beq.w	8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	f000 8083 	beq.w	80049bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	f200 80a1 	bhi.w	8004a00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d056      	beq.n	8004978 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80048ca:	e099      	b.n	8004a00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048cc:	4b88      	ldr	r3, [pc, #544]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0320 	and.w	r3, r3, #32
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d02d      	beq.n	8004934 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80048d8:	4b85      	ldr	r3, [pc, #532]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	08db      	lsrs	r3, r3, #3
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	4a84      	ldr	r2, [pc, #528]	; (8004af4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80048e4:	fa22 f303 	lsr.w	r3, r2, r3
 80048e8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	ee07 3a90 	vmov	s15, r3
 80048f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	ee07 3a90 	vmov	s15, r3
 80048fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004902:	4b7b      	ldr	r3, [pc, #492]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490a:	ee07 3a90 	vmov	s15, r3
 800490e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004912:	ed97 6a03 	vldr	s12, [r7, #12]
 8004916:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004af8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800491a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800491e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800492a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800492e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004932:	e087      	b.n	8004a44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	ee07 3a90 	vmov	s15, r3
 800493a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004afc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004946:	4b6a      	ldr	r3, [pc, #424]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800494e:	ee07 3a90 	vmov	s15, r3
 8004952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004956:	ed97 6a03 	vldr	s12, [r7, #12]
 800495a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004af8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800495e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800496a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800496e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004972:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004976:	e065      	b.n	8004a44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	ee07 3a90 	vmov	s15, r3
 800497e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004982:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004b00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800498a:	4b59      	ldr	r3, [pc, #356]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004992:	ee07 3a90 	vmov	s15, r3
 8004996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800499a:	ed97 6a03 	vldr	s12, [r7, #12]
 800499e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004af8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049ba:	e043      	b.n	8004a44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	ee07 3a90 	vmov	s15, r3
 80049c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004b04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80049ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ce:	4b48      	ldr	r3, [pc, #288]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d6:	ee07 3a90 	vmov	s15, r3
 80049da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049de:	ed97 6a03 	vldr	s12, [r7, #12]
 80049e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004af8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049fe:	e021      	b.n	8004a44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	ee07 3a90 	vmov	s15, r3
 8004a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004b00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a12:	4b37      	ldr	r3, [pc, #220]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a26:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004af8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a42:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004a44:	4b2a      	ldr	r3, [pc, #168]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a48:	0a5b      	lsrs	r3, r3, #9
 8004a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a4e:	ee07 3a90 	vmov	s15, r3
 8004a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a6a:	ee17 2a90 	vmov	r2, s15
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004a72:	4b1f      	ldr	r3, [pc, #124]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	0c1b      	lsrs	r3, r3, #16
 8004a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a7c:	ee07 3a90 	vmov	s15, r3
 8004a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a98:	ee17 2a90 	vmov	r2, s15
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004aa0:	4b13      	ldr	r3, [pc, #76]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	0e1b      	lsrs	r3, r3, #24
 8004aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ab6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004aba:	edd7 6a07 	vldr	s13, [r7, #28]
 8004abe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ac6:	ee17 2a90 	vmov	r2, s15
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004ace:	e008      	b.n	8004ae2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	609a      	str	r2, [r3, #8]
}
 8004ae2:	bf00      	nop
 8004ae4:	3724      	adds	r7, #36	; 0x24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	58024400 	.word	0x58024400
 8004af4:	03d09000 	.word	0x03d09000
 8004af8:	46000000 	.word	0x46000000
 8004afc:	4c742400 	.word	0x4c742400
 8004b00:	4a742400 	.word	0x4a742400
 8004b04:	4af42400 	.word	0x4af42400

08004b08 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b16:	4b53      	ldr	r3, [pc, #332]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	d101      	bne.n	8004b26 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e099      	b.n	8004c5a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b26:	4b4f      	ldr	r3, [pc, #316]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a4e      	ldr	r2, [pc, #312]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004b2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b32:	f7fc fcf3 	bl	800151c <HAL_GetTick>
 8004b36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b38:	e008      	b.n	8004b4c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004b3a:	f7fc fcef 	bl	800151c <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e086      	b.n	8004c5a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b4c:	4b45      	ldr	r3, [pc, #276]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1f0      	bne.n	8004b3a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b58:	4b42      	ldr	r3, [pc, #264]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	031b      	lsls	r3, r3, #12
 8004b66:	493f      	ldr	r1, [pc, #252]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	628b      	str	r3, [r1, #40]	; 0x28
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	025b      	lsls	r3, r3, #9
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	431a      	orrs	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	3b01      	subs	r3, #1
 8004b88:	041b      	lsls	r3, r3, #16
 8004b8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	3b01      	subs	r3, #1
 8004b96:	061b      	lsls	r3, r3, #24
 8004b98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b9c:	4931      	ldr	r1, [pc, #196]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ba2:	4b30      	ldr	r3, [pc, #192]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	492d      	ldr	r1, [pc, #180]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004bb4:	4b2b      	ldr	r3, [pc, #172]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	f023 0220 	bic.w	r2, r3, #32
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	4928      	ldr	r1, [pc, #160]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004bc6:	4b27      	ldr	r3, [pc, #156]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	4a26      	ldr	r2, [pc, #152]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004bcc:	f023 0310 	bic.w	r3, r3, #16
 8004bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004bd2:	4b24      	ldr	r3, [pc, #144]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004bd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bd6:	4b24      	ldr	r3, [pc, #144]	; (8004c68 <RCCEx_PLL2_Config+0x160>)
 8004bd8:	4013      	ands	r3, r2
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	69d2      	ldr	r2, [r2, #28]
 8004bde:	00d2      	lsls	r2, r2, #3
 8004be0:	4920      	ldr	r1, [pc, #128]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004be6:	4b1f      	ldr	r3, [pc, #124]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bea:	4a1e      	ldr	r2, [pc, #120]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004bec:	f043 0310 	orr.w	r3, r3, #16
 8004bf0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d106      	bne.n	8004c06 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004bf8:	4b1a      	ldr	r3, [pc, #104]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	4a19      	ldr	r2, [pc, #100]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004bfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c04:	e00f      	b.n	8004c26 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d106      	bne.n	8004c1a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c0c:	4b15      	ldr	r3, [pc, #84]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c10:	4a14      	ldr	r2, [pc, #80]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004c12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c18:	e005      	b.n	8004c26 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c1a:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1e:	4a11      	ldr	r2, [pc, #68]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004c20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c26:	4b0f      	ldr	r3, [pc, #60]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a0e      	ldr	r2, [pc, #56]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004c2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c32:	f7fc fc73 	bl	800151c <HAL_GetTick>
 8004c36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c38:	e008      	b.n	8004c4c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004c3a:	f7fc fc6f 	bl	800151c <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e006      	b.n	8004c5a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c4c:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <RCCEx_PLL2_Config+0x15c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	58024400 	.word	0x58024400
 8004c68:	ffff0007 	.word	0xffff0007

08004c6c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c76:	2300      	movs	r3, #0
 8004c78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c7a:	4b53      	ldr	r3, [pc, #332]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	d101      	bne.n	8004c8a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e099      	b.n	8004dbe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c8a:	4b4f      	ldr	r3, [pc, #316]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a4e      	ldr	r2, [pc, #312]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c96:	f7fc fc41 	bl	800151c <HAL_GetTick>
 8004c9a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c9c:	e008      	b.n	8004cb0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004c9e:	f7fc fc3d 	bl	800151c <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e086      	b.n	8004dbe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004cb0:	4b45      	ldr	r3, [pc, #276]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1f0      	bne.n	8004c9e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004cbc:	4b42      	ldr	r3, [pc, #264]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	051b      	lsls	r3, r3, #20
 8004cca:	493f      	ldr	r1, [pc, #252]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	628b      	str	r3, [r1, #40]	; 0x28
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	025b      	lsls	r3, r3, #9
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	041b      	lsls	r3, r3, #16
 8004cee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	061b      	lsls	r3, r3, #24
 8004cfc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d00:	4931      	ldr	r1, [pc, #196]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004d06:	4b30      	ldr	r3, [pc, #192]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	492d      	ldr	r1, [pc, #180]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004d18:	4b2b      	ldr	r3, [pc, #172]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	4928      	ldr	r1, [pc, #160]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004d2a:	4b27      	ldr	r3, [pc, #156]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2e:	4a26      	ldr	r2, [pc, #152]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004d36:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d3a:	4b24      	ldr	r3, [pc, #144]	; (8004dcc <RCCEx_PLL3_Config+0x160>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	69d2      	ldr	r2, [r2, #28]
 8004d42:	00d2      	lsls	r2, r2, #3
 8004d44:	4920      	ldr	r1, [pc, #128]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004d4a:	4b1f      	ldr	r3, [pc, #124]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4e:	4a1e      	ldr	r2, [pc, #120]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d106      	bne.n	8004d6a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d5c:	4b1a      	ldr	r3, [pc, #104]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	4a19      	ldr	r2, [pc, #100]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004d62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d68:	e00f      	b.n	8004d8a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d106      	bne.n	8004d7e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004d70:	4b15      	ldr	r3, [pc, #84]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	4a14      	ldr	r2, [pc, #80]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004d76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d7c:	e005      	b.n	8004d8a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d7e:	4b12      	ldr	r3, [pc, #72]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d82:	4a11      	ldr	r2, [pc, #68]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004d84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d8a:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a0e      	ldr	r2, [pc, #56]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d96:	f7fc fbc1 	bl	800151c <HAL_GetTick>
 8004d9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d9c:	e008      	b.n	8004db0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004d9e:	f7fc fbbd 	bl	800151c <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e006      	b.n	8004dbe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004db0:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <RCCEx_PLL3_Config+0x15c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0f0      	beq.n	8004d9e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	58024400 	.word	0x58024400
 8004dcc:	ffff0007 	.word	0xffff0007

08004dd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e042      	b.n	8004e68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d106      	bne.n	8004dfa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7fc f9d9 	bl	80011ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2224      	movs	r2, #36	; 0x24
 8004dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0201 	bic.w	r2, r2, #1
 8004e10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f82c 	bl	8004e70 <UART_SetConfig>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d101      	bne.n	8004e22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e022      	b.n	8004e68 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d002      	beq.n	8004e30 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fe8c 	bl	8005b48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689a      	ldr	r2, [r3, #8]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0201 	orr.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 ff13 	bl	8005c8c <UART_CheckIdleState>
 8004e66:	4603      	mov	r3, r0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e74:	b092      	sub	sp, #72	; 0x48
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	4bbe      	ldr	r3, [pc, #760]	; (8005198 <UART_SetConfig+0x328>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	6812      	ldr	r2, [r2, #0]
 8004ea6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ea8:	430b      	orrs	r3, r1
 8004eaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4ab3      	ldr	r2, [pc, #716]	; (800519c <UART_SetConfig+0x32c>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d004      	beq.n	8004edc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689a      	ldr	r2, [r3, #8]
 8004ee2:	4baf      	ldr	r3, [pc, #700]	; (80051a0 <UART_SetConfig+0x330>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	6812      	ldr	r2, [r2, #0]
 8004eea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004eec:	430b      	orrs	r3, r1
 8004eee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef6:	f023 010f 	bic.w	r1, r3, #15
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4aa6      	ldr	r2, [pc, #664]	; (80051a4 <UART_SetConfig+0x334>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d177      	bne.n	8005000 <UART_SetConfig+0x190>
 8004f10:	4ba5      	ldr	r3, [pc, #660]	; (80051a8 <UART_SetConfig+0x338>)
 8004f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f18:	2b28      	cmp	r3, #40	; 0x28
 8004f1a:	d86d      	bhi.n	8004ff8 <UART_SetConfig+0x188>
 8004f1c:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <UART_SetConfig+0xb4>)
 8004f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f22:	bf00      	nop
 8004f24:	08004fc9 	.word	0x08004fc9
 8004f28:	08004ff9 	.word	0x08004ff9
 8004f2c:	08004ff9 	.word	0x08004ff9
 8004f30:	08004ff9 	.word	0x08004ff9
 8004f34:	08004ff9 	.word	0x08004ff9
 8004f38:	08004ff9 	.word	0x08004ff9
 8004f3c:	08004ff9 	.word	0x08004ff9
 8004f40:	08004ff9 	.word	0x08004ff9
 8004f44:	08004fd1 	.word	0x08004fd1
 8004f48:	08004ff9 	.word	0x08004ff9
 8004f4c:	08004ff9 	.word	0x08004ff9
 8004f50:	08004ff9 	.word	0x08004ff9
 8004f54:	08004ff9 	.word	0x08004ff9
 8004f58:	08004ff9 	.word	0x08004ff9
 8004f5c:	08004ff9 	.word	0x08004ff9
 8004f60:	08004ff9 	.word	0x08004ff9
 8004f64:	08004fd9 	.word	0x08004fd9
 8004f68:	08004ff9 	.word	0x08004ff9
 8004f6c:	08004ff9 	.word	0x08004ff9
 8004f70:	08004ff9 	.word	0x08004ff9
 8004f74:	08004ff9 	.word	0x08004ff9
 8004f78:	08004ff9 	.word	0x08004ff9
 8004f7c:	08004ff9 	.word	0x08004ff9
 8004f80:	08004ff9 	.word	0x08004ff9
 8004f84:	08004fe1 	.word	0x08004fe1
 8004f88:	08004ff9 	.word	0x08004ff9
 8004f8c:	08004ff9 	.word	0x08004ff9
 8004f90:	08004ff9 	.word	0x08004ff9
 8004f94:	08004ff9 	.word	0x08004ff9
 8004f98:	08004ff9 	.word	0x08004ff9
 8004f9c:	08004ff9 	.word	0x08004ff9
 8004fa0:	08004ff9 	.word	0x08004ff9
 8004fa4:	08004fe9 	.word	0x08004fe9
 8004fa8:	08004ff9 	.word	0x08004ff9
 8004fac:	08004ff9 	.word	0x08004ff9
 8004fb0:	08004ff9 	.word	0x08004ff9
 8004fb4:	08004ff9 	.word	0x08004ff9
 8004fb8:	08004ff9 	.word	0x08004ff9
 8004fbc:	08004ff9 	.word	0x08004ff9
 8004fc0:	08004ff9 	.word	0x08004ff9
 8004fc4:	08004ff1 	.word	0x08004ff1
 8004fc8:	2301      	movs	r3, #1
 8004fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fce:	e326      	b.n	800561e <UART_SetConfig+0x7ae>
 8004fd0:	2304      	movs	r3, #4
 8004fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fd6:	e322      	b.n	800561e <UART_SetConfig+0x7ae>
 8004fd8:	2308      	movs	r3, #8
 8004fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fde:	e31e      	b.n	800561e <UART_SetConfig+0x7ae>
 8004fe0:	2310      	movs	r3, #16
 8004fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fe6:	e31a      	b.n	800561e <UART_SetConfig+0x7ae>
 8004fe8:	2320      	movs	r3, #32
 8004fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fee:	e316      	b.n	800561e <UART_SetConfig+0x7ae>
 8004ff0:	2340      	movs	r3, #64	; 0x40
 8004ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ff6:	e312      	b.n	800561e <UART_SetConfig+0x7ae>
 8004ff8:	2380      	movs	r3, #128	; 0x80
 8004ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ffe:	e30e      	b.n	800561e <UART_SetConfig+0x7ae>
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a69      	ldr	r2, [pc, #420]	; (80051ac <UART_SetConfig+0x33c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d130      	bne.n	800506c <UART_SetConfig+0x1fc>
 800500a:	4b67      	ldr	r3, [pc, #412]	; (80051a8 <UART_SetConfig+0x338>)
 800500c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500e:	f003 0307 	and.w	r3, r3, #7
 8005012:	2b05      	cmp	r3, #5
 8005014:	d826      	bhi.n	8005064 <UART_SetConfig+0x1f4>
 8005016:	a201      	add	r2, pc, #4	; (adr r2, 800501c <UART_SetConfig+0x1ac>)
 8005018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501c:	08005035 	.word	0x08005035
 8005020:	0800503d 	.word	0x0800503d
 8005024:	08005045 	.word	0x08005045
 8005028:	0800504d 	.word	0x0800504d
 800502c:	08005055 	.word	0x08005055
 8005030:	0800505d 	.word	0x0800505d
 8005034:	2300      	movs	r3, #0
 8005036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800503a:	e2f0      	b.n	800561e <UART_SetConfig+0x7ae>
 800503c:	2304      	movs	r3, #4
 800503e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005042:	e2ec      	b.n	800561e <UART_SetConfig+0x7ae>
 8005044:	2308      	movs	r3, #8
 8005046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800504a:	e2e8      	b.n	800561e <UART_SetConfig+0x7ae>
 800504c:	2310      	movs	r3, #16
 800504e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005052:	e2e4      	b.n	800561e <UART_SetConfig+0x7ae>
 8005054:	2320      	movs	r3, #32
 8005056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800505a:	e2e0      	b.n	800561e <UART_SetConfig+0x7ae>
 800505c:	2340      	movs	r3, #64	; 0x40
 800505e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005062:	e2dc      	b.n	800561e <UART_SetConfig+0x7ae>
 8005064:	2380      	movs	r3, #128	; 0x80
 8005066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800506a:	e2d8      	b.n	800561e <UART_SetConfig+0x7ae>
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a4f      	ldr	r2, [pc, #316]	; (80051b0 <UART_SetConfig+0x340>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d130      	bne.n	80050d8 <UART_SetConfig+0x268>
 8005076:	4b4c      	ldr	r3, [pc, #304]	; (80051a8 <UART_SetConfig+0x338>)
 8005078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507a:	f003 0307 	and.w	r3, r3, #7
 800507e:	2b05      	cmp	r3, #5
 8005080:	d826      	bhi.n	80050d0 <UART_SetConfig+0x260>
 8005082:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <UART_SetConfig+0x218>)
 8005084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005088:	080050a1 	.word	0x080050a1
 800508c:	080050a9 	.word	0x080050a9
 8005090:	080050b1 	.word	0x080050b1
 8005094:	080050b9 	.word	0x080050b9
 8005098:	080050c1 	.word	0x080050c1
 800509c:	080050c9 	.word	0x080050c9
 80050a0:	2300      	movs	r3, #0
 80050a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050a6:	e2ba      	b.n	800561e <UART_SetConfig+0x7ae>
 80050a8:	2304      	movs	r3, #4
 80050aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ae:	e2b6      	b.n	800561e <UART_SetConfig+0x7ae>
 80050b0:	2308      	movs	r3, #8
 80050b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050b6:	e2b2      	b.n	800561e <UART_SetConfig+0x7ae>
 80050b8:	2310      	movs	r3, #16
 80050ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050be:	e2ae      	b.n	800561e <UART_SetConfig+0x7ae>
 80050c0:	2320      	movs	r3, #32
 80050c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050c6:	e2aa      	b.n	800561e <UART_SetConfig+0x7ae>
 80050c8:	2340      	movs	r3, #64	; 0x40
 80050ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ce:	e2a6      	b.n	800561e <UART_SetConfig+0x7ae>
 80050d0:	2380      	movs	r3, #128	; 0x80
 80050d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050d6:	e2a2      	b.n	800561e <UART_SetConfig+0x7ae>
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a35      	ldr	r2, [pc, #212]	; (80051b4 <UART_SetConfig+0x344>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d130      	bne.n	8005144 <UART_SetConfig+0x2d4>
 80050e2:	4b31      	ldr	r3, [pc, #196]	; (80051a8 <UART_SetConfig+0x338>)
 80050e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	2b05      	cmp	r3, #5
 80050ec:	d826      	bhi.n	800513c <UART_SetConfig+0x2cc>
 80050ee:	a201      	add	r2, pc, #4	; (adr r2, 80050f4 <UART_SetConfig+0x284>)
 80050f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f4:	0800510d 	.word	0x0800510d
 80050f8:	08005115 	.word	0x08005115
 80050fc:	0800511d 	.word	0x0800511d
 8005100:	08005125 	.word	0x08005125
 8005104:	0800512d 	.word	0x0800512d
 8005108:	08005135 	.word	0x08005135
 800510c:	2300      	movs	r3, #0
 800510e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005112:	e284      	b.n	800561e <UART_SetConfig+0x7ae>
 8005114:	2304      	movs	r3, #4
 8005116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800511a:	e280      	b.n	800561e <UART_SetConfig+0x7ae>
 800511c:	2308      	movs	r3, #8
 800511e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005122:	e27c      	b.n	800561e <UART_SetConfig+0x7ae>
 8005124:	2310      	movs	r3, #16
 8005126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800512a:	e278      	b.n	800561e <UART_SetConfig+0x7ae>
 800512c:	2320      	movs	r3, #32
 800512e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005132:	e274      	b.n	800561e <UART_SetConfig+0x7ae>
 8005134:	2340      	movs	r3, #64	; 0x40
 8005136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800513a:	e270      	b.n	800561e <UART_SetConfig+0x7ae>
 800513c:	2380      	movs	r3, #128	; 0x80
 800513e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005142:	e26c      	b.n	800561e <UART_SetConfig+0x7ae>
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a1b      	ldr	r2, [pc, #108]	; (80051b8 <UART_SetConfig+0x348>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d142      	bne.n	80051d4 <UART_SetConfig+0x364>
 800514e:	4b16      	ldr	r3, [pc, #88]	; (80051a8 <UART_SetConfig+0x338>)
 8005150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	2b05      	cmp	r3, #5
 8005158:	d838      	bhi.n	80051cc <UART_SetConfig+0x35c>
 800515a:	a201      	add	r2, pc, #4	; (adr r2, 8005160 <UART_SetConfig+0x2f0>)
 800515c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005160:	08005179 	.word	0x08005179
 8005164:	08005181 	.word	0x08005181
 8005168:	08005189 	.word	0x08005189
 800516c:	08005191 	.word	0x08005191
 8005170:	080051bd 	.word	0x080051bd
 8005174:	080051c5 	.word	0x080051c5
 8005178:	2300      	movs	r3, #0
 800517a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800517e:	e24e      	b.n	800561e <UART_SetConfig+0x7ae>
 8005180:	2304      	movs	r3, #4
 8005182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005186:	e24a      	b.n	800561e <UART_SetConfig+0x7ae>
 8005188:	2308      	movs	r3, #8
 800518a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800518e:	e246      	b.n	800561e <UART_SetConfig+0x7ae>
 8005190:	2310      	movs	r3, #16
 8005192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005196:	e242      	b.n	800561e <UART_SetConfig+0x7ae>
 8005198:	cfff69f3 	.word	0xcfff69f3
 800519c:	58000c00 	.word	0x58000c00
 80051a0:	11fff4ff 	.word	0x11fff4ff
 80051a4:	40011000 	.word	0x40011000
 80051a8:	58024400 	.word	0x58024400
 80051ac:	40004400 	.word	0x40004400
 80051b0:	40004800 	.word	0x40004800
 80051b4:	40004c00 	.word	0x40004c00
 80051b8:	40005000 	.word	0x40005000
 80051bc:	2320      	movs	r3, #32
 80051be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051c2:	e22c      	b.n	800561e <UART_SetConfig+0x7ae>
 80051c4:	2340      	movs	r3, #64	; 0x40
 80051c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ca:	e228      	b.n	800561e <UART_SetConfig+0x7ae>
 80051cc:	2380      	movs	r3, #128	; 0x80
 80051ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051d2:	e224      	b.n	800561e <UART_SetConfig+0x7ae>
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4ab1      	ldr	r2, [pc, #708]	; (80054a0 <UART_SetConfig+0x630>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d176      	bne.n	80052cc <UART_SetConfig+0x45c>
 80051de:	4bb1      	ldr	r3, [pc, #708]	; (80054a4 <UART_SetConfig+0x634>)
 80051e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051e6:	2b28      	cmp	r3, #40	; 0x28
 80051e8:	d86c      	bhi.n	80052c4 <UART_SetConfig+0x454>
 80051ea:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <UART_SetConfig+0x380>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	08005295 	.word	0x08005295
 80051f4:	080052c5 	.word	0x080052c5
 80051f8:	080052c5 	.word	0x080052c5
 80051fc:	080052c5 	.word	0x080052c5
 8005200:	080052c5 	.word	0x080052c5
 8005204:	080052c5 	.word	0x080052c5
 8005208:	080052c5 	.word	0x080052c5
 800520c:	080052c5 	.word	0x080052c5
 8005210:	0800529d 	.word	0x0800529d
 8005214:	080052c5 	.word	0x080052c5
 8005218:	080052c5 	.word	0x080052c5
 800521c:	080052c5 	.word	0x080052c5
 8005220:	080052c5 	.word	0x080052c5
 8005224:	080052c5 	.word	0x080052c5
 8005228:	080052c5 	.word	0x080052c5
 800522c:	080052c5 	.word	0x080052c5
 8005230:	080052a5 	.word	0x080052a5
 8005234:	080052c5 	.word	0x080052c5
 8005238:	080052c5 	.word	0x080052c5
 800523c:	080052c5 	.word	0x080052c5
 8005240:	080052c5 	.word	0x080052c5
 8005244:	080052c5 	.word	0x080052c5
 8005248:	080052c5 	.word	0x080052c5
 800524c:	080052c5 	.word	0x080052c5
 8005250:	080052ad 	.word	0x080052ad
 8005254:	080052c5 	.word	0x080052c5
 8005258:	080052c5 	.word	0x080052c5
 800525c:	080052c5 	.word	0x080052c5
 8005260:	080052c5 	.word	0x080052c5
 8005264:	080052c5 	.word	0x080052c5
 8005268:	080052c5 	.word	0x080052c5
 800526c:	080052c5 	.word	0x080052c5
 8005270:	080052b5 	.word	0x080052b5
 8005274:	080052c5 	.word	0x080052c5
 8005278:	080052c5 	.word	0x080052c5
 800527c:	080052c5 	.word	0x080052c5
 8005280:	080052c5 	.word	0x080052c5
 8005284:	080052c5 	.word	0x080052c5
 8005288:	080052c5 	.word	0x080052c5
 800528c:	080052c5 	.word	0x080052c5
 8005290:	080052bd 	.word	0x080052bd
 8005294:	2301      	movs	r3, #1
 8005296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800529a:	e1c0      	b.n	800561e <UART_SetConfig+0x7ae>
 800529c:	2304      	movs	r3, #4
 800529e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052a2:	e1bc      	b.n	800561e <UART_SetConfig+0x7ae>
 80052a4:	2308      	movs	r3, #8
 80052a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052aa:	e1b8      	b.n	800561e <UART_SetConfig+0x7ae>
 80052ac:	2310      	movs	r3, #16
 80052ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052b2:	e1b4      	b.n	800561e <UART_SetConfig+0x7ae>
 80052b4:	2320      	movs	r3, #32
 80052b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ba:	e1b0      	b.n	800561e <UART_SetConfig+0x7ae>
 80052bc:	2340      	movs	r3, #64	; 0x40
 80052be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052c2:	e1ac      	b.n	800561e <UART_SetConfig+0x7ae>
 80052c4:	2380      	movs	r3, #128	; 0x80
 80052c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ca:	e1a8      	b.n	800561e <UART_SetConfig+0x7ae>
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a75      	ldr	r2, [pc, #468]	; (80054a8 <UART_SetConfig+0x638>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d130      	bne.n	8005338 <UART_SetConfig+0x4c8>
 80052d6:	4b73      	ldr	r3, [pc, #460]	; (80054a4 <UART_SetConfig+0x634>)
 80052d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	2b05      	cmp	r3, #5
 80052e0:	d826      	bhi.n	8005330 <UART_SetConfig+0x4c0>
 80052e2:	a201      	add	r2, pc, #4	; (adr r2, 80052e8 <UART_SetConfig+0x478>)
 80052e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e8:	08005301 	.word	0x08005301
 80052ec:	08005309 	.word	0x08005309
 80052f0:	08005311 	.word	0x08005311
 80052f4:	08005319 	.word	0x08005319
 80052f8:	08005321 	.word	0x08005321
 80052fc:	08005329 	.word	0x08005329
 8005300:	2300      	movs	r3, #0
 8005302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005306:	e18a      	b.n	800561e <UART_SetConfig+0x7ae>
 8005308:	2304      	movs	r3, #4
 800530a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800530e:	e186      	b.n	800561e <UART_SetConfig+0x7ae>
 8005310:	2308      	movs	r3, #8
 8005312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005316:	e182      	b.n	800561e <UART_SetConfig+0x7ae>
 8005318:	2310      	movs	r3, #16
 800531a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800531e:	e17e      	b.n	800561e <UART_SetConfig+0x7ae>
 8005320:	2320      	movs	r3, #32
 8005322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005326:	e17a      	b.n	800561e <UART_SetConfig+0x7ae>
 8005328:	2340      	movs	r3, #64	; 0x40
 800532a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800532e:	e176      	b.n	800561e <UART_SetConfig+0x7ae>
 8005330:	2380      	movs	r3, #128	; 0x80
 8005332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005336:	e172      	b.n	800561e <UART_SetConfig+0x7ae>
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a5b      	ldr	r2, [pc, #364]	; (80054ac <UART_SetConfig+0x63c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d130      	bne.n	80053a4 <UART_SetConfig+0x534>
 8005342:	4b58      	ldr	r3, [pc, #352]	; (80054a4 <UART_SetConfig+0x634>)
 8005344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	2b05      	cmp	r3, #5
 800534c:	d826      	bhi.n	800539c <UART_SetConfig+0x52c>
 800534e:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <UART_SetConfig+0x4e4>)
 8005350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005354:	0800536d 	.word	0x0800536d
 8005358:	08005375 	.word	0x08005375
 800535c:	0800537d 	.word	0x0800537d
 8005360:	08005385 	.word	0x08005385
 8005364:	0800538d 	.word	0x0800538d
 8005368:	08005395 	.word	0x08005395
 800536c:	2300      	movs	r3, #0
 800536e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005372:	e154      	b.n	800561e <UART_SetConfig+0x7ae>
 8005374:	2304      	movs	r3, #4
 8005376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800537a:	e150      	b.n	800561e <UART_SetConfig+0x7ae>
 800537c:	2308      	movs	r3, #8
 800537e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005382:	e14c      	b.n	800561e <UART_SetConfig+0x7ae>
 8005384:	2310      	movs	r3, #16
 8005386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800538a:	e148      	b.n	800561e <UART_SetConfig+0x7ae>
 800538c:	2320      	movs	r3, #32
 800538e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005392:	e144      	b.n	800561e <UART_SetConfig+0x7ae>
 8005394:	2340      	movs	r3, #64	; 0x40
 8005396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800539a:	e140      	b.n	800561e <UART_SetConfig+0x7ae>
 800539c:	2380      	movs	r3, #128	; 0x80
 800539e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053a2:	e13c      	b.n	800561e <UART_SetConfig+0x7ae>
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a41      	ldr	r2, [pc, #260]	; (80054b0 <UART_SetConfig+0x640>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	f040 8082 	bne.w	80054b4 <UART_SetConfig+0x644>
 80053b0:	4b3c      	ldr	r3, [pc, #240]	; (80054a4 <UART_SetConfig+0x634>)
 80053b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053b8:	2b28      	cmp	r3, #40	; 0x28
 80053ba:	d86d      	bhi.n	8005498 <UART_SetConfig+0x628>
 80053bc:	a201      	add	r2, pc, #4	; (adr r2, 80053c4 <UART_SetConfig+0x554>)
 80053be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c2:	bf00      	nop
 80053c4:	08005469 	.word	0x08005469
 80053c8:	08005499 	.word	0x08005499
 80053cc:	08005499 	.word	0x08005499
 80053d0:	08005499 	.word	0x08005499
 80053d4:	08005499 	.word	0x08005499
 80053d8:	08005499 	.word	0x08005499
 80053dc:	08005499 	.word	0x08005499
 80053e0:	08005499 	.word	0x08005499
 80053e4:	08005471 	.word	0x08005471
 80053e8:	08005499 	.word	0x08005499
 80053ec:	08005499 	.word	0x08005499
 80053f0:	08005499 	.word	0x08005499
 80053f4:	08005499 	.word	0x08005499
 80053f8:	08005499 	.word	0x08005499
 80053fc:	08005499 	.word	0x08005499
 8005400:	08005499 	.word	0x08005499
 8005404:	08005479 	.word	0x08005479
 8005408:	08005499 	.word	0x08005499
 800540c:	08005499 	.word	0x08005499
 8005410:	08005499 	.word	0x08005499
 8005414:	08005499 	.word	0x08005499
 8005418:	08005499 	.word	0x08005499
 800541c:	08005499 	.word	0x08005499
 8005420:	08005499 	.word	0x08005499
 8005424:	08005481 	.word	0x08005481
 8005428:	08005499 	.word	0x08005499
 800542c:	08005499 	.word	0x08005499
 8005430:	08005499 	.word	0x08005499
 8005434:	08005499 	.word	0x08005499
 8005438:	08005499 	.word	0x08005499
 800543c:	08005499 	.word	0x08005499
 8005440:	08005499 	.word	0x08005499
 8005444:	08005489 	.word	0x08005489
 8005448:	08005499 	.word	0x08005499
 800544c:	08005499 	.word	0x08005499
 8005450:	08005499 	.word	0x08005499
 8005454:	08005499 	.word	0x08005499
 8005458:	08005499 	.word	0x08005499
 800545c:	08005499 	.word	0x08005499
 8005460:	08005499 	.word	0x08005499
 8005464:	08005491 	.word	0x08005491
 8005468:	2301      	movs	r3, #1
 800546a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800546e:	e0d6      	b.n	800561e <UART_SetConfig+0x7ae>
 8005470:	2304      	movs	r3, #4
 8005472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005476:	e0d2      	b.n	800561e <UART_SetConfig+0x7ae>
 8005478:	2308      	movs	r3, #8
 800547a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800547e:	e0ce      	b.n	800561e <UART_SetConfig+0x7ae>
 8005480:	2310      	movs	r3, #16
 8005482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005486:	e0ca      	b.n	800561e <UART_SetConfig+0x7ae>
 8005488:	2320      	movs	r3, #32
 800548a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800548e:	e0c6      	b.n	800561e <UART_SetConfig+0x7ae>
 8005490:	2340      	movs	r3, #64	; 0x40
 8005492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005496:	e0c2      	b.n	800561e <UART_SetConfig+0x7ae>
 8005498:	2380      	movs	r3, #128	; 0x80
 800549a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800549e:	e0be      	b.n	800561e <UART_SetConfig+0x7ae>
 80054a0:	40011400 	.word	0x40011400
 80054a4:	58024400 	.word	0x58024400
 80054a8:	40007800 	.word	0x40007800
 80054ac:	40007c00 	.word	0x40007c00
 80054b0:	40011800 	.word	0x40011800
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4aad      	ldr	r2, [pc, #692]	; (8005770 <UART_SetConfig+0x900>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d176      	bne.n	80055ac <UART_SetConfig+0x73c>
 80054be:	4bad      	ldr	r3, [pc, #692]	; (8005774 <UART_SetConfig+0x904>)
 80054c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054c6:	2b28      	cmp	r3, #40	; 0x28
 80054c8:	d86c      	bhi.n	80055a4 <UART_SetConfig+0x734>
 80054ca:	a201      	add	r2, pc, #4	; (adr r2, 80054d0 <UART_SetConfig+0x660>)
 80054cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d0:	08005575 	.word	0x08005575
 80054d4:	080055a5 	.word	0x080055a5
 80054d8:	080055a5 	.word	0x080055a5
 80054dc:	080055a5 	.word	0x080055a5
 80054e0:	080055a5 	.word	0x080055a5
 80054e4:	080055a5 	.word	0x080055a5
 80054e8:	080055a5 	.word	0x080055a5
 80054ec:	080055a5 	.word	0x080055a5
 80054f0:	0800557d 	.word	0x0800557d
 80054f4:	080055a5 	.word	0x080055a5
 80054f8:	080055a5 	.word	0x080055a5
 80054fc:	080055a5 	.word	0x080055a5
 8005500:	080055a5 	.word	0x080055a5
 8005504:	080055a5 	.word	0x080055a5
 8005508:	080055a5 	.word	0x080055a5
 800550c:	080055a5 	.word	0x080055a5
 8005510:	08005585 	.word	0x08005585
 8005514:	080055a5 	.word	0x080055a5
 8005518:	080055a5 	.word	0x080055a5
 800551c:	080055a5 	.word	0x080055a5
 8005520:	080055a5 	.word	0x080055a5
 8005524:	080055a5 	.word	0x080055a5
 8005528:	080055a5 	.word	0x080055a5
 800552c:	080055a5 	.word	0x080055a5
 8005530:	0800558d 	.word	0x0800558d
 8005534:	080055a5 	.word	0x080055a5
 8005538:	080055a5 	.word	0x080055a5
 800553c:	080055a5 	.word	0x080055a5
 8005540:	080055a5 	.word	0x080055a5
 8005544:	080055a5 	.word	0x080055a5
 8005548:	080055a5 	.word	0x080055a5
 800554c:	080055a5 	.word	0x080055a5
 8005550:	08005595 	.word	0x08005595
 8005554:	080055a5 	.word	0x080055a5
 8005558:	080055a5 	.word	0x080055a5
 800555c:	080055a5 	.word	0x080055a5
 8005560:	080055a5 	.word	0x080055a5
 8005564:	080055a5 	.word	0x080055a5
 8005568:	080055a5 	.word	0x080055a5
 800556c:	080055a5 	.word	0x080055a5
 8005570:	0800559d 	.word	0x0800559d
 8005574:	2301      	movs	r3, #1
 8005576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800557a:	e050      	b.n	800561e <UART_SetConfig+0x7ae>
 800557c:	2304      	movs	r3, #4
 800557e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005582:	e04c      	b.n	800561e <UART_SetConfig+0x7ae>
 8005584:	2308      	movs	r3, #8
 8005586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800558a:	e048      	b.n	800561e <UART_SetConfig+0x7ae>
 800558c:	2310      	movs	r3, #16
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005592:	e044      	b.n	800561e <UART_SetConfig+0x7ae>
 8005594:	2320      	movs	r3, #32
 8005596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800559a:	e040      	b.n	800561e <UART_SetConfig+0x7ae>
 800559c:	2340      	movs	r3, #64	; 0x40
 800559e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055a2:	e03c      	b.n	800561e <UART_SetConfig+0x7ae>
 80055a4:	2380      	movs	r3, #128	; 0x80
 80055a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055aa:	e038      	b.n	800561e <UART_SetConfig+0x7ae>
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a71      	ldr	r2, [pc, #452]	; (8005778 <UART_SetConfig+0x908>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d130      	bne.n	8005618 <UART_SetConfig+0x7a8>
 80055b6:	4b6f      	ldr	r3, [pc, #444]	; (8005774 <UART_SetConfig+0x904>)
 80055b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	2b05      	cmp	r3, #5
 80055c0:	d826      	bhi.n	8005610 <UART_SetConfig+0x7a0>
 80055c2:	a201      	add	r2, pc, #4	; (adr r2, 80055c8 <UART_SetConfig+0x758>)
 80055c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c8:	080055e1 	.word	0x080055e1
 80055cc:	080055e9 	.word	0x080055e9
 80055d0:	080055f1 	.word	0x080055f1
 80055d4:	080055f9 	.word	0x080055f9
 80055d8:	08005601 	.word	0x08005601
 80055dc:	08005609 	.word	0x08005609
 80055e0:	2302      	movs	r3, #2
 80055e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055e6:	e01a      	b.n	800561e <UART_SetConfig+0x7ae>
 80055e8:	2304      	movs	r3, #4
 80055ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ee:	e016      	b.n	800561e <UART_SetConfig+0x7ae>
 80055f0:	2308      	movs	r3, #8
 80055f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055f6:	e012      	b.n	800561e <UART_SetConfig+0x7ae>
 80055f8:	2310      	movs	r3, #16
 80055fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055fe:	e00e      	b.n	800561e <UART_SetConfig+0x7ae>
 8005600:	2320      	movs	r3, #32
 8005602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005606:	e00a      	b.n	800561e <UART_SetConfig+0x7ae>
 8005608:	2340      	movs	r3, #64	; 0x40
 800560a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800560e:	e006      	b.n	800561e <UART_SetConfig+0x7ae>
 8005610:	2380      	movs	r3, #128	; 0x80
 8005612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005616:	e002      	b.n	800561e <UART_SetConfig+0x7ae>
 8005618:	2380      	movs	r3, #128	; 0x80
 800561a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a55      	ldr	r2, [pc, #340]	; (8005778 <UART_SetConfig+0x908>)
 8005624:	4293      	cmp	r3, r2
 8005626:	f040 80f8 	bne.w	800581a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800562a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800562e:	2b20      	cmp	r3, #32
 8005630:	dc46      	bgt.n	80056c0 <UART_SetConfig+0x850>
 8005632:	2b02      	cmp	r3, #2
 8005634:	db75      	blt.n	8005722 <UART_SetConfig+0x8b2>
 8005636:	3b02      	subs	r3, #2
 8005638:	2b1e      	cmp	r3, #30
 800563a:	d872      	bhi.n	8005722 <UART_SetConfig+0x8b2>
 800563c:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <UART_SetConfig+0x7d4>)
 800563e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005642:	bf00      	nop
 8005644:	080056c7 	.word	0x080056c7
 8005648:	08005723 	.word	0x08005723
 800564c:	080056cf 	.word	0x080056cf
 8005650:	08005723 	.word	0x08005723
 8005654:	08005723 	.word	0x08005723
 8005658:	08005723 	.word	0x08005723
 800565c:	080056df 	.word	0x080056df
 8005660:	08005723 	.word	0x08005723
 8005664:	08005723 	.word	0x08005723
 8005668:	08005723 	.word	0x08005723
 800566c:	08005723 	.word	0x08005723
 8005670:	08005723 	.word	0x08005723
 8005674:	08005723 	.word	0x08005723
 8005678:	08005723 	.word	0x08005723
 800567c:	080056ef 	.word	0x080056ef
 8005680:	08005723 	.word	0x08005723
 8005684:	08005723 	.word	0x08005723
 8005688:	08005723 	.word	0x08005723
 800568c:	08005723 	.word	0x08005723
 8005690:	08005723 	.word	0x08005723
 8005694:	08005723 	.word	0x08005723
 8005698:	08005723 	.word	0x08005723
 800569c:	08005723 	.word	0x08005723
 80056a0:	08005723 	.word	0x08005723
 80056a4:	08005723 	.word	0x08005723
 80056a8:	08005723 	.word	0x08005723
 80056ac:	08005723 	.word	0x08005723
 80056b0:	08005723 	.word	0x08005723
 80056b4:	08005723 	.word	0x08005723
 80056b8:	08005723 	.word	0x08005723
 80056bc:	08005715 	.word	0x08005715
 80056c0:	2b40      	cmp	r3, #64	; 0x40
 80056c2:	d02a      	beq.n	800571a <UART_SetConfig+0x8aa>
 80056c4:	e02d      	b.n	8005722 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80056c6:	f7fe ff61 	bl	800458c <HAL_RCCEx_GetD3PCLK1Freq>
 80056ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80056cc:	e02f      	b.n	800572e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fe ff70 	bl	80045b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80056d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056dc:	e027      	b.n	800572e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056de:	f107 0318 	add.w	r3, r7, #24
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff f8bc 	bl	8004860 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056ec:	e01f      	b.n	800572e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056ee:	4b21      	ldr	r3, [pc, #132]	; (8005774 <UART_SetConfig+0x904>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0320 	and.w	r3, r3, #32
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d009      	beq.n	800570e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80056fa:	4b1e      	ldr	r3, [pc, #120]	; (8005774 <UART_SetConfig+0x904>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	08db      	lsrs	r3, r3, #3
 8005700:	f003 0303 	and.w	r3, r3, #3
 8005704:	4a1d      	ldr	r2, [pc, #116]	; (800577c <UART_SetConfig+0x90c>)
 8005706:	fa22 f303 	lsr.w	r3, r2, r3
 800570a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800570c:	e00f      	b.n	800572e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800570e:	4b1b      	ldr	r3, [pc, #108]	; (800577c <UART_SetConfig+0x90c>)
 8005710:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005712:	e00c      	b.n	800572e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005714:	4b1a      	ldr	r3, [pc, #104]	; (8005780 <UART_SetConfig+0x910>)
 8005716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005718:	e009      	b.n	800572e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800571a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800571e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005720:	e005      	b.n	800572e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800572c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800572e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 81ee 	beq.w	8005b12 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	4a12      	ldr	r2, [pc, #72]	; (8005784 <UART_SetConfig+0x914>)
 800573c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005740:	461a      	mov	r2, r3
 8005742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005744:	fbb3 f3f2 	udiv	r3, r3, r2
 8005748:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	4613      	mov	r3, r2
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	4413      	add	r3, r2
 8005754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005756:	429a      	cmp	r2, r3
 8005758:	d305      	bcc.n	8005766 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005762:	429a      	cmp	r2, r3
 8005764:	d910      	bls.n	8005788 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800576c:	e1d1      	b.n	8005b12 <UART_SetConfig+0xca2>
 800576e:	bf00      	nop
 8005770:	40011c00 	.word	0x40011c00
 8005774:	58024400 	.word	0x58024400
 8005778:	58000c00 	.word	0x58000c00
 800577c:	03d09000 	.word	0x03d09000
 8005780:	003d0900 	.word	0x003d0900
 8005784:	08006808 	.word	0x08006808
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800578a:	2200      	movs	r2, #0
 800578c:	60bb      	str	r3, [r7, #8]
 800578e:	60fa      	str	r2, [r7, #12]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	4ac0      	ldr	r2, [pc, #768]	; (8005a98 <UART_SetConfig+0xc28>)
 8005796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800579a:	b29b      	uxth	r3, r3
 800579c:	2200      	movs	r2, #0
 800579e:	603b      	str	r3, [r7, #0]
 80057a0:	607a      	str	r2, [r7, #4]
 80057a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057aa:	f7fa fdaf 	bl	800030c <__aeabi_uldivmod>
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	4610      	mov	r0, r2
 80057b4:	4619      	mov	r1, r3
 80057b6:	f04f 0200 	mov.w	r2, #0
 80057ba:	f04f 0300 	mov.w	r3, #0
 80057be:	020b      	lsls	r3, r1, #8
 80057c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057c4:	0202      	lsls	r2, r0, #8
 80057c6:	6979      	ldr	r1, [r7, #20]
 80057c8:	6849      	ldr	r1, [r1, #4]
 80057ca:	0849      	lsrs	r1, r1, #1
 80057cc:	2000      	movs	r0, #0
 80057ce:	460c      	mov	r4, r1
 80057d0:	4605      	mov	r5, r0
 80057d2:	eb12 0804 	adds.w	r8, r2, r4
 80057d6:	eb43 0905 	adc.w	r9, r3, r5
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	469a      	mov	sl, r3
 80057e2:	4693      	mov	fp, r2
 80057e4:	4652      	mov	r2, sl
 80057e6:	465b      	mov	r3, fp
 80057e8:	4640      	mov	r0, r8
 80057ea:	4649      	mov	r1, r9
 80057ec:	f7fa fd8e 	bl	800030c <__aeabi_uldivmod>
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	4613      	mov	r3, r2
 80057f6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057fe:	d308      	bcc.n	8005812 <UART_SetConfig+0x9a2>
 8005800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005802:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005806:	d204      	bcs.n	8005812 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800580e:	60da      	str	r2, [r3, #12]
 8005810:	e17f      	b.n	8005b12 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005818:	e17b      	b.n	8005b12 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005822:	f040 80bd 	bne.w	80059a0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005826:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800582a:	2b20      	cmp	r3, #32
 800582c:	dc48      	bgt.n	80058c0 <UART_SetConfig+0xa50>
 800582e:	2b00      	cmp	r3, #0
 8005830:	db7b      	blt.n	800592a <UART_SetConfig+0xaba>
 8005832:	2b20      	cmp	r3, #32
 8005834:	d879      	bhi.n	800592a <UART_SetConfig+0xaba>
 8005836:	a201      	add	r2, pc, #4	; (adr r2, 800583c <UART_SetConfig+0x9cc>)
 8005838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583c:	080058c7 	.word	0x080058c7
 8005840:	080058cf 	.word	0x080058cf
 8005844:	0800592b 	.word	0x0800592b
 8005848:	0800592b 	.word	0x0800592b
 800584c:	080058d7 	.word	0x080058d7
 8005850:	0800592b 	.word	0x0800592b
 8005854:	0800592b 	.word	0x0800592b
 8005858:	0800592b 	.word	0x0800592b
 800585c:	080058e7 	.word	0x080058e7
 8005860:	0800592b 	.word	0x0800592b
 8005864:	0800592b 	.word	0x0800592b
 8005868:	0800592b 	.word	0x0800592b
 800586c:	0800592b 	.word	0x0800592b
 8005870:	0800592b 	.word	0x0800592b
 8005874:	0800592b 	.word	0x0800592b
 8005878:	0800592b 	.word	0x0800592b
 800587c:	080058f7 	.word	0x080058f7
 8005880:	0800592b 	.word	0x0800592b
 8005884:	0800592b 	.word	0x0800592b
 8005888:	0800592b 	.word	0x0800592b
 800588c:	0800592b 	.word	0x0800592b
 8005890:	0800592b 	.word	0x0800592b
 8005894:	0800592b 	.word	0x0800592b
 8005898:	0800592b 	.word	0x0800592b
 800589c:	0800592b 	.word	0x0800592b
 80058a0:	0800592b 	.word	0x0800592b
 80058a4:	0800592b 	.word	0x0800592b
 80058a8:	0800592b 	.word	0x0800592b
 80058ac:	0800592b 	.word	0x0800592b
 80058b0:	0800592b 	.word	0x0800592b
 80058b4:	0800592b 	.word	0x0800592b
 80058b8:	0800592b 	.word	0x0800592b
 80058bc:	0800591d 	.word	0x0800591d
 80058c0:	2b40      	cmp	r3, #64	; 0x40
 80058c2:	d02e      	beq.n	8005922 <UART_SetConfig+0xab2>
 80058c4:	e031      	b.n	800592a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058c6:	f7fd ff3b 	bl	8003740 <HAL_RCC_GetPCLK1Freq>
 80058ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80058cc:	e033      	b.n	8005936 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058ce:	f7fd ff4d 	bl	800376c <HAL_RCC_GetPCLK2Freq>
 80058d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80058d4:	e02f      	b.n	8005936 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058da:	4618      	mov	r0, r3
 80058dc:	f7fe fe6c 	bl	80045b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058e4:	e027      	b.n	8005936 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058e6:	f107 0318 	add.w	r3, r7, #24
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe ffb8 	bl	8004860 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058f4:	e01f      	b.n	8005936 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058f6:	4b69      	ldr	r3, [pc, #420]	; (8005a9c <UART_SetConfig+0xc2c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0320 	and.w	r3, r3, #32
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d009      	beq.n	8005916 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005902:	4b66      	ldr	r3, [pc, #408]	; (8005a9c <UART_SetConfig+0xc2c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	08db      	lsrs	r3, r3, #3
 8005908:	f003 0303 	and.w	r3, r3, #3
 800590c:	4a64      	ldr	r2, [pc, #400]	; (8005aa0 <UART_SetConfig+0xc30>)
 800590e:	fa22 f303 	lsr.w	r3, r2, r3
 8005912:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005914:	e00f      	b.n	8005936 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005916:	4b62      	ldr	r3, [pc, #392]	; (8005aa0 <UART_SetConfig+0xc30>)
 8005918:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800591a:	e00c      	b.n	8005936 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800591c:	4b61      	ldr	r3, [pc, #388]	; (8005aa4 <UART_SetConfig+0xc34>)
 800591e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005920:	e009      	b.n	8005936 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005928:	e005      	b.n	8005936 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800592a:	2300      	movs	r3, #0
 800592c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005934:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 80ea 	beq.w	8005b12 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	4a55      	ldr	r2, [pc, #340]	; (8005a98 <UART_SetConfig+0xc28>)
 8005944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005948:	461a      	mov	r2, r3
 800594a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800594c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005950:	005a      	lsls	r2, r3, #1
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	085b      	lsrs	r3, r3, #1
 8005958:	441a      	add	r2, r3
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005962:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	2b0f      	cmp	r3, #15
 8005968:	d916      	bls.n	8005998 <UART_SetConfig+0xb28>
 800596a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005970:	d212      	bcs.n	8005998 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	b29b      	uxth	r3, r3
 8005976:	f023 030f 	bic.w	r3, r3, #15
 800597a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800597c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597e:	085b      	lsrs	r3, r3, #1
 8005980:	b29b      	uxth	r3, r3
 8005982:	f003 0307 	and.w	r3, r3, #7
 8005986:	b29a      	uxth	r2, r3
 8005988:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800598a:	4313      	orrs	r3, r2
 800598c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005994:	60da      	str	r2, [r3, #12]
 8005996:	e0bc      	b.n	8005b12 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800599e:	e0b8      	b.n	8005b12 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059a0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80059a4:	2b20      	cmp	r3, #32
 80059a6:	dc4b      	bgt.n	8005a40 <UART_SetConfig+0xbd0>
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f2c0 8087 	blt.w	8005abc <UART_SetConfig+0xc4c>
 80059ae:	2b20      	cmp	r3, #32
 80059b0:	f200 8084 	bhi.w	8005abc <UART_SetConfig+0xc4c>
 80059b4:	a201      	add	r2, pc, #4	; (adr r2, 80059bc <UART_SetConfig+0xb4c>)
 80059b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ba:	bf00      	nop
 80059bc:	08005a47 	.word	0x08005a47
 80059c0:	08005a4f 	.word	0x08005a4f
 80059c4:	08005abd 	.word	0x08005abd
 80059c8:	08005abd 	.word	0x08005abd
 80059cc:	08005a57 	.word	0x08005a57
 80059d0:	08005abd 	.word	0x08005abd
 80059d4:	08005abd 	.word	0x08005abd
 80059d8:	08005abd 	.word	0x08005abd
 80059dc:	08005a67 	.word	0x08005a67
 80059e0:	08005abd 	.word	0x08005abd
 80059e4:	08005abd 	.word	0x08005abd
 80059e8:	08005abd 	.word	0x08005abd
 80059ec:	08005abd 	.word	0x08005abd
 80059f0:	08005abd 	.word	0x08005abd
 80059f4:	08005abd 	.word	0x08005abd
 80059f8:	08005abd 	.word	0x08005abd
 80059fc:	08005a77 	.word	0x08005a77
 8005a00:	08005abd 	.word	0x08005abd
 8005a04:	08005abd 	.word	0x08005abd
 8005a08:	08005abd 	.word	0x08005abd
 8005a0c:	08005abd 	.word	0x08005abd
 8005a10:	08005abd 	.word	0x08005abd
 8005a14:	08005abd 	.word	0x08005abd
 8005a18:	08005abd 	.word	0x08005abd
 8005a1c:	08005abd 	.word	0x08005abd
 8005a20:	08005abd 	.word	0x08005abd
 8005a24:	08005abd 	.word	0x08005abd
 8005a28:	08005abd 	.word	0x08005abd
 8005a2c:	08005abd 	.word	0x08005abd
 8005a30:	08005abd 	.word	0x08005abd
 8005a34:	08005abd 	.word	0x08005abd
 8005a38:	08005abd 	.word	0x08005abd
 8005a3c:	08005aaf 	.word	0x08005aaf
 8005a40:	2b40      	cmp	r3, #64	; 0x40
 8005a42:	d037      	beq.n	8005ab4 <UART_SetConfig+0xc44>
 8005a44:	e03a      	b.n	8005abc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a46:	f7fd fe7b 	bl	8003740 <HAL_RCC_GetPCLK1Freq>
 8005a4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005a4c:	e03c      	b.n	8005ac8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a4e:	f7fd fe8d 	bl	800376c <HAL_RCC_GetPCLK2Freq>
 8005a52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005a54:	e038      	b.n	8005ac8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe fdac 	bl	80045b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a64:	e030      	b.n	8005ac8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a66:	f107 0318 	add.w	r3, r7, #24
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fe fef8 	bl	8004860 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a74:	e028      	b.n	8005ac8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a76:	4b09      	ldr	r3, [pc, #36]	; (8005a9c <UART_SetConfig+0xc2c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0320 	and.w	r3, r3, #32
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d012      	beq.n	8005aa8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a82:	4b06      	ldr	r3, [pc, #24]	; (8005a9c <UART_SetConfig+0xc2c>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	08db      	lsrs	r3, r3, #3
 8005a88:	f003 0303 	and.w	r3, r3, #3
 8005a8c:	4a04      	ldr	r2, [pc, #16]	; (8005aa0 <UART_SetConfig+0xc30>)
 8005a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a94:	e018      	b.n	8005ac8 <UART_SetConfig+0xc58>
 8005a96:	bf00      	nop
 8005a98:	08006808 	.word	0x08006808
 8005a9c:	58024400 	.word	0x58024400
 8005aa0:	03d09000 	.word	0x03d09000
 8005aa4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005aa8:	4b24      	ldr	r3, [pc, #144]	; (8005b3c <UART_SetConfig+0xccc>)
 8005aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005aac:	e00c      	b.n	8005ac8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005aae:	4b24      	ldr	r3, [pc, #144]	; (8005b40 <UART_SetConfig+0xcd0>)
 8005ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ab2:	e009      	b.n	8005ac8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ab4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005aba:	e005      	b.n	8005ac8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005ac6:	bf00      	nop
    }

    if (pclk != 0U)
 8005ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d021      	beq.n	8005b12 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	4a1c      	ldr	r2, [pc, #112]	; (8005b44 <UART_SetConfig+0xcd4>)
 8005ad4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005adc:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	085b      	lsrs	r3, r3, #1
 8005ae6:	441a      	add	r2, r3
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af4:	2b0f      	cmp	r3, #15
 8005af6:	d909      	bls.n	8005b0c <UART_SetConfig+0xc9c>
 8005af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005afe:	d205      	bcs.n	8005b0c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	60da      	str	r2, [r3, #12]
 8005b0a:	e002      	b.n	8005b12 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2200      	movs	r2, #0
 8005b26:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005b2e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3748      	adds	r7, #72	; 0x48
 8005b36:	46bd      	mov	sp, r7
 8005b38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b3c:	03d09000 	.word	0x03d09000
 8005b40:	003d0900 	.word	0x003d0900
 8005b44:	08006808 	.word	0x08006808

08005b48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00a      	beq.n	8005b72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00a      	beq.n	8005bb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00a      	beq.n	8005bd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bdc:	f003 0310 	and.w	r3, r3, #16
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00a      	beq.n	8005bfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfe:	f003 0320 	and.w	r3, r3, #32
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00a      	beq.n	8005c1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d01a      	beq.n	8005c5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c46:	d10a      	bne.n	8005c5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	605a      	str	r2, [r3, #4]
  }
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af02      	add	r7, sp, #8
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c9c:	f7fb fc3e 	bl	800151c <HAL_GetTick>
 8005ca0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0308 	and.w	r3, r3, #8
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	d10e      	bne.n	8005cce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f82f 	bl	8005d22 <UART_WaitOnFlagUntilTimeout>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e025      	b.n	8005d1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d10e      	bne.n	8005cfa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f819 	bl	8005d22 <UART_WaitOnFlagUntilTimeout>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e00f      	b.n	8005d1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2220      	movs	r2, #32
 8005d06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b09c      	sub	sp, #112	; 0x70
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	60f8      	str	r0, [r7, #12]
 8005d2a:	60b9      	str	r1, [r7, #8]
 8005d2c:	603b      	str	r3, [r7, #0]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d32:	e0a9      	b.n	8005e88 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3a:	f000 80a5 	beq.w	8005e88 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d3e:	f7fb fbed 	bl	800151c <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d302      	bcc.n	8005d54 <UART_WaitOnFlagUntilTimeout+0x32>
 8005d4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d140      	bne.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d5c:	e853 3f00 	ldrex	r3, [r3]
 8005d60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d68:	667b      	str	r3, [r7, #100]	; 0x64
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d74:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d7a:	e841 2300 	strex	r3, r2, [r1]
 8005d7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1e6      	bne.n	8005d54 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3308      	adds	r3, #8
 8005d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d98:	f023 0301 	bic.w	r3, r3, #1
 8005d9c:	663b      	str	r3, [r7, #96]	; 0x60
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3308      	adds	r3, #8
 8005da4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005da6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005da8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005daa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005dac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1e5      	bne.n	8005d86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e069      	b.n	8005eaa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d051      	beq.n	8005e88 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005df2:	d149      	bne.n	8005e88 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dfc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e06:	e853 3f00 	ldrex	r3, [r3]
 8005e0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	461a      	mov	r2, r3
 8005e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e1e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e24:	e841 2300 	strex	r3, r2, [r1]
 8005e28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1e6      	bne.n	8005dfe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3308      	adds	r3, #8
 8005e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	e853 3f00 	ldrex	r3, [r3]
 8005e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	f023 0301 	bic.w	r3, r3, #1
 8005e46:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e50:	623a      	str	r2, [r7, #32]
 8005e52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e54:	69f9      	ldr	r1, [r7, #28]
 8005e56:	6a3a      	ldr	r2, [r7, #32]
 8005e58:	e841 2300 	strex	r3, r2, [r1]
 8005e5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1e5      	bne.n	8005e30 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2220      	movs	r2, #32
 8005e78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e010      	b.n	8005eaa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	69da      	ldr	r2, [r3, #28]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	4013      	ands	r3, r2
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	bf0c      	ite	eq
 8005e98:	2301      	moveq	r3, #1
 8005e9a:	2300      	movne	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	79fb      	ldrb	r3, [r7, #7]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	f43f af46 	beq.w	8005d34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3770      	adds	r7, #112	; 0x70
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b085      	sub	sp, #20
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <HAL_UARTEx_DisableFifoMode+0x16>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	e027      	b.n	8005f18 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2224      	movs	r2, #36	; 0x24
 8005ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0201 	bic.w	r2, r2, #1
 8005eee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ef6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d101      	bne.n	8005f3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	e02d      	b.n	8005f98 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2224      	movs	r2, #36	; 0x24
 8005f48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 0201 	bic.w	r2, r2, #1
 8005f62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f84f 	bl	800601c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e02d      	b.n	8006014 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2224      	movs	r2, #36	; 0x24
 8005fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 0201 	bic.w	r2, r2, #1
 8005fde:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f811 	bl	800601c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2220      	movs	r2, #32
 8006006:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006028:	2b00      	cmp	r3, #0
 800602a:	d108      	bne.n	800603e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800603c:	e031      	b.n	80060a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800603e:	2310      	movs	r3, #16
 8006040:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006042:	2310      	movs	r3, #16
 8006044:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	0e5b      	lsrs	r3, r3, #25
 800604e:	b2db      	uxtb	r3, r3
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	0f5b      	lsrs	r3, r3, #29
 800605e:	b2db      	uxtb	r3, r3
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006066:	7bbb      	ldrb	r3, [r7, #14]
 8006068:	7b3a      	ldrb	r2, [r7, #12]
 800606a:	4911      	ldr	r1, [pc, #68]	; (80060b0 <UARTEx_SetNbDataToProcess+0x94>)
 800606c:	5c8a      	ldrb	r2, [r1, r2]
 800606e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006072:	7b3a      	ldrb	r2, [r7, #12]
 8006074:	490f      	ldr	r1, [pc, #60]	; (80060b4 <UARTEx_SetNbDataToProcess+0x98>)
 8006076:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006078:	fb93 f3f2 	sdiv	r3, r3, r2
 800607c:	b29a      	uxth	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	7b7a      	ldrb	r2, [r7, #13]
 8006088:	4909      	ldr	r1, [pc, #36]	; (80060b0 <UARTEx_SetNbDataToProcess+0x94>)
 800608a:	5c8a      	ldrb	r2, [r1, r2]
 800608c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006090:	7b7a      	ldrb	r2, [r7, #13]
 8006092:	4908      	ldr	r1, [pc, #32]	; (80060b4 <UARTEx_SetNbDataToProcess+0x98>)
 8006094:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006096:	fb93 f3f2 	sdiv	r3, r3, r2
 800609a:	b29a      	uxth	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80060a2:	bf00      	nop
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	08006820 	.word	0x08006820
 80060b4:	08006828 	.word	0x08006828

080060b8 <__libc_init_array>:
 80060b8:	b570      	push	{r4, r5, r6, lr}
 80060ba:	4d0d      	ldr	r5, [pc, #52]	; (80060f0 <__libc_init_array+0x38>)
 80060bc:	4c0d      	ldr	r4, [pc, #52]	; (80060f4 <__libc_init_array+0x3c>)
 80060be:	1b64      	subs	r4, r4, r5
 80060c0:	10a4      	asrs	r4, r4, #2
 80060c2:	2600      	movs	r6, #0
 80060c4:	42a6      	cmp	r6, r4
 80060c6:	d109      	bne.n	80060dc <__libc_init_array+0x24>
 80060c8:	4d0b      	ldr	r5, [pc, #44]	; (80060f8 <__libc_init_array+0x40>)
 80060ca:	4c0c      	ldr	r4, [pc, #48]	; (80060fc <__libc_init_array+0x44>)
 80060cc:	f000 f82e 	bl	800612c <_init>
 80060d0:	1b64      	subs	r4, r4, r5
 80060d2:	10a4      	asrs	r4, r4, #2
 80060d4:	2600      	movs	r6, #0
 80060d6:	42a6      	cmp	r6, r4
 80060d8:	d105      	bne.n	80060e6 <__libc_init_array+0x2e>
 80060da:	bd70      	pop	{r4, r5, r6, pc}
 80060dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80060e0:	4798      	blx	r3
 80060e2:	3601      	adds	r6, #1
 80060e4:	e7ee      	b.n	80060c4 <__libc_init_array+0xc>
 80060e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ea:	4798      	blx	r3
 80060ec:	3601      	adds	r6, #1
 80060ee:	e7f2      	b.n	80060d6 <__libc_init_array+0x1e>
 80060f0:	08006838 	.word	0x08006838
 80060f4:	08006838 	.word	0x08006838
 80060f8:	08006838 	.word	0x08006838
 80060fc:	0800683c 	.word	0x0800683c

08006100 <memcpy>:
 8006100:	440a      	add	r2, r1
 8006102:	4291      	cmp	r1, r2
 8006104:	f100 33ff 	add.w	r3, r0, #4294967295
 8006108:	d100      	bne.n	800610c <memcpy+0xc>
 800610a:	4770      	bx	lr
 800610c:	b510      	push	{r4, lr}
 800610e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006112:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006116:	4291      	cmp	r1, r2
 8006118:	d1f9      	bne.n	800610e <memcpy+0xe>
 800611a:	bd10      	pop	{r4, pc}

0800611c <memset>:
 800611c:	4402      	add	r2, r0
 800611e:	4603      	mov	r3, r0
 8006120:	4293      	cmp	r3, r2
 8006122:	d100      	bne.n	8006126 <memset+0xa>
 8006124:	4770      	bx	lr
 8006126:	f803 1b01 	strb.w	r1, [r3], #1
 800612a:	e7f9      	b.n	8006120 <memset+0x4>

0800612c <_init>:
 800612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612e:	bf00      	nop
 8006130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006132:	bc08      	pop	{r3}
 8006134:	469e      	mov	lr, r3
 8006136:	4770      	bx	lr

08006138 <_fini>:
 8006138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613a:	bf00      	nop
 800613c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800613e:	bc08      	pop	{r3}
 8006140:	469e      	mov	lr, r3
 8006142:	4770      	bx	lr
